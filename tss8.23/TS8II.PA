/TS8II - UWM VERSION 23
/
/COPYRIGHT 1971			DIGITAL EQUIPMENT CORPORATION
/				MAYNARD, MASSACHUSETTS
/
/

FIELD 4				/FORCE TS8II INTO TRACK 4 AT BUILD TIME
	*0
	ZBLOCK 7	/ (IN CASE ANYONE REFERENCES JOB 0
	REBOOT		/ OR JUMPS TO LOC. ZERO)
AXS1=	10
AXS2=	11
IX0=	10
IX1=	11
IX2=	12

	IFZERO TC01-1 <
	*20		/DTA CONSTANTS
DTDB,	0		/PTR TO DDB AT UUO LEVEL
DTDDB,	0		/PTR TO DDB AT INTERRUPT LEVEL
DTQ,	0		/PTR TO DDB OF QUEUED DTA REQUEST
DTBSP,	0		/PTR TO BUFFER STATUS WORD; UUO LEVEL
DTBSPI,	0		/PTR TO BUFFER STATUS WORD; INTERRUPT LEVEL
DTBLK,	0		/BLOCK# WE WANT; UUO LEVEL
DTBLKI,	0		/BLOCK# WE WANT; INTERRUPT LEVEL
DTCORA,	0		/PTR TO USER ARES
DTABSY,	-1		/CONTROLLER STATUS; -1 IF FREE
DTERCT,	0		/NUMBER OF TIMES RECOVERY HAS BEEN ATTEMPTED
	>
	*DTBST1
	0		/BUFFER 1 STATUS
DTBFA1,	DTBUF1-1	/BUFFER 1 ADDRESS
DTBST2,	0		/BUFFER 2 STATUS
DTBFA2,	DTBUF2-1	/BUFFER 2 ADDRESS

	IFZERO TC01-1 <
DTSTAB,	0		/TEMPORARY FOR STATUS REGISTER B
DTSFP,	DTINT		/PTR TO DTSF POSITION IN INTERRUPT CHAIN
DTINTD,	0		/FIELD 1 DTA INTERRUPT DISPATCH
DTL2D,	0		/FIELD 1 L2Q DISPATCH
DTBFF,	DTBUF1-DTBUF2	/RELCATIVE ORIGIN OF BUF1
DTBFAI,	0		/BUFFER ADDRESS FOR CURRENT TRANSFER
DTBS1A,	DTBST1	/PTR TO BUFFER #1 STATUS
DTSFN,	0214		/SEARCH FWD-CLEAR FLAGS-INTERRUPT

DTUSE,	DTUSER		/START DTA REQUEST
DTAGO,	DTAGO0		/START DTA SEARCH
DTBS2A,	DTBST2	/PTR TO BUFFER # 2 STATUS
DTXONF,	DTXNF0		/TURN OFF "EXECUTE ONLY" BIT

REDO1,	REDO1A		/EQUIVALENT TO FIELD 0 REDO
DTWATA,	DTWAIT		/CLEAR DT FLAGS + WAIT
	>
JOBTB0,	JOBTBL

	*57
K0020,	20
K0040,	40
K3777,	3777
K0006,	6
K0005,	5
K7755,	7755		/CURRENT ADDRESS REGISTER
K7754,	7754		/WORD COUNT REGISTER
K0400,	400
K7577,	-201
K0060,	60
K4410,	4410		/SIMULATE SELECT ERROR
	

TEMP0,	0		/WORKING STORAGE
TEMP1,	0
TEMP2,	0
TEMP3,	0
TEMP4,	0
K7677,	7677
K7000,	7000
K0204,	204
K0007,	7
K0010,	10
K0004,	4
K7773,	7773
K7774,	7774
K0070,	70
K0003,	3
L2SAP,	L2SV0+2		/POINTS TO L2SA IN FIELD 0
UDF1,	0		/SELECT USER FIELD
	0
	JMP I .-2

JOBCNT,	-JOBMAX
UDFP,	UUDF

K6203,
DISMIS,	CIF CDF
	JMP I .+1
	DISMI0		/DISMIS

GETTBA,	GETTB0		/GET PTR TO JOB STATUS
DFCLSI,	0
DFCNWI,	0

DFCLST,	DFCLS0
DFCNOW,	DFCNO0
DFCARR=UPEEK1+77

DFCNTR,	0

TIMPAT,	TAD DFTIMER	/SHOULD WE CHECK CARRIER STATUS OF PHONES?
	SNA CLA
	JMP I TIMOUP	/NOTHING PENDING WITH PHONES...
	ISZ DFTIMER	/SOMETHING PENDING; NOW?
	JMP I TIMOUP	/NO
	JMP I DFCARA	/YES, GO CHECK STATUS

DFCARA,	DFCARR
TIMOUP,	TIMOUT
DFTIMER,0	/-#SECONDS UNTIL PHONE SERVICE WIL BE RUN
BUG2,	TOF
BUG4,	BUFTST
DFGDDB,	GETDB0
CONT,	CIF CDF		/CHECK FOR LPT INTERRUPT
	JMP I .+1
	INTCOM
REBOOT=	JMS I .
	RBOOT	/INITIATE AUTOMATIC RESTART

	IFNZRO D689-4 <
	IFZERO TC01-1 <
	IFZERO TD8E <
	IFNZRO CPU-3 <
CBOOTA,	CBOOT	/POINTER TO CRASHDUMP BOOTSTRAP ROUTINE
	>>>>

	IFNZRO F1OFFJ-.&4000	<GLITCH>
	*F1OFFJ
F1OFFJ,	-JOBMAX	/USED BY SI TO IMPLEMENT 'ON' & 'OFF'
K0037,	37
BUG3,	0

	*161
CJOBDA,	0		/POINTER TO JOB STATUS BLOCK, CURRENT JOB

	*170
	NULINE		/SYSTEM PARAMETERS CONVENIENT FOR SYSTAT
	JOBMAX
	DATA1
UPTIM2,	0		/HIGH ORDER UPTIME IN SECONDS
UPTIM1,	0		/LOW ORDER UPTIME IN SECONDS
	IFZERO TC01-1 <

DTORG1=	DTBUF1+201+201
	*DTORG1
/ROUTINE TO GET A BUFFER STATUS WORD IF POSSIBLE
/CALL JMS DTBFRE
/	RETURN (PTR TO WD IN AC; AC=0 IF NONE)

DTBFRE,	0
	TAD DTBST1
	SNA CLA		/BUFFER # 1 FREE?
	JMP .+5		/YES
	TAD DTBST2
	SZA CLA		/NO - BUFFER # 2 FREE?
	JMP I DTBFRE	/NO - RETURN A ZERO
	CLA CLL CML RTL
	TAD DTBS1A	/RETURN THE STATUS-WORD ADDRESS
	JMP I DTBFRE
/DECTAPE LEVEL 2 COMPLETION ROUTINE
/ENTERED FROM L2Q VIA DTL21

DTFIN,	JMS I GETBSA	/GET THE BUFFER STATUS WORD
	JMP DTEND1	/HE'S GONE - JUST EXIT
	AND K0040	/   READ OR WRITE?
	SZA CLA
	DCA I DTBSPI	/IT WAS A WRITE, SO RELEASE BUFFER
	ISZ DTDDB	/POINTS TO JOB# IN DDB
	TAD I DTDDB	/JOB#
	JMS I GETTBA	/GET THE STATUS-REGISTER # 2
	 JOBSTS+2
	CLA IAC		/SIMULATE DECTAPE COMPLETION FLAG
	DCA I TEMP0	/  IN STATUS REGISTER 2
DTEND,	TAD I DTDDB	/GET JOB# AGAIN
	JMS I GETTBA	/GET POINTER TO JOB DT STATUS B
	 JOBSTB
	TAD DTSTAB	/STATUS B AT END OF OPERATION
	DCA I TEMP0	/SAVE IT
	ISZ DTDDB	/POINTS T0 WORD 3 OF DDB
	TAD DTBLKI	/BLOCK # JUST READ OR WRITTEN
	DCA I DTDDB	/REMEMBER WHERE WE'VE BEEN
	JMS I GETBSA	/GET THE STATUS-WORD AGAIN
	SKP		/HE'S TERMINATED - JUST CLEAR IT
	TAD K0004	/OTHERWISE SET THE 'READ - PASS 2' FLAG

DTEND1,	DCA I DTBSPI	/CLEAR THE STATUS-WORD COMPLETELY
	CDF
	TAD K7000	/PLACE NOP IN INTERRUPT CHAIN TO PROTECT
	DCA I DTSFP	/ AGAINST FUTURE SELECT-ERRORS
	DATFLD

	/THERE IS A SMALL PROBLEM IN ALLOCATING THE TWO DECTAPE BUFFERS
	/AMONG MORE THAN TWO DRIVES.  IF AN IOT IS PROCESSED WHICH
	/CANNOT BE HANDLED DUE TO A LACK OF BUFFERS, THEN THE
	/DECTAPE CONTROLLER WAIT BIT (BIT 9 OF STR2) IS CLEARED
	/AND THE CORRESPONDING BIT IS SET IN THE WAIT MASK
	/WHEN THE CURRENT DTA REQUEST FINISHES; WE TURN ON THE BIT
	/IN ALL JOBS--THE JOBS NOT USING DTA'S ARE UNAFFECTED AND
	/THE JOBS AWAITING THE CONTROLLER ALL MAKE A MAD DASH FOR
	/IT.  HOPEFULLY SOMEBODY WILL GET IT EVENTUALLY.
	TAD JOBCNT	/-JOBMAX
	DCA TEMP0	/#JOBS TO CHECK
	TAD JOBTB0	/JOBTBL-1
	DCA IX0
DTEND2,	TAD I IX0	/IS THIS JOB  DEFINED?
	SNA
	JMP DTEND3	/NO; HE CAN'T BE WAITING
	TAD K0003	/YES; BUILD POINTER TO STR2
	DCA TEMP1
	TAD I TEMP1	/GET STR2
	AND K7773	/CLEAR THE CONTROLLER WAIT FLAG
	TAD K0004	/SET IT
	DCA I TEMP1	/SAVE IT
DTEND3,	ISZ TEMP0	/DONE?
	JMP DTEND2	/NO
	TAD DTQ		/ANYTHING WAITING TO RUN?
	SNA
	JMP DTFIN1	/NO-GO INDICATE CONTROLLER IS FREE
	DCA DTBSPI	/YES-SET IT UP TO RUN
	DCA DTQ		/CLEAR QUEUE
	TAD K7774	/INITIALIZE ERROR COUNT FOR NEW JOB
	DCA DTERCT
	JMS I DTAGO	/START NEW SEARCH
DTEXIT,	CIF CDF
	JMP I .+1
	L2EXIT

DTFIN1,	STA		/INDICATE CONTROLLER IS FREE
	DCA DTABSY
	JMP DTEXIT
/DECTAPE LEVEL 2 ERROR ROUTINE
/ENTERED FROM L2Q VIA DTL21
/RETRIES MOST ERRORS UP TO "K7774" TIMES
/ENTERED SPECIALLY FOR SELECT ERRORS-NO RECOVERY

GETBSA,	GETBST

DTERR,	ISZ DTERCT	/EXHAUSTED RECOVERY ATTEMPTS
	JMP DTRCVR	/NO-TRY AGAIN
DTERR2,	JMS I GETBSA	/GET THE CURRENT BUFFER STATUS
	JMP DTEND1	/HE'S TERMINATED - JUST QUIT
	AND K0020
	SNA CLA		/IS HE DOING A READ?
	JMP DTERR1	/NO, SO WE'RE OK
	TAD DTDDB	/YES, NOW WE HAVE TO ADJUST HIS PC
	IAC
	DCA TEMP1	/POINTS TO JOB # IN DDB
	TAD I TEMP1	/GET HIS JOB
	JMS I GETTBA	/GET PTR TO HIS PC
	 JOBREG
	ISZ I TEMP0	/BUMP HIS PC (DOESN'T AFFECT HIM IF WE'RE
	NOP		/ STILL PROCESSING THE INITIAL IOT)
	TAD I TEMP1	/JOB # AGAIN
	JMS I DTXONF	/TURN OFF 'EXECUTE ONLY' BIT
	ISZ TEMP0
	ISZ TEMP0	/NOW IT POINTS TO HIS AC
	DCA I TEMP0	/CLEAR IT

DTERR1,	DCA I DTBSPI	/CLEAR THE BUFFER STATUS-WORD
	ISZ DTDDB	/POINTS TO JOB#
	TAD I DTDDB	/JOB#
	JMS I GETTBA	/GET PTR TO STR2
	 JOBSTS+2
	CLA CLL CML RTL	/AC=2,DT ERROR FLAG =2
	DCA I TEMP0
	JMP DTEND

/ERROR RECOVERY ROUTINE
/STARTS SEARCH AGAIN
	IFNZRO CPU-3   <

DTRCVR,	JMS I GETBSA	/CHECK FOR TERMINATION
	JMP DTEND1	/HE'S QUIT
	CLA
	TAD DTSTAB
	AND K1000
	SZA CLA		/ARE WE IN AN END-ZONE?
	JMP .+3		/YES - WHICH END?
DTRCV1,	JMS I DTAGO	/NO - GO RESTART SEARCH
	JMP DTEXIT	/LEVEL 2 EXIT

	CLA CLL CML RTL	/AC=2
	TAD DTDDB
	DCA TEMP0	/POINTS TO LAST BLOCK REFERENCE
	DTRA		/WHICH DIRECTION WERE WE GOING
	AND K0400	/REVERSE=400
	SZA CLA
	TAD DTFRNT	/REVERSE - NOW AT BLOCK -10
	TAD DTBACK	/FORWARD - NOW AT BLOCK 2703
	DCA I TEMP0
	JMP DTRCV1

DTSEL1,	DTRA		/GET THE A-REGISTER
	AND K0204	/CLEAR THE MOTION-BIT & INTERRUPT ENABLE
	TAD K0003	/ BUT LEAVE ANY ERROR FLAGS SHOWING
	DTXA
	ION
	DATFLD
	TAD K4410	/SIMULATE STATUS REGISTER B
	DCA DTSTAB
	JMP DTERR2

K1000,	1000
DTBACK,	2703
DTFRNT,	-10-2703	/FORCE DTAGO TO START FORWARD
		>

	IFZERO CPU-3	<

DTRCVR,	JMS I	DTAGO
	JMP	DTEXIT

DTSEL1,	CLA			/CLEAR THE AC IN 8 MODE FIRST.
	6141			/GET INTO LINC MODE
	1			/AXO--  CLEAR THE TAPE CONDITIONS
	2			/PDP--  GET BACK INTO 8 MODE
	ION			/TURN ON THE INTERUPTS AGAIN
	DATFLD
	TAD	K4410		/SIMULATE STATUS REGISTER B
	DCA	DTSTAB
	JMP	DTERR2
		>
	PAGE
/ROUTINE TO PICK UP USERS PARAMETERS & FIGURE OUT WHAT TO DO
/PICKS UP SECOND PASS OF READS AND XFERS DATA TO USER
/ALSO XFERS DATA TO DT BUFFER FOR WRITES

UDTXA,	CDF		/FIRST PICK UP USEFUL INFORMATION
	TAD I L2SAP	/LIKE USER AC
	DCA L2SA1
	TAD I UDFP	/ AND HIS FIELD
	DCA UDF1+1
	JMS UDF1	/SELECT USER'S FIELD
	STA
	TAD L2SA1	/ADDRESS OF PARAMETERS-1
	DCA IX0
	TAD I IX0	/UNIT + FUNCTIONS
	DCA DTUNFN
	TAD I IX0	/BLOCK TO READ/WRITE
	DCA DTBLK
	TAD I IX0	/CORE ADDRESS-1
	DCA DTCORA
	TAD DTUNFN	/NOW SEE IF HE OWNS UNIT
	RTL
	RTL
	AND K0007	/SELECT UNIT
	TAD DTDEVA	/START OF DT PART OF DEVTBL
	DCA .+3
	DATFLD
	JMS I DTCHKA	/FIELD 0 ENTRY FOR DEVCHK
	 0
	NOP
	TAD I .-2	/ASSIGNMENT OK; GET PTR TO DDB
	DCA DTDB	/...AND SAVE IN DTDB
	CLA CLL CML
	TAD DTBLK
	TAD KM2701
	SZA SNL CLA	/BLOCK # <= 2701?
	JMP UDTXA3	/NO - RETURN END-OF-TAPE ERROR CODE
	TAD DTUNFN	/READ OR WRITE?
	AND K0070
	TAD K7760	/READ = 20
	SZA		/IS THIS A 'READ' FUNCTION?
	JMP DTXAW	/NO - GO CHECK FOR 'WRITE'
	TAD DTUNFN	/YES - HAS HE BEEN HERE BEFORE?
	AND K7000
	CIA
	DCA DTUN	/-DT UNIT
	TAD DTBST1
	AND K7774
	SNA		/ANYONE OWN BUFFER 1?
	JMP UDTXA1	/NO, SO HE DOESN'T OWN IT
	AND K7000	/UNIT OWNING BUFFER1
	TAD DTUN	/BUFFER 1?
	SNA CLA
	JMP I DTRTR1	/YES-MOVE BUFFER 1 TO USER AREA
UDTXA1,	TAD DTBST2	/NO-BUFFER 2?
	AND K7774
	SNA		/DOES ANY0NE OWN BUFFER TWO?
	JMP UDTXA2	/NO, SO THIS GUY CAN'T OWN IT EITHER
	AND K7000	/UNIT OWNING BUFFER 1
	TAD DTUN	/-UNIT WE WANT
	SNA CLA
	JMP I DTRTR2	/MOVE BUFFER 2 TO USER

UDTXA2,	JMS I DTBUFF	/THIS MUST BE FIRST PASS OF READ
	SNA		/IS A BUFFER AVAILABLE?
	JMP I REDO1	/NO-TRY AGAIN LATER
	DCA DTBSP	/YES-SAVE PTR TO BUFFER STATUS WD.
	TAD DTUNFN	/ASSIGN BUFFER
	AND K7070	/UNIT+READ
	TAD K0002	/INDICATE 'ACTIVE'
	DCA I DTBSP	/NOW WE OWN IT
	TAD DTDB	/PREVENT HIM FROM DIDDLING IOT FROM KEYBOARD
	IAC
	DCA TEMP0
	TAD I TEMP0	/GET HIS JOB #
	JMS I DTXONF	/CLEAR HIS "EXECUTE ONLY BIT"
	TAD I TEMP0	/NOW SET IT
	TAD K0020
	DCA I TEMP0
	JMS I DTUSE	/NOW START THE TRANSFER OR QUEUE IT
	JMP I DTREDA	/ AND WAIT FOR PASS 2

DTXAW,	TAD K7760	/WRITE = 40
	SZA CLA
	JMP DTXAW1	/IT'S NOT; SIMULATE A SELECT ERROR
	JMS I DTBUFF	/GO GET A DECTAPE BUFFER
	SNA
	JMP I REDO1	/NONE NOW; TRY LATER
	DCA DTBSP	/BUFFER STATUS POINTER
	TAD DTUNFN	/ASSIGN BUFFER
	AND K7070	/SAVE UNIT + WRITE
	TAD K0002	/ AND INDICATE 'ACTIVE'
	DCA I DTBSP	/WE OWN BUFFER
	TAD DTBSP	/NOW COPY USER DATA INTO BUFFER
	IAC		/POINTS TO BUFFER ADDRESS
	DCA TEMP0
	TAD I TEMP0	/BUFFER ADDRESS
	DCA IX0
	TAD DTCORA	/ADDRESS IN USER AREA
	DCA IX1
	TAD K7577	/-201
	DCA TEMP0
	JMS UDF1	/SELECT USER FIELD
	TAD I IX1	/GET WORD
	DATFLD
	DCA I IX0	/PLACE IN BUFFER
	ISZ TEMP0	/DONE YET?
	JMP .-5		/NO
	JMS I DTUSE	/NOW GO PUT BUFFER ON TAPE
	CDF
	DCA I L2SAP	/CLEAR USER AC
	DATFLD
	JMP I DTWATA	/WAIT FOR TAPE TO FINISH

UDTXA3,	TAD K0400	/BAD BLOCK NUMBER - RETURN 5010 (END-OF-TAPE)
DTXAW1,	TAD K4410	/ILLEGAL FUNCTION - RETURN 4410 (SELECT ERROR)
	DCA TEMP1
	JMP I .+1
	DTSEL2

DTBUFF,	DTBFRE	/GET A DECTAPE BUFFER
DTREDA,	DTREDO	/BACK UP HIS PC & WAIT
DTRTR1,	DTRTRN
DTRTR2,	DTRTRN+1
DTUNFN,	0
DTDEVA,	DEVTBE+5
DTCHKA,	DEVCHK
DTUN,	0		/-DT UNIT
K0002,	2
K7070,	7070
K7760,	7760
K5010,	5010
KM2701,	-2701
L2SA1,	0
	PAGE
/ROUTINE TO START DECTAPE SEARCH (LEVEL-2)
DTAGO0,	0
	JMS I GETBSB	/GET THE BUFFER-STATUS
	JMP I DTFINA	/HE'S GONE - JUST EXIT
	CLL RTL
	RTL
	AND K0007	/GET THE DRIVE UNIT #
	TAD DTDEVP
	DCA TEMP0	/NOW POINTS TO THE DEVTBL ENTRY
	TAD I TEMP0
	SNA		/IS IT STILL ASSIGNED?
	REBOOT		/NO - ERROR *****
	DCA DTDDB
	TAD DTDDB	/ADDRESS OF DDB OWNING CONTROLLER
	TAD K0006
	DCA DTBLKI	/POINTS TO DESIRED BLOCK#
	TAD I DTBLKI
	DCA DTBLKI	/BLOCK WE WANT

	IFNZRO CPU-3	<
	CLA CLL CML RTL	/AC=2
	TAD DTDDB
	DCA TEMP0	/POINTS TO LAST BLOCK REFERENCE
	TAD I TEMP0	/LAST BLOCK USED
	TAD DTSLID	/#BLOCKS MISSED ON STOP-START
	CIA
	TAD DTBLKI	/BLOCK .GE. LAST BLOCK + SLIP?
	SMA CLA
	JMP .+5		/YES - START FORWARD
	TAD DTSRVA	/NO - SET UP FOR REVERSE SEARCH
	DCA DTINTD
	TAD K0400	/REVERSE BIT IN STATUS A
	JMP DTAGO1
		>
	TAD DTSFDA
	DCA DTINTD	/SET INTERRUPT DISPATCH FOR FORWARD SEARCH
DTAGO1,	DCA DTDIR	/DTDIR:=0 (FORWARD)

	IFNZRO CPU-3	<
	JMS I GETBSB	/GET THE BUFFER STATUS
	JMP I DTFINA	/HE'S GONE - JUST QUIT
	AND K7000	/GET UNIT
	TAD DTSFN	/SEARCH-NORMAL-INTERRUPT-CLEAR
	TAD DTDIR	/0-FORWARD; 400-REVERSE
	DCA DTDIR
	TAD K0010	/DATA TO FIELD 1
	DTLB
	IOF		/ (SO WE CAN TRAP ANY SELECT ERROR)
	TAD DTDIR
	DTCA DTXA	/LOAD SEARCH FUNCTION
	CDF
	TAD DTSBKA	/ADDRESS AT WHICH TO DUMP BLOCK#'S
	DCA I K7755	/CA (FIELD 0)
	DTSF		/A SELECT ERROR WILL SHOW UP NOW
	SKP		/NO ERROR?
	JMP I DTSL1A	/REPORT SELECT ERROR
	TAD .-3
	DCA I DTSFP	/SET UP DTSF IN INTERRUPT CHAIN
	ION
	DATFLD
	TAD DTBSPI	/FIGURE OUT ADDRESS OF BUFFER NOW
	IAC		/ SINCE WE'LL NEED TO KNOW LATER
	DCA DTBFAI	/SET PTR TO BUFFER ADDRESS
	JMP I DTAGO0	/ & RETURN

DTSBKA,	DTSBLK	/ADDRESS TO STORE BLOCK #'S
DTSL1A,	DTSEL1	/CODE TO HANDLE IMMEDIATE SELECT-ERROR
	>

	IFZERO CPU-3	<
	IOF
	JMS I GETBSB	/GET THE BUFFER STATUS
	JMP I DTFINA	/HE'S GONE - JUST EXIT
	DCA	DTDIR		/SAVE AWAY FOR NOW
	TAD	DTBLKI		/GET THE BLOCK NUMBER
	DCA	DTBLKJ		/STASH IN CORRECT POSITION.
	6141			/GO OVER TO SUPER MODE
	2000+DTDIR		/GET STATUS REGISTER A
	240+20+3		/DO AN ROL I 3(ROTATE RIGHT THREE
	1560			/BCL I
	7774			/JUST LEAVE THE UNITS BITS
	1620			/BSE I
	1130			/SET D.F.=1,NO PAUSE AND EXTENDED ADDRESSING
	0001			/AXO. SEND TO THE CONTROLLER.
	1000			/LDA
	DTDIR			/PUT STATUS REGISTER A BACK IN THE AC.
	240+6			/ROL 6. BIT 0 IS NOW THE FUNCTION(R OR W).
	1560			/CHOP OFF BITS 1-11. LINK STILL HOLDS THE UNIT BIT.
	3777			/ZAP OUT EVERYTHING EXCEPT BIT 0.
	240+20+4		/ROTATE 4 PLACES SO WE HAVE A CORRECT INST.
	1620			/NOW STICK IN THE BASIC INSTRUCTION.
	702			/READ WITHOUT CHECKING.
	4000+DTSTCI		/SAVE IN THE CORRECT PLACE NOW FOR THE INSTRUCTION.
	2			/GET BACK OVER INTO 8 MODE
	TAD DTBSPI	/FIGURE OUT WHAT BUFFER WE'LL USE.
	IAC
	DCA DTBFAI	/SET PTR TO BUFFER ADDRESS
	TAD I DTBFAI	/GET THE BUFFER POINTER NOW.
	IAC			/ADD ONE BECAUSE LINC TAPES TAKE THE CORRECT ADDRESS.
	6141			/GET BACK INTO SUPER MODE.
	23			/SEND TO THE SUPER CONTROLLER
DTSTCI,	0			/DO THE FANTASTIC OPERATION
DTBLKJ,	0			/ON THE FANTASTIC BLOCK NUMBER
	1020			/PLACE A SKIP IN THE AC NOW.
	SKP			/ALWAYS SKIP ON THIS CONDITION.
	2			/GET OVER INTO 8-MODE NOW.
	CDF			/STORE AWAY THE SKIP INSRUCTION NW.
	DCA I	DTSFP
	TAD I	DTTCK		/GET THE CLOCK NOW.
	DCA	DTTCKH		/SAVE NOW FOR A SECOND. (FOR TIMEOUT)
	DATFLD
	TAD	DTTS10		/SET THE STATUS TO SHOW NOT DONE.
	DCA	DTSTAB		/SAVE NOW.
	ION
	JMP I	DTAGO0

DTTCK,	CLK1			/THE FAST CLOCK REGISTER(50 MS.)
DTTCKH,	0			/THE "OLD" TIME NOW.
DTTS10,	10			/DUMMY FOR STATUS REGISTER B.
		>

DTDEVP,	DEVTBE+5	/START OF DECTAPE ENTRIES
DTDIR,	0	/BUILD DTXA FUNCTION
DTOVER=	K0003	/DESIRED OVERSHOOT DURING REVERSE SEARCH
DTSLID=	K0010

	IFZERO CPU-3 <
DTSFDA,	DTLITI
	>
	IFNZRO CPU-3	<

/DECTAPE LEVEL 1 INTERRUPT HANDLERS
/ENTERED FROM HARD INTERRUPT VIA DTL11

/REVERSE SEARCH
DTSRV,	TAD DTSBLK	/BLOCK# AT HEAD
	TAD DTOVER	/OVERSHOOT BEYOND SOUGHT BLOCK
	CIA
	TAD DTBLKI	/BLOCK WE WANT
	SPA CLA		/DESIRED BLK-(CURPENT BLK+OVER) .GT.0
	JMP DTDMIS	/NO-KEEP GOING
	TAD DTSFDA	/YES - NOW SEARCH FORWARD
DTOOPS,	DCA DTINTD	/CHANGE DISPATCH
	TAD K0400	/TOGGLE DIRECTION FLIP-FLOP
DTDMIS,	DTXA
	JMS I GETBSB	/CHECK THE BUFFER STATUS
	JMP DTCOMP	/HE'S GONE - STOP THE DRIVE
	CLA
	DTSF		/IS THE DARN FLAG STILL UP?
	JMP DISMIS	/NO - JUST DISMISS THE INTERRUPT
	DTRB		/YES - MUST BE ERROR; GET THE STATUS
	DCA DTSTAB

/HARDWARE ERROR - LEVEL-1 INTERRUPT
DTERL1,	TAD DTSTAB
	AND K0400
	SZA CLA		/WAS THIS A SELECT ERROR?
	TAD DTSERR	/YES - DON'T TRY TO RECOVER
	TAD DTERRA	/NO - TRY UP TO 4 TIMES

/READ/WRITE COMPLETION
DTCOMP,	TAD DTFINA	/SCHEDULE LEVEL 2 SERVICE
	DCA DTL2D	/FIELD 1 DISPATCH
	DTRA
	AND K0204	/CLEAR THE MOTION BIT & INTERRUPT ENABLE
	TAD K0003	/ BUT LEAVE ANY ERROR BITS SHOWING
	DTXA
	TAD K7000
	CDF
	DCA I DTSFP	/DISABLE THE SKIP ON DECTAPE FLAG
	TAD DTL2A0	/SET DISPATCH-FIELD 0
	JMP DISMIS	/ AND DISMIS

DTSBLK,	0		/DUMP BLOCK #'S HERE WHEN SEARCHING
DTCMPA,	DTCOMP		/READ-WRITE COMPLETION
DTSERR,	DTERR2-DTERR	/SPECIAL HANDLING FOR SELECT-ERROR
DTSFDA,	DTSFD		/FORWARD SEARCH
DTSRVA,	DTSRV		/REVERSE SEARCH

/FORWARD SEARCH
DTSFD,	TAD DTSBLK	/BLOCK WE'VE GOT
	CIA
	TAD DTBLKI	/BLOCK WE WANT
	SNA		/ARE WE THERE?
	JMP DTFND	/YES
	SMA CLA		/NO-HAVE WE GONE TOO FAR?
	JMP DTDMIS	/NO-DISMIS
	TAD DTSRVA	/YES-REVERSE
	JMP DTOOPS

/WE'VE REACHED THE DESIRED BLOCK AND ARE GOING 
/IN THE RIGHT DIRECTION, NOW START THE TRANSFER.
DTFND,	TAD I DTBFAI	/GET THE BUFFER ADDRESS
	CDF		/ TO SET UP DATA BREAK LOCATIONS
	DCA I K7755	/ CA = BUFFER - 1
	TAD K7577
	DCA I K7754	/ WC = -201
	TAD DTCMPA	/SET THE COMPLETION HANDLER ADDRESS
	DCA DTINTD
	JMS I GETBSB	/GET THE BUFFER STATUS
	JMP DTCOMP	/HE'S GONE - NO NEED TO TRANSFER DATA
	AND K0060	/GET FUNCTION
	TAD K0010	/XOR SEARCH OUT, FUNCTION IN
	JMP DTDMIS	/NOW SET THE COMMAND & CHECK FOR ERRORS
		>

		IFZERO	CPU-3	<
DTLITI,	TAD	DTI11		/SET TO SHOW DONE CONDITION
	DCA	DTSTAB		/AND PLACE IN STATUS REGISTER B.
	6141
	3			/PLACE THE CHECKSUM IN THE AC.
	2			/GET OVER INTO 8 MODE.
	7040			/COMPLEMENT IT.
	SNA CLA			/IS IT OK?
	JMP	DTLITO		/IT'S OK FOR NOW.
	TAD I	.+2		/WAS THE INSTRUCTION A READ OR WRITE?
	SKP
	DTSTCI			/POINTER TO THE OPERATION
	RTR
	RAR
	SZL CLA			/WAS IT A WRITE
	JMP	DTLITO		/YEP. IGNORE THE BAD CHECKSUM.
	TAD	DTI411		/SHOW PARITY ERROR
DTLTE,	DCA	DTSTAB		/BY STORING IN STATUS REGISTER B.
	TAD	DTERRA
DTLITO,	TAD	DTFINA
	DCA	DTL2D
	6141
	1
	2			/CLEAR OUT INTERUPT CODES FOR THE TAPE.
	TAD	DTT200		/SET BIT 4 ON TO CLEAR THE TAPE FLAG.
	6151			/CLEAR THE TAPE FLAG NOW.
	CLA
	CDF	0
	TAD	K7000		/GET A NOP IN THE AC.
	DCA I	DTSFP		/DESTROY THE SKIP INSTRUCTION.
	TAD	DTL2A0
	JMP DISMIS

DCREDR,	CLA CLL CML RAR		/AC=4000 FOR TAPE PRESET
	6152			/DO IT,BUBBY
	CLA
	TAD	DCC441		/GET THE SELECT ERROR CONDTION IN THE AC.
	JMP	DTLTE		/GIVE THE ERROR MESSAGE NOW.

DCC441,	4410			/SELECT ERROR.
DTI11,	11
DTT200,	200
DTI411,	4111
		>
DTL2A0,	DTL20	/FIELD 0 DISPATCH FOR L2Q
DTFINA,	DTFIN	/FINISH UP AT LEVEL 2
DTERRA,	DTERR-DTFIN	/ATTEMPT RECOVERY (LEVEL 2)
GETBSB,	GETBST
	PAGE
/FIELD 1 LEVEL 2 DISPATCHER
DTL21,	JMP I DTL2D

	*DTL11

/FIELD 1 LEVEL 2 DISPATCHER
		IFNZRO	CPU-3	<
DTL12,	DTRB		/CHECK FOR ERROR
	DCA DTSTAB	/SAVE STATUS B
	TAD DTSTAB
	SMA CLA
	JMP I DTINTD	/OK
	JMP I .+1	/ERROR
	DTERL1		/LEVEL 1 ERROR HANDLER
		>

		IFZERO	CPU-3	<
DTL12,	6141
	416
	17
	2
	SNA CLA			/IF AC IS NOT 0 THEN FLAG ISN'T UP YET.
	JMP I	DTINTD
	CDF	0		/PREPARE TO PICK UP THE CLOCK NOW.
	TAD I	DCCK		/GET THE NEW CLOCK
	DATFLD			/RESET THE DATA FIELD NOW.
	CMA			/NEGATE IT.
	TAD I	DCCOLD		/GET THE OLD VALUE
	CLL
	TAD	DCC640		/ADD IN THE TIME FACTOR
	SNL CLA			/TEST LINC FOR ERROR CONDTION.
	JMP I	DCCERR		/IT TOOK TOO LONG. SORRY ABOUT THAT.
	CDF CIF	0		/GO BACK AND CONTINUE WITH THE INTERUPT CRAP.
	JMP I	.+1
	DTINT+1

DCCERR,	DCREDR
	DECIMAL
DCC640,	640
	OCTAL
DCCOLD,	DTTCKH
DCCK,	CLK1
		>
DTREDO,	JMS DTRPT	/BACK UP HIS PC
DTWAIT,	ISZ DTDB	/POINTS TO JOB# IN DDB
	TAD I DTDB	/JOB#
	JMS I GETTBA	/CLEAR NOT WAITING BIT IN STR1
	 JOBSTS+1
	CLA CLL CMA RAL	/AC = 7776
	AND I TEMP0
	DCA I TEMP0
	ISZ TEMP0	/POINTS TO STR2
	DCA I TEMP0	/CLEAR DECTAPE FLAGS
	ISZ TEMP0
	IAC
	DCA I TEMP0	/SET 'NOT WAITING BIT' IN WAIT 1
	ISZ TEMP0
	TAD K0003	/DT ERROR, COMPLETION FLAGS SET IN WAIT 2
	DCA I TEMP0
REDO1B,	CIF CDF
	WAIT

/ROUTINE TO BACK UP THIS USER'S PC SO WE RE-TRY THIS IOT.
DTRPT,	0
	CDF
	STA
	TAD I L2SV0P	/SUBTRACT ONE FROM HIS PC
	DCA I L2SV0P
	DATFLD
	JMP I DTRPT

L2SV0P,	L2SV0

REDO1A,	JMS DTRPT	/BACK UP HIS PC
	TAD CJOBDA	/ADDRESS OF JOB STATUS BLOCK 1
	TAD K0003	/BUILD POINTER TO STR2
	DCA TEMP0
	DCA I TEMP0	/CLEAR ALL (DTA) FLAGS IN STR2
	ISZ TEMP0	/POINTS TO WAIT 1
	DCA I TEMP0	/CLEAR WAIT 1
	ISZ TEMP0	/POINTS TO WAIT 2
	TAD K0007	/ANY DECTAPE FLAG WILL DO
	DCA I TEMP0	/FOR PURPOSES OF WAIT
	JMP REDO1B	/AND AWAY....
/ROUTINE TO SET STATUS REGISTER B FOR DUMMY ERRORS
/USED WHEN DTA FUNCTION IS NOT 2 OR 4
/OR WHEN IMPOSSIBLE BLOCK # IS SOUGHT
/ALL WE HAVE TO DO IS SET STATUS B
/NO BUFFERS OR ANYTHING TO RELEASE. AREN'T WE LUCKY!

DTSEL2,	ISZ DTDB	/POINTS TO JOB #
	TAD I DTDB	/JOB "
	JMS I GETTBA	/GET PTR TO STATUS B
	 JOBSTB
	TAD TEMP1	/DUMMY ERROR
	DCA I TEMP0	/PUT IT AWAY
	CIF CDF
	JMP I .+1
	UUOEX1		/AND BACK TO THE USER

DTXNF0,	0		/ROUTINE TO TURN OFF JSEXON
	JMS I GETTBA	/CALLED WITH JOB # IN AC
	 JOBSTS
	TAD I TEMP0
	AND DTEXON
	DCA I TEMP0
	JMP I DTXNF0

DTEXON,	-JSEXON-1
/THIS ROUTINE TAKES THE SERVICE REQUEST POINTED AT
/BY DTDB AND EITHER STORES IT IN DTQ OR CALLS
/DTAGO TO START PROCESSING

DTUSER,	0
	TAD DTBSP	/POINTER TO BUFFER CONTROL-WORD
	DCA DTQ
	TAD K0004	/AC=4
	TAD DTDB
	DCA IX0		/SET TO REFERENCE WORD 6 OF DDB
	TAD DTBSP
	DCA I IX0	/PTR TO PTR TO BUF STATUS WD
	TAD DTBLK
	DCA I IX0	/BLOCK TO SEARCH FOR
	TAD DTCORA
	DCA I IX0	/CORE ADDRESS-1 (IN USER AREA)
	ISZ DTABSY	/CONTROLLER BUSY?
	JMP I DTUSER	/YES - LEAVE REQUEST IN QUEUE
	TAD DTQ		/NO - START IT UP
	DCA DTBSPI	/POINTER TO BUFFER CONTROL-WORD
	DCA DTQ		/QUE IS EMPTY
	TAD K7774	/-# TIMES TO ATTEMPT RECOVERY
	DCA DTERCT	/GO START SEARCH
	JMS I DTAGO
	JMP I DTUSER	/RETURN
DTRTRN,	TAD DTBFF	/MOVE DATA - BUFFER 1 TO USER
	TAD DTBFA2	/ -BUFFER 2 TO USER
	DCA IX0		/START OF BUFFER-1
	TAD DTCORA
	DCA IX1		/POINTS TO USER AREA
	TAD K7577	/-201
	DCA TEMP0
	TAD I IX0	/WORD FROM BUFFER
	JMS UDF1
	DCA I IX1	/---TO USER
	DATFLD
	ISZ TEMP0	/DONE YET?
	JMP .-5		/NO
	ISZ DTDB	/POINTS TO JOB #
	TAD I DTDB
	JMS I DTXONF	/NOW THAT HE'S BEEN HERE TWICE, TURN OFF JSEXON
	TAD K0004	/YES-NOW RELEASE BUFFER
	TAD DTDB	/START OF DDB+2
	DCA TEMP0	/POINTS TO PTR TO TO BUF STAT WD
	TAD I TEMP0	/PTR TO BUFF STATUS WD.
	DCA TEMP0
	DCA I TEMP0	/BUFF STATUS:=0
	CIF CDF		/NOW DOWN TO FIELD 1
	DCA I L2SAP	/CLEAR USER AC
	JMP I .+1	/RETURN TO USER

	/IN ORDER TO AVOID THIS USER FROM INITIATING ANOTHER
	/REQUEST WHILE OTHERS MAY BE LOCKED OUT FROM THE CONTROLLER,
	/WE PUT HIM TEMPORARILLY TO REST IF THERE ARE MORE THAN
	/2 DRIVES ON THE SYSTEM.
	IFZERO TU55	<UUOEX1	>
	IFZERO TU55-1	<WSCHED	>
	>
	IFNZRO TOF-.&4000	<GLITCH>
	*TOF
/FETCH CHARACTER
/CALL	WITH DDB ADDRESS IN AC
/	FETCH
/	-#CHAR/BUFFER FOR FRONT END FETCH,+#CHAR/BUFFER FOR TAIL END
/	END OF BLOCK RETURN
/	BUFFER EMPTY RETURN
/	CHAR IN AC

TOF,	0
	DCA TOFBP
	TAD I TOF
	DCA TOFSIZ
	ISZ TOF
	RDF
	TAD K6203
	DCA TOF7
	TAD TOFBP
	DATFLD		/SO IT KNOWS WHEREOF WE CAME
	JMS BUFTST
	JMP TOF7
	JMP TOF5
	TAD TOFSIZ	/FRONT END?
	SPA
	JMP TOF9	/YES
	CLA
	TAD TOFT1	/NO. TAIL END
	DCA TOFBCT
	STA
	TAD TOFBCT
	DCA TOFBP
	TAD TOFSIZ
	CIA
TOF9,	TAD K0007
	SMA CLA		/PACKING?
	JMP .+6		/NO
	TAD I TOFBCT	/GET CHAR
	TAD K0003
	SMA		/COUNT>3?
	JMP TOF3	/NO
	SKP
	TAD I TOFBCT
	CIA		/YES
	TAD I TOFBP
	DCA TOFT1
	TAD I TOFT1
	AND C0377
	DCA TOFT2
TOF4,	ISZ TOF
	TAD TOFSIZ
	SPA CLA
	JMP .+5
	STA
	TAD I TOFBCT
	DCA I TOFBCT
	SKP
	ISZ I TOFBCT
	NOP
	TAD TOFT2
TOF5,	ISZ TOF
TOF7,	0
	JMP I TOF
TOF3,	STL RAL
	TAD I TOFBP
	DCA TOFT1
	TAD I TOFT1
	RTR
	RTR
	AND C360
	DCA TOFT2
	ISZ TOFT1
	TAD I TOFT1
	CLL RTL
	RTL
	RAL
	AND C17
	TAD TOFT2
	DCA TOFT2
	JMP TOF4

TOFIP=K0004	/DDBINP
C0377,	377
C360,	360
C17,	17
TOFBCT,	0
TOFSIZ,	0
TOFBP,	0
TOFT2,	0
TOFT1,	0
/BUFFER TEST
/CALL	TAD ADDSESS OF DDB
/	JMS BUFTST
/	END OF BLOCK
/	EMPTY
/	NOT EMPTY

BUFTST,	0
	DCA TEMP0	/SAVE DDB ADDRESS
	RDF
	TAD K6203	/FIGURE OUT WHERE WE CAME FROM
	DCA BUFTS5	/SO WE CAN GET BACK
	TAD TEMP0	/NOW THE DDB ADDRESS AGAIN
	DATFLD
	TAD TOFIP
	DCA TOFT1	/FILL POINTER
	CLA CLL CML RTL	/AC=2
	TAD TOFT1
	DCA TOFBP	/ADDRESS OF EMPTY POINTER
	TAD TOFBP
	IAC
	DCA TOFBCT	/ADDRESS OF EMPTY COUNT
	TAD I TOFBP
	SNA		/BUFFER SET UP?
	JMP  BUFTS1	/NO
	CIA
	TAD I TOFT1	/FILL POINTER=EMPTY POINTER
	ISZ TOFT1
	SZA CLA
	JMP BUFTS2	/NO
	TAD I TOFT1
	CMA
BUFTS3,	TAD I TOFBCT
BUFTS4,	SNA CLA		/BLOCK EMPTY?
	JMP BUFTS5
	ISZ BUFTST
BUFTS1,	ISZ BUFTST
BUFTS5,	0
	JMP I BUFTST

BUFTS2,	TAD TOFSIZ
	SPA CLA
	JMP BUFTS3
	TAD TOFSIZ
	IAC
	TAD I TOFT1
	JMP BUFTS4

	IFZERO TC01-1 <
/ROUTINE TO PICK UP THE DECTAPE BUFFER STATUS-WORD
/CURRENTLY IN USE BY THE CONTROLLER AND SKIP IF THE USER
/IS STILL ACTIVE.
GETBST,	0
	DATFLD
	TAD I DTBSPI	/GET THE CONTROL-WORD
	CLL RAR
	SNA SZL CLA	/ZERO OR 'TERMINATED' SET?
	JMP I GETBST	/YES - JUST RETURN
	ISZ GETBST	/NO - SKIP ON RETURN
	TAD I DTBSPI
	JMP I GETBST	/RETURN WITH THE STATUS
	>
	IFNZRO CRASH-.&4000	<GLITCH>
	*CRASH
/CRASH-DUMP PROGRAM HAS BEEN RE-INSTALLED BY UWM.
	IFNZRO D689-4 <
	IFZERO TC01-1 <
	IFZERO TD8E <
	IFNZRO CPU-3 <
	JMP I CBOOTA	/GO LOAD THE DUMP ROUTINE
	>>>>
	IFZERO CRASH-. <
	HLT		/IF CRASHDUMP NOT CONFIGURED, JUST HALT
	>
	IFZERO TC01-1	<
/THIS FIXES THE CTRL/C (^C) PROBLEM WHEN DECTAPE IS IN MOTION.
CNTRLC,	0
	DCA CNC1	/ENTERED WITH JOB # TO CHECK
	RDF
	TAD K6203
	DCA CNTRL1	/SET THE EXIT FIELD SELECT
	DATFLD
	TAD DTBS1A
	JMS CHECK	/CHECK IF BUFFER 1 BELONGS TO HIM
	TAD DTBS2A
	JMS CHECK	/CHECK IF BUFFER 2 BELONGS TO HIM
	TAD CNC1	/PICK UP THE -JOB #
CNTRL1,	 HLT
	JMP I CNTRLC	/RETURN TO FIELD 0 - AC = JOB #
	>

CHECK,	0
	DCA CNC2
	TAD I CNC2
	CLL RAR
	SNA SZL CLA	/IS THIS BUFFER ACTIVE?
	JMP I CHECK	/NO - THEN HE CAN'T HAVE IT
	TAD I CNC2
	RTL; RTL
	AND K0007	/YES - GET THE UNIT NUMBER
	TAD SRELTB	/ AND FIND THE 'DEVTBL' ENTRY
	DCA CNC3
	TAD I CNC3	/GET THE DDB
	DCA AXS1	/ & THE PTR TO THE JOB #
	TAD I AXS1	/JOB # OF THE OWNER OF THIS DECTAPE
	CIA
	TAD CNC1
	SZA CLA		/IS IT OWNED BY THIS USER?
	JMP I CHECK
	TAD I CNC2	/YES - GET THE BUFFER STATUS-WORD AGAIN
	AND K0004
	SNA CLA		/IS HE IN PASS 2 OF 'READ'?
	CLA IAC		/NO - JUST SET THE 'TERMINATED' FLAG
	DCA I CNC2	/YES - CLEAR THE STATUS-WORD
	JMP I CHECK

SRELTB,	DEVTBE+5	/START OF DECTAPE ENTRIES IN 'DEVTBL'
/JOB TABLE ADDRESS TO TEMP0
/CALL TAD JOB#
/	JMS GETTB0
/	TABLE ENTRY
/	RETURN WITH ADDRESS IN TEMP0

CNC1,
GETTB0,	0
	DCA TEMP0	/SAVE JOB#
	TAD I GETTB0	/PICK UP ARGUMENT
	ISZ GETTB0	/ AND INCREMENT THE RETURN
	DCA .+5
	TAD TEMP0	/JOB#
	TAD JOBTB0	/START OF JOBTBL
	CIF
	JMS I GETTB1	/GETJTA
CNC2,
BRKCNT,	 0
	SNA		/LEGAL ADDRESS?
	REBOOT		/NO - ERROR *****
	DCA TEMP0	/ADDRESS TO TEMP0
	JMP I GETTB0

GETTB1,	GETJTB

DFCLS0,	ZBLOCK 4
DFCNO0,	ZBLOCK 4
DFL2S0,	ZBLOCK 4
	-1		/TO END TABLE
	IFNZRO BRKTST-.&4000	<GLITCH>
	*BRKTST

/TEST FOR BREAK CHAR
/CALL	TAD BREAK MASK, CHARACTER IN 'TTCHAR'
/	BREAK
/	BREAK RETURN
/	NON-BREAK RETURN

BRKTST,	0
	SPA SNA		/ANY CHARACTER A BREAK?
	JMP BRKEXT	/YES
	DCA BRKMSK	/NO, SAVE MASK
	DCA BRKCNT	/ZERO COUNTER
	TAD BRKTBA	/START OF RANGE VECTOR
	DCA AXS1

BRK0,	TAD I AXS1	/-LOW END OF RANGE
	SNA		/END OF LIST
	JMP BRK3	/YES
	CDF		/DOWN TO FIELD 0
	TAD I TTKARA	/IS CHAR .GT. LOW END?
	DATFLD
	SPA
	JMP BRK1	/NO-FORGET IT
	TAD I AXS1	/YES- IS CHAR <= HIGH END?
	SMA SZA CLA
	JMP BRK2	/NO

BRK3,	TAD BRKCNT	/YES- ITS'S IN THIS CLASS
	CMA
	DCA BRKCNT	/-# TIMES TO SHIFT BIT
	CLA CLL CML RAR	/SET A BIT
	RAR		/ & SHIFT IT INTO POSITION
	ISZ BRKCNT
	JMP .-2

	AND BRKMSK	/IS THIS ABREAK CHARACTER?
	SNA CLA		/DOES THE MASK COVER THIS CHARACTER?
	ISZ BRKTST	/NO - TAKE SECOND EXIT
BRKEXT,	CLA CLL
	CIF CDF
	JMP I BRKTST	/RETURN

BRK1,	CLA
	ISZ AXS1	/SKIP NEXT VALUE IN LIST
BRK2,	ISZ BRKCNT	/BUMP COUNTER
	JMP BRK0	/TRY NEXT TYPE

CNC3,
BRKMSK,	0
TTKARA,	TTCHAR

BRKTBA,	.
	-"A; "A-"Z	/LETTERS
	-"0; "0-"9	/NUMERALS
	-211; 0		/HORIZONTAL TAB
	-212; 212-215	/LF, VT, FF, RETURN
	-"!; "!-";	/! " # $ % & ' ( ) * + , - . / : ;
	-240; 0		/SPACE
	-"<; "<-"@	/<=>?@
	-"[; "[-"_	/[\]^_
	-377; 0		/RUBOUT
	-375; 375-376	/ALTMODE (FOR ASR 33 & 35)
	0		/END OF THE LIST
	IFNZRO TIMER0-.&4000	<GLITCH>
	*TIMER0
/ROUTINE TO DECREMENT TIMERS
/THEY ARE BUMPED ONCE EACH SECOND
/THUS A USER CAN MEASURE UP TO 4096 SECONDS

TIMER0,	0
	JMP DISPLA
	*.-1
	NOP		/REPLACE THIS NOP WITH 'JMP DISPLA' TO ENABLE IT
TIMER4,	ISZ TIMBIG	/HAVE WE GONE THROUGH A SECOND YET?
	JMP TIMOUT	/NO
	TAD TICSEC	/REFRESH SECOND TIMER
	DCA TIMBIG
	TAD TIMEMJ
	DCA TIMET1
	TAD TIMTB1	/START OF CLKTBL
	DCA TIMET2
TIMER1,	DATFLD
	TAD I TIMET2
	SNA CLA		/IS THIS TIMER RUNNING?
	JMP TIMER2	/NO
	ISZ I TIMET2	/YES - DECREMENT IT
	JMP TIMER2
	TAD TIMEJM	/IT RAN OUT - SET TIMER FLAG
	TAD TIMET1
	JMS I GETTBA	/GET PTR TO STATUS 1
	 JOBSTS+1
	TAD TEMP0
	SNA CLA		/DOES THE JOB STILL EXIST?
	REBOOT		/NO - 'CLKTBL' ENTRY NOT CLEARED, SO ERROR *****
	TAD I TEMP0	/YES, SET JSTIME IN STR1
	RAL
	STL RAR
	DCA I TEMP0
TIMER2,	ISZ TIMET2
	ISZ TIMET1
	JMP TIMER1
	ISZ UPTIM1	/INDEX LOW ORDER UPTIME
	SKP
	ISZ UPTIM2	/INDEX HI ORDER UPTIME
	NOP

	IFZERO CPU-2 <
	JMS I TIMKFX	/FIX ROUTINE FOR KL8E BUG
	>
	IFZERO D689-4 <
	JMP TIMPAT	/CHECK FOR PHONE SERVICE REQUIREMENT
	>
TIMOUT,	CIF CDF		/BACK TO FIELD 0
	JMP I TIMER0	/RETURN

TIMBIG,	-TICSPS		/ACTIVE COUNTER
TICSEC,	-TICSPS		/STARTING VALUE OF TIMEBIG
TIMEMJ,	-JOBMAX
TIMEJM,	JOBMAX+1
TIMET1=	TEMP1
TIMET2,	0
TIMTB1,	CLKTBL+1
	IFZERO CPU-2 <
TIMKFX,	FXPT08
	>
/ROUTINE TO DUMP VALUE OF ONE CORE CELL INTO MQ 
/RUNS AT EACH SYSTEM TICK
/TO USE, SET THE DESIRED CORE ADDRESS IN THE SWITCH REGISTER
/TO SELECT FIELDS, CLEAR TO SR TO 0, AND SET THE DESIRED
/FIELD IN THE LOW ORDER BITS OF THE SR.

/THIS MEANS THAT YOU CANNOT ADDRESS LOCATIONS 0,1,2,OR 3
/BY THE SR.  WHEN DOING A FIELD SELECT, LOCATION 1
/OF THE SELECTED FIELD IS AUTOMATICALLY CHOSEN

/IF THIS ROUTINE IS RUNNING, THE EAE IS NOT MUCH USE
/TO USER PROGRAMS.  SORRY ABOUT THAT.

DISPLA,	LAS		/GET ADDRESS FROM SR
	AND C7774	/TRYING A FIELD SELECT?
	SNA
	JMP DISPL1	/YES, GO CHANGE THE FIELD
	LAS		/NO; WHAT WAS THAT ADDRESS AGAIN
	DCA TEMP0
DISFLD,	CDF		/ASSUME FIELD 0 TO START
	TAD I TEMP0	/PICK UP CONTENTS OF SPECIFIED ADDRESS
	MQL		/DUMP IT IN THE MQ
	JMP TIMER4	/BACK TO MORE IMPORTANT THINGS

DISPL1,	LAS		/WHAT WAS THAT FIELD AGAIN?
	CLL RAL
	RTL
	TAD DISCDF	/BUILD FIELD SELECT
	DCA DISFLD
	IAC		/LOOK AT LOCATION 1 OF CHOSEN FIELD
	JMP DISFLD-1	/NOW GO LOOK

C7774,	7774
	
DISCDF,	CDF
DFCNT,	0

	*UPEEK1

/UPEEK1,
	STA		/ROUTINE TO ALLOW USER TO INSPECT MONITOR
	TAD I L2SAP	/GET USER AC FROM FIELD 0
	DCA IX2		/POINTS TO WORD BEFORE USER'S FOUR WORD BLOCK
	TAD I UDFP	/GET USER FIELD SELECT
	DCA UDF1+1	/AND SET IT UP HERE
	JMS UDF1	/USER FIELD SELECT
	TAD I IX2	/PICK UP MONITOR FIELD
	AND K0070	/DON'T LET HIM SCREW US
	TAD DISCDF	/DATA FIELD SELECT
	DCA UPEMF	/MONITOR FIELD SELECT
	STA
	TAD I IX2	/MONITOR CORE ADDRESS-1
	DCA IX0
	STA
	TAD I IX2	/USER AREA CORE ADDRESS
	DCA IX1		/-1
	TAD I IX2	/-#WORDS TO TRANSFER
	DCA IX2

UPEMF,	0		/SELECT MONITOR FIELD
	TAD I IX0	/PICK UP WORD
	JMS UDF1	/SELECT USER FIELD
	DCA I IX1	/PASS IT ON TO USER
	ISZ IX2		/DONE?
	JMP .-5
	CIF CDF		/YES
	DCA I L2SAP	/CLEAR USER AC
	JMP I .+1
	UUOEX1

	*DFINT1

	IFZERO D689-4	<
/DFINT1,
	SRF		/RINGING?
	SKP
	JMP DFRING	/YES
	SCF		/CHANGED CARRIER?
	JMP CONT		/KEEP GOING IN THE INTERRUPT CHAIN
	CLA CLL		/YES, CLEAR FLAG AND COME BACK LATER
	CCF
	TAD K7774	/FOR SOME PRDEFINED INTERVAL
	DCA DFTIMER
	JMP DISMIS	/THAT'S ALL TO DO FOR NOW

DFCSET,	0
	TAD DFCLST
	DCA DFCLSI	/POINTER TO STATUS AT LAST INTERRUPT
	TAD DFCNOW
	DCA DFCNWI	/POINTER TO STATUS AT THIS INTERRUPT
	TAD K7774
	DCA DFCNTR	/COUNTER FOR COMPARISONS
	CTG		/CLEAR GROUP COUNTER
	JMP I DFCSET

DFRING,	CLA CLL
	DFCRF		/CLEAR RING FLAG
	CTG		/CLEAR THE GROUP COUNTER
	TAD K7774
	DCA DFCNT	/COUNTER FOR GROUP SEARCH
DFRNG1,	RRS		/READ RING STATUS
	SZA
	JMP DFRNG2	/ACKNOWLEDGE RING(S)
DFRNG3,	ITG		/INCREMENT THE GROUP COUNTER
	ISZ DFCNT	/LOOKED AT ALL LINES?
	JMP DFRNG1	/NO, KEEP LOOKING
	JMP DISMIS	/YES, RETURN

DFRNG2,	STR		/SET TERMINAL READY
	CLA
	JMP DFRNG3	/LOOK AT REST OF LINES
	>
	IFNZRO D689-4 <
	IFZERO TC01-1 <
	IFZERO TD8E <
	IFNZRO CPU-3 <
///	TSS/8 CRASH-DUMP BOOTSTRAP LOADER
/IT SAVES THE FIRST 1000 WORDS OF TS8II IN THE
/DISC COPY OF TS8II, STARTING AT DISC LOCATION
/47000; IT THEN READS THE MAIN PART OF THE CRASH-
/DUMP PROGRAM FROM DISC LOCATION 46000 (IN TS8II)
/INTO CORE, STARTING AT LOCATION 0.
/
CBOOT,	CLA CLL
	IOF		/JUST TO BE SURE
	CDF		/FOR DISC CTRL
	TAD CRFLD

	IFZERO RF08 <
	DIML		/SET THE CORE FIELD
	CLA CLL IAC RTL
	DXAL		/DISC EXT = 4
	>
	IFZERO RF08-40 <
	DEAL		/SET THE TRACK & THE FIELD
	CLA
	>
	TAD CR6605
	JMS CRDISC	/SAVE PART OF TS8II
	TAD CR6603	/ (LINK=1 HERE)
	JMS CRDISC	/GET REST OF CRASHDUMP
	CIF+10		/GET TO TS8II FIELD
	JMP I .+1	/ & START THE DUMP
	CDUMP
/
/SUBROUTINE TO DO THE DISC I/O
CRDISC,	0
	DCA CRIOT	/SET THE IOT
	CLA CMA
	DCA I CR7751	/SET ADDR-1
	TAD CR7000
	DCA I CR7750	/SET -(WORD-COUNT)
	CML IAC RTR	/AC=7000 OR 6000,
	CML IAC RAR	/ DEPENDING ON LINK
CRIOT,	HLT		/ (ACTUAL IOT)

	IFZERO RF08 <
	DFSC DFSE	/NOW WAIT FOR A SIGN
	>
	IFZERO RF08-40 <
	DFSC		/WAIT FOR ANY DF32 INTERRUPTS
	>
	JMP .-1
	DFSE		/ANY ERRORS?

	IFZERO RF08-40 <
	SKP		/ (SENSE OF DF32 CHECK IS REVERSED)
	>
	JMP I CRDISC	/NO - RETURN
	TAD CRIOT	/YES - RESET THE LINK
	RTR		/ (FUDGE)
	JMP CRDISC+2	/ & TRY IT AGAIN
/
	IFZERO RF08 <
CRFLD,	10	/FIELD OF TS8II
	>
	IFZERO RF08-40 <
CRFLD,	410	/TRACK & RESIDENT FIELD OF TS8II
	>
CR6603,	6603
CR6605,	6605
CR7000,	7000
CR7750,	7750
CR7751,	7751
	>>>>
	IFZERO D689-4	<
	*UPEEK1+77
DFCARR,	JMS DFCSET	/INITIALIZE STATUS
DFCAR1,	RCS		/READ CARRIER STATUS
	DCA I DFCNWI	/PLACE ON TABLE
	ISZ DFCNWI
	ITG		/INCREMENT THE GROUP COUNTER
	ISZ DFCNTR	/READ ALL FOUR GROUPS?
	JMP DFCAR1	/NO, READ NEXT
	JMS I DFCSTI
	TAD DFL2ST
	DCA DFL2SI
DFCAR2,	TAD I DFCNWI
	CMA
	AND I DFCLSI
	SZA		/ANY LINES CLEARED?
	JMP DFCAR3	/YES,ACKNOWLEDGE
DFCAR5,	TAD I DFCLSI
	CMA
	AND I DFCNWI
	SZA
	JMS DFCAR6
	ISZ DFCLSI
	ISZ DFCNWI
	ISZ DFL2SI
	ITG		/INCREMENT THE GROUP COUNTER
	ISZ DFCNTR	/ALL LINES CHECKED?
	JMP DFCAR2	/NO
	JMS I DFCSTI
DFCAR4,	TAD I DFCNWI	/TRANSFER THIS STATUS TABLE TO LAST
	DCA I DFCLSI
	ISZ DFCNWI
	ISZ DFCLSI
	ISZ DFCNTR
	JMP DFCAR4
	JMP DFL200

DFCAR3,	CTR		/CLEAR TERMINAL READY
	JMS DFCAR6
	JMP DFCAR5	/LOOK AT OTHER GROUPS

DFCSTI,	DFCSET

DFTMP,	0

DFCAR6,	0
	DCA DFTMP	/BIT TO SET
	TAD DFTMP
	CMA
	AND I DFL2SI
	TAD DFTMP
	DCA I DFL2SI
	JMP I DFCAR6
DFL200,	TAD DFL2ST	/INITIALIZE PSEUDO GROUP CTR
	DCA DFL2SG

DFL22,	TAD K7770		/EIGHT PHONES
	DCA TEMP0
	IAC
	DCA TEMP1		/SELECT EACH LINE I GROUP

DFL21,	TAD I DFL2SG
	SNA
	JMP DFL23
	SPA
	JMP DFL24
	AND TEMP1
	SZA CLA
	JMP DFL25

DFL26,	TAD TEMP1
	CLL RAL
	DCA TEMP1
	ISZ TEMP0
	JMP DFL21
DFL23,	DCA I DFL2SG
	ISZ DFL2SG
	JMP DFL22

DFL24,	CLA
	JMP I DFLXT	/ALL DONE

DFL25,	TAD DFL2SG
	TAD DFL2C
	DCA TEMP2
	TAD I TEMP2
	TAD TEMP0
	TAD  K0010
	DCA TEMP2
	CDF		/SET UP SOURCE FOR GETDDB
	TAD TEMP2
	DCA I DFSORC
	DATFLD
	TAD TEMP2
	TAD TEMP2
	TAD DFVTBA
	DCA TEMP3
	TAD I TEMP3
	SZA CLA
	JMP .+5		/YES
	TAD TEMP3
	CIF
	JMS I DFGDDB
	JMP DFL26
	TAD TEMP2
	CIF
	JMS I DFUMES
	MES1
	JMP DFL26

DFL2SG,	0
DFL2C,	DFL2DL-DFL2S0
DFVTBA=DEVTBA
DFL2SI,	0
DFL2ST,	DFL2S0
K7770,	7770
DFSORC,	SOURCE
DFUMES,	UMES
DFLXT,	TIMOUT
MES1,	202
	"S
	";
	"K
	215
	0

	>
	IFZERO CPU-3	<
	*PDPEXT		/ENTRY POINT FOR THE EXTENDED IOT'S
	0
	JMP DISDCI	/GO PROCESS THE INSTRUCTION NOW.

	*PDPIDE		/IDLE PROCESSOR NOW.

	0
	JMP I	.+1		/GO TO THE IDLE PROCESSOR.
	PDPWAT


DISDCI,	TAD	DISBAS		/ADD IN THE TABLE POINTER NOW.
	DCA	DISTMP		/SAVE AWAY NOW.
	TAD I	DISTMP		/NOW GET WHERE TO GO
	DCA	DISTMP		/AND PLACE AWAY FOR THE JUMP TO USE.
	JMP I	DISTMP		/GO THERE NOW.

DISBAS,	.+1
	DISNOT			/IOT NOT YET THERE
	DISNOT
	DISNOT
	DISNOT
	DISREL			/A RELAY OPERATION
	DISSAM			/SAMPLE IOT
	DISPNT			/POINT DISPLAY IOT
	DISCHR			/CHARACTER DISPLAY IOT

DSCY,	0			/THE Y POSITION FOR ALL DISPLAYS
DDSCX,	DSCX

DISTMP,	0


DISEXT,	ISZ	PDPEXT		/GOOD IOT IS NOW DONE. EXIT
DISNOT,	CDF CIF 0		/SET UP FOR LOWER CORE RETURN NOW.
	JMP I	PDPEXT		/GO BACK DOWN THERE NOW.

DISPNT,	CDF	0		/POINT DISPLAY. SET TO PICK UP AC.
	TAD I	L2SAP		/WE'VE GOT THE AC NOW.
	DCA	DISAC		/SAVE AWAY FOR A SECOND.
	TAD I	UDFP		/GET THE USERS DATA FIELD
	DCA	UDF1+1		/SAVE AWAY IN THE LITTLE SUBROUTINE NOW
	JMS	DISIAC		/GET THE NUMBER OF POINTS TO DO NOW.
	AND	DS1777		/MAKE BETWEEN 1 AND 1024
	CIA
	SNA			/IS IT NON-ZERO???
	JMP	DISEXT		/IT ISN'T. WE'RE DONE. RETURN TO HIM NOW.
	DCA	DISCNT		/SAVE AWAY IN THE COUNT REGISTER NOW.

DCLP2,	JMS	DISIAC		/GET THE USERS X POINT NOW
	DCA I	DDSCX		/SAVE AWAY RIGHT NOW
	JMS	DISIAC		/GET THE USERS Y POINT NOW.
	IOF			/TURN OFF INTERUPTS SO WE DON'T BOMB
	6141			/GET OVER INTO LINC MODE RIGHT NOW.
	-PDPBAS+1777&6000+140+DSCX		/DO A DIS X
	2			/GET BACK INTO THE SUPER MODE
	ION			/TURN BACK ON INTERUPTS.
	CLA			/GET RID OF THE RANDOM Y NOW.
	ISZ	DISCNT		/BOP UP THE COUND NOW
	JMP	DCLP2		/NOT YET DONE. LOOP AGAIN
	JMP	DISEXT		/ALL DONE. RETURN TO THE USER NOW.


DISIAC,	0			/ROUTINE TO GET WHAT THE USERS AC POINTS TO
	JMS	UDF1		/SET TO THE USERS DATA FIELD
	TAD I	DISAC		/GET IT NOW
	DATFLD			/RESET TO THIS FIELD
	ISZ	DISAC		/BOP HIS AC NOW
	JMP I	DISIAC		/RETURN
	JMP I	DISIAC		/RETURN EVEN IF ERROR



DS1777,	1777
DISAC,	0
DISCNT,	0
DISCHR,	CDF	0		/ROUTINE TO DISPLAY CHARACTERS FOR THE USER
	TAD I	L2SAP		/GET HIS AC NOW.
	DCA	DISAC		/SAVE AWAY FOR HIM
	TAD I	UDFP		/GET HIS DATA FIELD TOO
	DCA	UDF1+1		/STASH AWAY SO WE CAN RETRIEVE FOR HIM
	JMS	DISIAC		/GET THE NUMBER OF CHARACTERS TO DISPLAY
	AND	DIS77		/MAKE BETWEEN 0 AND 63
	CIA
	SNA			/IS IT ZERO?
	JMP	DISEXT		/RETURN IF ZERO
	DCA	DISCNT		/SAVE THE COUNT FOR NOW
	JMS	DISIAC		/GET THE NEXT WORD(CHARACTER SIZE)
	AND	DIS200		/JUST USE THE CHARACTER SIZE BIT
	DCA	DISSFR		/SAVE AWAY FOR NOW.
	JMS	DISIAC		/GET THE X VALUE NOW
	DCA I	DDSCX		/STASH AWAY
	JMS	DISIAC		/GETTHE Y VALUE NOW.
	DCA	DSCY		/AND SAVE IT AWAY ALSO.
	JMS	DISIAC		/GET THE STRING POINTER
	DCA	DISAC		/AND SAVE IT AWAY TOO
DCLOOP,	JMS	UDF1		/SET TO THE USERS DATA FIELD
	TAD I	DISAC		/PICK UP THE CHARACTER WITH NO BOP
	DATFLD			/RESET THE DATA FIELD TO HERE
	RTR			/NOW ROTATE THE CHARACTER TO BITS 6-11
	RTR
	RTR
	IOF			/TURN OFF THE INTERUPTS SO NO LINC MODE BOMB
	JMS	DSCHAR		/DISPLAY THE CHARACTER NOW
	ION
	JMS	DISIAC		/GET THE RIGHT HALF AND BOP
	IOF
	JMS	DSCHAR
	ION			/WE'RE BACK AGAIN
	JMP	DCLOOP		/AND GO UP TO GET THE NEXT WORD

DIS200,	200
DISSFR,	0

DSCHAR,	0			/ROUTINE TO DISPLAY A CHAR IN THE AC.
	AND	DIS77		/CHOP OFF BAD CRAP
	CLL RAL			/MULTIPLY BY 2
	TAD	DISTAB		/ADD IN THE BASE TABLE ADDRESS
	DCA	IX1		/SAVE IN AN AUTO INDEX
	JMS	DSC2		/DISPLAY HALF
	TAD I	.		/DELAY A LITTLE TO AVOID DATA BREAK
	TAD I	.		/PROBLEMS BECAUSE OF DSC HANGING UP
	TAD I	.		/THE CPU IF WE EXECUTE ANOTHER
	TAD I	.		/ONE AND IT'S NOT FINISHED THE FIRST HALF YET.
	CLA			/THEN CLEAR THE AC. 4 TAD'S SHOULD BE ENOUGH.
	JMS	DSC2		/DISPLAY THE OTHER HALF
	ISZ I	DDSCX		/ADD TWO TO THE X POSITION
	ISZ I	DDSCX
DIS77,	77			/A GOOD PLACE FOR A NOP
	ISZ	DISCNT		/TEST THE COUNT NOW
	JMP I	DSCHAR		/RETURN NOW
	ION			/TURN THEM ON
	JMP	DISEXT		/AND GO BACK, BECASUE WE'RE DONE NOW.

DISTAB,	DSCTAB-1		/CHARACTER TABLE-1

DSC2,	0			/HALF CHARACTER ROUTINE
	TAD I	IX1		/GET A HALF
	DCA	DSCOUT		/SAVE FOR A SECOND
	TAD	DISSFR		/GET THE SPECIAL FUNCTION REGISTER
	6141
	4			/SEND IT OUT. IOF IS ON HERE.
	1000			/NOW GET THE Y INTO THE AC.
	-PDPBAS+1777&6000+DSCY			/Y SHOULD BE HOT NOW
	1760			/DSC I
DSCOUT,	0			/THE CHARACTER IN THE AC.
	2			/GET OVER IN TO THE GOOD MODE
	CLA			/CLEAR OUT THE Y VALUE NOW
	JMP I	DSC2		/AND RETURN TO THE CALLER
	PAGE

DISREL,	CDF	0		/SET TO LOWER CORE TO PICK UP HIS AC.
	TAD I	L2SAP		/GET HIS AC.
	IOF			/TURN OFF INTERUPTS NOW.
	6141			/GET OVER INTO THE GOOD MODE
	471			/SKIP IF THE AC IS MINUS
	14			/SEND OUT DATA TO THE RELAYS.
	451			/IF THE AC IS POSITIVE SKIP NOW.
	15			/READ IN THE RELAYS.
	2			/GET INTO 8 MODE
	ION			/TURN ON THE INTERUPTS NOW.
	DCA I	L2SAP		/STORE BACK INTO THE AC NOW.
	JMP I	DRELX		/RETURN NOW

DISSAM,	CDF	0		/SET TO LOWER CORE
	TAD I	L2SAP		/GET THE USERS AC
	AND	DSC37		/JUST GET THE LOW ORDER CHANNEL BITS
	TAD	DSC100		/MAKE INTO A SAM INSTRUCTION
	DCA	DSAM1		/AND SAVE AWAY FOR A SECOND
	TAD	DSC100		/PREPARE TO TURN ON FAST SAMPLE MODE
	IOF			/TURN OFF THE INTERUPTS NOW
	6141			/GET OVER INTO THE GOOD MODE
	4			/ESF
DSAM1,	0			/SAMPLE THE CHANNEL
	1000			/GET THE SAM INSTRUCTION INTO THE AC
	-PDPBAS+1777&6000+DSAM1
	-PDPBAS+1777&6000+4000+.+1		/STC .+1 [OR DCA .+1 FOR YOU 8'ERS]
	0			/DO THE SAM AGAIN TO READ IN THE VALUE NOW
	2			/GET OVER INTO GODS MODE
	ION			/TURN BACK ON INTERUPTS
	DCA I	L2SAP		/DCA BACK INTO THE USERS AC.
	JMP I	.+1		/NOW CLEAN UP AND RETURN
DRELX,	DISEXT

DSC37,	37
DSC100,	100

PDPWAT,	SZA CLA			/IS IT FIRST TIME THROUGH?
	JMP	PDPLOP		/NOPE. CONTINUE.
	TAD	PPIDLE		/RESET THE MESSAGE POINTER NOW.
	DCA	PPMP		/SAVE AWAY
	DCA I	PDPCNT		/CLEAR THE COUNT NOW
	TAD	PDP200		/SET FOR LARGE LETTERS
	DCA I	PDPSFR		/AND SAVE AWAY.
	DCA I	PDPY		/SET UP THE Y
	TAD	PDPLFT		/SET UP THE X
	DCA I	CDSCX		/THE X LOC
	ISZ	IDLMVC		/TIME TO MOVE THE X?
	JMP	PDPLOP		/NOPE. DON'T MOVE IT NOW.
	CLA CMA			/YEP. MOVE IT IN FROM THE LEFT
	TAD	PDPLFT		/THE GOOD X
	DCA	PDPLFT		/THE NEWER X.
	TAD	PDPMVS		/AND RESET THE COUNTER NOW.
	DCA	IDLMVC		/AND STASH BACK.
PDPLOP,	TAD I	PPMP		/GET THE NEXT CHARACTER?
	SNA			/ZERO?
	JMP	PDPOVR		/YES. SET TO RESTART SOON.
	JMS I	PDPDSC		/DISPLAY IT NOW
	ISZ	PPMP		/BOP THE POINTER.
	TAD I	PDPRET		/GET THE RETURN ADDRESS
	DCA	PDPTMP		/SAVE FOR SECOND
	CLA CMA			/MAKE SURE WE CONTINUE NOW.
	CDF CIF	0		/SET UP FIELDS NOW
	JMP I	PDPTMP		/RETURN NOW.

PPIDLE,	IDLEMS
PPMP,	0
PDP200,	200
PDPCNT,	DISCNT
PDPSFR,	DISSFR
PDPDSC,	DSCHAR
PDPTMP,	0
CDSCX,	DSCX
PDPY,	DSCY
PDPLFT,	300			/INITAL X POSITION
IDLMVC,	0			/INITALLY ZERO. WILL BE RESET SHORTLY.
PDPMVS,	-10			/BASIC MOVING CONSTANT ONCE FIRST ONE OVERFLOWS.
PDPRET,	PDPIDE

PDPOVR,	TAD I	PDPRET
	DCA	PDPTMP
	CDF CIF	0		
	JMP I	PDPTMP

IDLEMS,	"C;"P;"U;" ;"I;"S;" ;"I;"D;"L;"E;0
	PAGE
/
DSCTAB,	5136		/00=AT SIGN
	3565
	4477		/01=A
	7744
	5177		/02=B
	2651
	4136		/03=C
	2241
	4177		/04=D
	3641
	4577		/05=E
	4145
	4477		/06=F
	4044
	4136		/07=G
	2645
	1077		/10=H
	7710
	7741		/11=I
	0041
	4142		/12=J
	4076
	1077		/13=K
	4324
	0177		/14=L
	0301
	3077		/15=M
	7730
	3077		/16=N
	7706
	4177		/17=O
	7741
	4477		/20=P
	3044
	4276		/21=Q
	0376
	4477		/22=R
	3146
	5121		/23=S
	4651
	4040		/24=T
	4077
	0177		/25=U
	7701
	0176		/26=V
	7402
	0677		/27=W
	7701
	1463		/30=X
	6314
	0770		/31=Y
	7007
	4543		/32=Z
	6151
	4177		/33=[
	0000
	3040		/34=\
	0106
	0000		/35=]
	7741
	2000		/36=^
	2076
	2516		/37=BACK-ARROW
	0404
	0000		/40=SPACE
	0000
	7500		/41=!
	0000
	7000		/42="
	0070
	7714		/43=NUMBER SIGN
	1477
	5721		/44=DOLLAR SIGN
	4671
	6661		/45=PERCENT SIGN
	4333
	5166		/46=&
	0526
	6400		/APOSTROPHE
	0070
	3600		/50=(
	0041
	4100		/51=)
	0036
	2050		/52=*
	0050
	0404		/53=+
	0437
	0500		/54=,
	0006
	0404		/55=-
	0404
	0001		/56=.
	0000
	0601		/57=/
	4030
	4536		/60=0
	3651
	2101		/61=1
	0177
	4523		/62=2
	2151
	4122		/63=3
	2651
	2414		/64=4
	0477
	5172		/65=5
	0651
	1506		/66=6
	4225
	4443		/67=7
	6050
	5126		/70=8
	2651
	5122		/71=9
	3651
	2200		/72=:
	0000
	4601		/73=;
	0000
	1000		/74=LEFT ANGLE-BRACKET
	4224
	1212		/75==
	1212
	2442		/76=RIGHT ANGLE-BRACKET
	0010
	4020		/77=?
	2055
		>
	IFNZRO DEVCHK-.&4000	<GLITCH>
	*DEVCHK
/CHECK DEVICE ASSIGNMENT AND ASSIGN IF AVAILABLE
/CALLING SEQUENCE
/	JMS DEVCHK
/	 DEVTBL ENTRY POINTER
/	ASSIGNED BUT NOT YET USED
/	PREVIOUSLY USED

DEVCHK,	0
	TAD I DEVCHK	/GET DEVTBL POINTER
	ISZ DEVCHK	/INDEX PAST PARAMETER
	DCA WS1		/DEVTBL ADDRESS
	RDF		/THE FIELD FROM WHERE WE CAME
	TAD K6203
	DCA DEVEXT
	DATFLD
	TAD I WS1	/DDB ADDRESS
	SNA		/IS IT ASSIGNED TO ANYONE?
	JMP DEVERR	/NO - THEN HE CAN'T BE USING IT
	DCA AXS1	/NOW POINTS TO WORD 0 OF DDB
	CDF
	TAD I JOB
	DATFLD
	AND K0037
	CIA
	TAD I AXS1	/DOES THIS JOB OWN DEVICE?
	SZA CLA
	JMP DEVERR	/NOT THE RIGHT OWNER
	TAD I WS1
	DCA WS1		/POINTS TO WORD 0 AGAIN
	TAD I WS1
	RTL		/SHIFT INITIALIZED BIT INTO LINK
	SZL		/HAS IT BEEN INITIALIZED?
	ISZ DEVCHK	/YES, INDEX RETURN
	STL RTR		/NO, BUT IT HAS BEEN NOW
	DCA I WS1
DEVEXT,	0
	JMP I DEVCHK	/RETURN

DEVERR,	CIF
	JMP I .+1
	UUOERR
WS1,	0
/
/CODE TO INITIATE THE AUTOMATIC RESTART PROCEDURE.
RBOOT,	0
	IFNZRO CPU-2	<CLA>
	IFZERO CPU-2	<CAF>
	TAD RBOOT
	CIF CDF
	JMP I .+1	/USE THE FIELD 0 BOOTSTRAP
	RELOAD

	IFZERO CPU-2 <
/
/ROUTINE TO FIX LOCK-OUT PROBLEM OF KL8E BOARDS.
/WE JUST RE-ENABLE THE INTERRUPT FOR EACH TERMINAL
/ONCE A SECOND.
FXPT08,	0
	TAD FXPTBL
	DCA AXS1	/SET THE INPUT DEVICE TABLE POINTER
	TAD FXPCNT
	DCA WS1		/AND THE KEYBOARD COUNTER (REAL KEYBOARDS ONLY)
	CDF
FXP1,	TAD I AXS1	/GET AN INPUT DEVICE SELECT
	TAD FX6005	/ AND MAKE A 'KIE' INSTRUCTION
	DCA .+2
	CLA IAC		/SET AC SO INTERRUPTS ARE ENABLED
	 HLT
	CLA CLL
	ISZ WS1
	JMP FXP1	/CONTINUE
	DATFLD		/ALL DONE - RESET DATA FIELD
	JMP I FXPT08	/ AND RETURN

FXPTBL,	TIDEV-1
FXPCNT,	-TRUKBD-1
FX6005,	6005
	>
	IFZERO D689-4 <
DFL2DL,	1; 11; 21; 31
	>
	*KSFPRA
/ROUTIN TO TAKE CARE OF KRB IOT
/CALLING SEQUENCE
/	JMS KSFBUG
/	RETURN WITH CHAR IN AC
/	NO CHAR, BUFFER EMPTY RETURN

KSFBUG,	0
	DCA BUG1	/STORE DDB ADDRESS
BUG7,	TAD BUG1	/CALL FETCH
	JMS I BUG2
M12,	 -12		/FIRST IN FIRST OUT
	JMP BLKRET	/END OF BLOCK
	JMP BACK	/BUFFER EMPTY
	DCA BUG3	/CHAR IN AC   SAVE IT
BUG6,	TAD BUG1
	JMS I BUG4	/TEST BUFFER
	JMP RETBL1	/END OF BLOCK
	JMP CLRFLG	/EMPTY
RET,	TAD BUG3	/NOT EMPTY
	SKP
BACK,	ISZ KSFBUG	/NO CHAR RETURN
	CIF CDF		/PREPARE TO RETURN TO FIELD 0
	JMP I KSFBUG		/RETURN

BUG5,	0

CLRFLG,	CLL CML RTL	/GET TWO IN AC
	TAD CJOBDA	/ADDRESS OF JOBSTATUS OF THIS JOB
	DCA BUG5	/POINTS TO STR1
	TAD I BUG5	/GET CONTENTS OF STR1
	AND K7677	/CLEAR DELIMITER FLAG
	DCA I BUG5	/STORE IT BACK
	JMP RET

RETURN,	0
	TAD BUG1	/ADDRESS OF DDB
	TAD K0006	/....+6
	DCA BUG5	/POINTS TO EMPTY POINTER
	TAD I BUG5	/RETURN EMPTY BLOCK
	CIF
	RETBLK
	DCA I BUG5	/AND SAVE POINTER TO NEXT BLOCK IN DDB
	TAD I BUG5	/IS THERE ANOTHER BLOCK?
	SNA CLA
	JMP .+5		/NO
	TAD M12		/YES RESET EMPTY COUNTER
	ISZ BUG5
	DCA I BUG5	/SAVE IT IN DDB
	JMP I RETURN	/AND RETURN
	TAD BUG1	/ADDRESS OF DDB
	TAD K0004	/....+4
	DCA BUG5	/POINTS TO FILL POINTER
	DCA I BUG5	/CLEAR FILL POINTE	
	ISZ RETURN	/EMPTY RETURN
	JMP I RETURN
RETBL1,	JMS RETURN
	JMP BUG6	/BUFFER NOT EMPTY
	JMP CLRFLG	/EMPTY BUFFER

BLKRET,	JMS RETURN
	JMP BUG7	/BUFFER NOT EMPTY
	JMP BACK	/BUFFER EMPTY

BUG1,	0
	IFNZRO D689-4 <
	IFZERO TC01-1 <
	IFZERO TD8E <
	IFNZRO CPU-3 <
///	TSS/8 DECTAPE CRASH-DUMP
/THIS IS LOADED FROM DISC BY THE CRASH-DUMP
/BOOTSTRAP LOADER. IT ASSUMES A FORMATTED
/DECTAPE IS MOUNTED ON UNIT 0. WHEN THE DUMP
/IS FINISHED, TSS/8 INIT IS LOADED & STARTED.
/
	*6000
	NOPUNCH
	*0
	ENPUNCH
/
QAX0=	10
QWS0=	20	/SCRATCH STORAGE
QWS1=	21
QWS2=	22
QWS3=	23
QWS4=	24
QWS5=	25
QWS6=	26
QWS7=	27
QWBLK=	30
QWFLD=	31
QRTRK=	32	/EXTENDED DISC ADDRESS
QRADR=	33	/DISC ADDRESS
/
	*6000+QRADR+1
	NOPUNCH
	*QRADR+1
	ENPUNCH
WTAPE=	JMS I .		/DECTAPE WRITE
	WTENT
RDISC=	JMS I .		/DISC READ
	RDENT
SPEAK=	JMS I .		/MESSAGE TYPING
	SPENT
/
	*6000+CBOOTA
	NOPUNCH
	*CBOOTA
	ENPUNCH
CBOOTA,	CDUMP	/TO OVERLAY IN CASE RESTARTED AT 'CRASH'
	*6200
	NOPUNCH
	*200
	ENPUNCH
///	BEGIN CRASH-DUMP
CDUMP,	CLA CLL
	IOF
	TAD QK600
	DTCA DTXA	/REWIND THE DECTAPE
	DCA QWBLK	/FIRST DT BLOCK IS ZERO
	CLA CMA
	DCA QWS2	/SET CORE-1
	TAD QK10	/SET MEMORY FIELD
	DCA QWFLD
	CLA CMA
	DCA QWS3	/SET -(# BLOCKS)
	WTAPE		/WRITE OUT BLOCK ZERO
	TAD QM40	
	DCA QWS3	/SET BLK COUNT FOR 1 FLD
	DCA QWFLD	/SET MEM FLD TO ZERO
	CLA CMA
	DCA QWS2	/ & CORE ADDR - 1
	WTAPE		/ AND WRITE OUT FIELD ZERO
	TAD QDADR
	DCA QRADR	/SET SAVED DATA ADDRESS
	TAD QDTRK
	DCA QRTRK
	RDISC		/GET THE SAVED TS8II PIECE
	TAD QF1
	DCA QWBLK	/SET TS8II BLOCK NUMBER
	TAD QM4
	DCA QWS3	/SET -(# BLOCKS TO WRITE)
	WTAPE		/WRITE OUT THE SAVED DATA
	TAD QK10
	DCA QWFLD	/SET MEMORY FIELD
	TAD QM34
	DCA QWS3	/# BLOCKS FOR REST OF TS8II
/
/NOW WRITE OUT EACH REMAINING MEMORY FIELD.
QMEMD,	WTAPE
	TAD QWFLD
	TAD QK10	/UPDATE THE FIELD
	DCA QWFLD	/ NUMBER
	TAD QM40
	DCA QWS3	/RESET BLOCK COUNT
	TAD QWFLD
	TAD QXFLD	/ARE WE PAST THE END
	SPA CLA		/ OF THE REQUIRED CORE?
	JMP QMEMD	/NO - CONTINUE
/
/NOW, USING FLD 2 FOR SCRATCH, READ A 4K BLOCK FROM
/DISC AND WRITE IT TO DECTAPE.
	TAD QK20
	DCA QWFLD	/SET THE FIELD
	TAD QM37
	TAD QWBLK	/SET QWS6 TO THE FIRST
	DCA QWS6	/ BLOCK OF THE LAST FLD
	DCA QRADR	/CLEAR DISC ADDRESS
	DCA QRTRK
	TAD QXTBK
	DCA QWS7	/SET 4K BLOCK-COUNTER
/
QDSCD,	JMS QADVB	/LEAVE ROOM BETWEEN BLOCKS
	RDISC		/GET A 4K BLOCK
	WTAPE		/ & WRITE IT OUT
	ISZ QRTRK	/INCRE. THE TRACK ADDR.
	ISZ QWS7	/ARE WE DONE?
	JMP QDSCD	/NO - CONTINUE
	DTCA DTXA	/STOP THE TAPE
	CLA CLL CML RTL
	DCA QRTRK	/SET FOR TRACK 2
	TAD QCORM
	DCA QWFLD	/ & PROPER FIELD
	RDISC		/THEN READ 'INIT'
	CIF CDF INFLD
	JMP I .+1	/ & START UP TSS/8
	AUTOST
/
/SUBROUTINE TO ADJUST THE BLOCK ADDRESS TO ALLOW
/ROOM FOR THE TAPE TO STOP & START.
QADVB,	0
	CLA
	TAD QWS6	/GET LAST STARTING BLOCK
	TAD QSKIP	/ ADD THE SKIP COUNT
	DCA QWBLK	/ & SAVE IT
	TAD QWBLK
	DCA QWS6
	TAD QM40	/ALSO, RESET THE BLOCK
	DCA QWS3	/ COUNT
	JMP I QADVB	/THEN RETURN
/
QCORM,	INFLD
QDADR,	7000	/DISC ADDR. OF TS8II PIECE
QDTRK,	4
QF1,	44	/BLOCK NUMBER FOR TS8II
QK10,	10
QK20,	20
QK600,	600
QM4,	-4
QM34,	-34
QM37,	-37
QM40,	-40
QSKIP,	50	/INTER-BLOCK GAP + BLOCK-SIZE
QXFLD,	-40	/DUMP FIELDS 0 - 3
QXTBK,	-SWDEX-JOBMAX	/ -(# OF DISC TRACKS TO DUMP)
	*6400
	NOPUNCH
	*400
	ENPUNCH
/
/DECTAPE WRITE SUBROUTINE - DUMPS ALL OR PART OF
/A MEMORY FIELD ONTO DECTAPE
WTENT,	0
	CDF		/FOR DT CTRL/WORDS
WTX1,	CLA CLL CMA RTL
	DCA QWS0	/SET -(ERROR LIMIT)
	CLA CLL CMA RTL
	DCA WX		/SET -(MAX REVERSALS)
	DTRA
	AND QK7174
	DTXA		/CLEAR STATUS REG 'A'
	DTLB		/ & CLEAR FIELD BITS
	TAD WTWC
	DCA I WTCA
	DTRA
	TAD QK210	/ESTABLISH SEARCH GO MODE
	AND QK210
	JMP WTX4
WTX3,	SNL		/CHANGE DIRECTION?
	JMP WTX5	/YES
WTX4,	JMS WTOPR
	DTRA
	RTL
	RTL
	SZL CLA		/GOING FORWARD?
	TAD QK2		/NO - ALLOW FOR SLIP
	TAD I WTWC	/GET THE LAST BLOCK SEEN
	CMA
	TAD QWBLK	/ & COMPARE TO THE BLK WE WANT
	CMA
	SZA CLA		/ARE WE THERE?
	JMP WTX3	/NO - CONTINUE SEARCH
	SZL		/GOING FORWARD?
	JMP WTX5	/NO - CHANGE TO FORWARD
	TAD QWFLD	/SET THE FIELD BITS
	DTLB
	TAD QM200
	DCA I WTWC	/ & SET FOR 200 WORDS
	TAD QWS2
	DCA I WTCA	/ & SET CORE ADDR - 1
	TAD QK50
	JMS WTOPR	/THEN DO THE TRANSFER
	TAD QK40
	DTXA
	TAD I WTCA	/GET THE UPDATED CORE ADDR.
	DCA QWS2
	ISZ QWBLK	/UPDATE THE BLOCK-COUNT
	ISZ QWS3	/ARE WE DONE?
	JMP WTX1	/NO - DO ANOTHER BLOCK
	JMP I WTENT	/YES - RETURN
/
/HERE WE REVERSE THE TAPE DIRECTION AND CHECK TO
/SEE IF WE HAVE DONE MORE THAN A REASONABLE NUMBER
/OF REVERSES.
WTX5,	TAD QK400
	ISZ WX		/INCRE. THE COUNT
	JMP WTX4	/OK - CONTINUE
	JMP WT01	/BAD - PRINT ERROR
/
/SUBROUTINE TO PERFORM A 'DTXA' AND WAIT FOR
/COMPLETION OF THE OPERATION.
WTOPR,	0
	DTXA
	DTSF DTRB
	JMP .-1
	SMA CLA		/ANY ERRORS?
	JMP I WTOPR	/NO - RETURN
	DTRB		/GET THE STATUS AGAIN
	RTL
	RAL
	SPA CLA		/SELECT ERROR?
	JMP WTSELC	/YES
	SZL		/END-ZONE ERROR?
	TAD QK400	/YES - CHANGE TAPE DIRECTION
	DTXA
	ISZ QWS0	/INCRE. ERROR LIMIT
	JMP WTX1+2	/ & TRY IT AGAIN
WT01,	SPEAK; WTHELP	/PUSH THE PANIC BUTTON
	JMP I QK200	/RESTART (MAYBE EVEN SUCCEED)
WTSELC,	SPEAK; WTSMS	/SELECT ERROR
	JMP WTX1	/TRY AGAIN
/
WTWC,	7754	/DT WORD COUNT
WTCA,	7755	/DT BUFFER ADDRESS
WX,	-1	/REVERSAL COUNTER
/
/SUBROUTINE TO READ ALL OR PART OF A 4K DISC TRACK.
RDENT,	0
	CLA CLL CMA RTL
	DCA QWS0	/SET -(ERROR LIMIT)
	CDF
RDX1,	CLA CMA
	DCA I RDCA	/SET CORE ADDR - 1
	TAD QRADR
	DCA I RDWC	/USE DISC ADDR. AS COUNT

	IFZERO RF08 <
	TAD QRTRK
	DXAL		/SET DISC EXTENSION
	TAD QWFLD
	DIML		/SET MEMORY FIELD
	>
	IFZERO RF08-40 <
	TAD QRTRK	/GET THE DISC EXTENSION
	CLL RTL; RTL; RTL
	TAD QWFLD	/ & ADD IN THE FIELD SELECT
	DEAL
	CLA
	>
	TAD QRADR
	DMAR		/SET THE ADDR. & READ
	DFSC DFSE	/ & WAIT FOR A FLAG
	JMP .-1
	DFSE		/ANY ERRORS?
	JMP I RDENT	/NOPE - RETURN
	ISZ QWS0	/TOO MANY ERRORS?
	JMP RDX1	/NOPE - TRY AGAIN
	SPEAK; RDHELP	/YES - PRINT A MSG
	JMP I QK200	/THEN TRY A RESTART
/
RDWC,	7750	/DISC WORD COUNT
RDCA,	7751	/DISC BUFFER ADDRESS
/
QK2,	2
QK40,	40
QK50,	50
QK200,	200
QK210,	210
QK400,	400
QK7174,	7174
QM200,	-200
	*6600
	NOPUNCH
	*600
	ENPUNCH
/
/SUBROUTINE TO PRINT A MESSAGE AND WAIT FOR A RESPONSE.
SPENT,	0
	CLA CLL
	DATFLD		/GET TO OUR DATA FIELD
	TAD QK215
	JMS QTOUT	/TYPE <CR>
	TAD QK212
	JMS QTOUT	/ & <LF>
	CLA CMA
	TAD I SPENT	/GET THE MESSAGE ADDR.
	ISZ SPENT
	DCA QAX0
SPRNT,	TAD I QAX0	/GET A CHARACTER
	SNA		/DONE?
	JMP QTX		/YES
	JMS QTOUT	/NO - TYPE THE CHARACTER
	JMP SPRNT	/ & DO IT AGAIN
QTX,	KCC		/CLEAR THE KEYBOARD
	KSF
	JMP .-1
	KRB
	DCA QWS1	/SAVE THE CHAR
	TAD QWS1
	JMS QTOUT	/ & ECHO IT
	TAD QWS1
	TAD QM215
	SZA CLA		/CARRIAGE RETURN?
	JMP QTX		/NO - TRY AGAIN
	TAD QK212
	JMS QTOUT	/YES - TYPE <LF>
	CDF
	JMP I SPENT	/THEN RETURN
/
/SUBROUTINE TO TYPE ONE CHARACTER.
QTOUT,	0
	TLS		/TYPE THE CHAR
	CLA		/ & CLEAR THE AC
	TSF
	JMP .-1
	JMP I QTOUT	/RETURN
/
QK212,	212
QK215,	215
QM215,	-215
/
/CRASH-DUMP ERROR MESSAGES.
RDHELP,	"D;"I;"S;"C;" ;"F;"A;"I;"L;"U;"R;"E;0
WTHELP,	"B;"A;"D;" ;"D;"E;"C;"T;"A;"P;"E;"?;0
WTSMS,	"D;"E;"C;"T;"A;"P;"E;" ;"S;"E;"L;"E;"C;"T;" ;"E;"R;"R;"O;"R;0
	>>>>
	*FIPBLK
FIPBLK,	ZBLOCK 10	/FIP I/O PARAMETER BLOCK
WINBAS,	ZBLOCK -.	/SPECIAL BASIC WINDOW (TO END OF FIELD)
/////	$$$$$
	$$$$$
