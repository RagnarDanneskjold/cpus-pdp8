<?xml version="1.0" encoding="UTF-8"?>
<!-- IMPORTANT: This is an internal file that has been generated
     by the Xilinx ISE software.  Any direct editing or
     changes made to this file may result in unpredictable
     behavior or data corruption.  It is strongly advised that
     users do not edit the contents of this file. -->
<messages>
<msg type="info" file="Xst" num="1304" delta="unknown" >Contents of register &lt;<arg fmt="%s" index="1">is_write</arg>&gt; in unit &lt;<arg fmt="%s" index="2">pdp8_rf</arg>&gt; never changes during circuit operation. The register is replaced by logic.
</msg>

<msg type="info" file="Xst" num="1304" delta="unknown" >Contents of register &lt;<arg fmt="%s" index="1">PEF</arg>&gt; in unit &lt;<arg fmt="%s" index="2">pdp8_rf</arg>&gt; never changes during circuit operation. The register is replaced by logic.
</msg>

<msg type="info" file="Xst" num="1304" delta="unknown" >Contents of register &lt;<arg fmt="%s" index="1">NXD</arg>&gt; in unit &lt;<arg fmt="%s" index="2">pdp8_rf</arg>&gt; never changes during circuit operation. The register is replaced by logic.
</msg>

<msg type="info" file="Xst" num="1304" delta="unknown" >Contents of register &lt;<arg fmt="%s" index="1">WLS</arg>&gt; in unit &lt;<arg fmt="%s" index="2">pdp8_rf</arg>&gt; never changes during circuit operation. The register is replaced by logic.
</msg>

<msg type="warning" file="Xst" num="646" delta="unknown" >Signal &lt;<arg fmt="%s" index="1">fetch</arg>&gt; is assigned but never used.
</msg>

<msg type="warning" file="Xst" num="646" delta="unknown" >Signal &lt;<arg fmt="%s" index="1">execute</arg>&gt; is assigned but never used.
</msg>

<msg type="warning" file="Xst" num="646" delta="unknown" >Signal &lt;<arg fmt="%s" index="1">deferred</arg>&gt; is assigned but never used.
</msg>

<msg type="warning" file="Xst" num="647" delta="unknown" >Input &lt;<arg fmt="%s" index="1">clk</arg>&gt; is never used.
</msg>

<msg type="warning" file="Xst" num="647" delta="unknown" >Input &lt;<arg fmt="%s" index="1">reset</arg>&gt; is never used.
</msg>

<msg type="warning" file="Xst" num="647" delta="unknown" >Input &lt;<arg fmt="%s" index="1">mb&lt;11:3&gt;</arg>&gt; is never used.
</msg>

<msg type="warning" file="Xst" num="647" delta="unknown" >Input &lt;<arg fmt="%s" index="1">clk</arg>&gt; is never used.
</msg>

<msg type="warning" file="Xst" num="646" delta="unknown" >Signal &lt;<arg fmt="%s" index="1">tx_over_run</arg>&gt; is assigned but never used.
</msg>

<msg type="warning" file="Xst" num="646" delta="unknown" >Signal &lt;<arg fmt="%s" index="1">rx_frame_err</arg>&gt; is assigned but never used.
</msg>

<msg type="warning" file="Xst" num="646" delta="unknown" >Signal &lt;<arg fmt="%s" index="1">rx_over_run</arg>&gt; is assigned but never used.
</msg>

<msg type="warning" file="Xst" num="647" delta="unknown" >Input &lt;<arg fmt="%s" index="1">reset</arg>&gt; is never used.
</msg>

<msg type="info" file="Xst" num="1442" delta="unknown" >HDL ADVISOR - The RAM contents appears to be read asynchronously. A synchronous read would allow you to take advantage of available block RAM resources, for optimized device usage and improved timings. Please refer to your documentation for coding guidelines.
</msg>

<msg type="warning" file="Xst" num="647" delta="unknown" >Input &lt;<arg fmt="%s" index="1">mb&lt;11:3&gt;</arg>&gt; is never used.
</msg>

<msg type="warning" file="Xst" num="646" delta="unknown" >Signal &lt;<arg fmt="%s" index="1">tto_empty</arg>&gt; is assigned but never used.
</msg>

<msg type="warning" file="Xst" num="1305" delta="unknown" >Output &lt;<arg fmt="%s" index="1">ide_error</arg>&gt; is never assigned. Tied to value <arg fmt="%s" index="2">0</arg>.
</msg>

<msg type="warning" file="Xst" num="646" delta="unknown" >Signal &lt;<arg fmt="%s" index="1">ata_out&lt;15:12&gt;</arg>&gt; is assigned but never used.
</msg>

<msg type="warning" file="Xst" num="646" delta="unknown" >Signal &lt;<arg fmt="%s" index="1">err</arg>&gt; is assigned but never used.
</msg>

<msg type="warning" file="Xst" num="647" delta="unknown" >Input &lt;<arg fmt="%s" index="1">mb&lt;11:3&gt;</arg>&gt; is never used.
</msg>

<msg type="warning" file="Xst" num="646" delta="unknown" >Signal &lt;<arg fmt="%s" index="1">ide_error</arg>&gt; is assigned but never used.
</msg>

<msg type="warning" file="Xst" num="646" delta="unknown" >Signal &lt;<arg fmt="%s" index="1">PEF</arg>&gt; is assigned but never used.
</msg>

<msg type="warning" file="Xst" num="646" delta="unknown" >Signal &lt;<arg fmt="%s" index="1">buffer_rd</arg>&gt; is assigned but never used.
</msg>

<msg type="warning" file="Xst" num="646" delta="unknown" >Signal &lt;<arg fmt="%s" index="1">active</arg>&gt; is assigned but never used.
</msg>

<msg type="warning" file="Xst" num="647" delta="unknown" >Input &lt;<arg fmt="%s" index="1">slideswitch&lt;7:4&gt;</arg>&gt; is never used.
</msg>

<msg type="warning" file="Xst" num="1306" delta="unknown" >Output &lt;<arg fmt="%s" index="1">sevenseg</arg>&gt; is never assigned.
</msg>

<msg type="warning" file="Xst" num="1306" delta="unknown" >Output &lt;<arg fmt="%s" index="1">sevenseg_an</arg>&gt; is never assigned.
</msg>

<msg type="warning" file="Xst" num="647" delta="unknown" >Input &lt;<arg fmt="%s" index="1">button&lt;2:0&gt;</arg>&gt; is never used.
</msg>

<msg type="warning" file="Xst" num="1306" delta="unknown" >Output &lt;<arg fmt="%s" index="1">led</arg>&gt; is never assigned.
</msg>

<msg type="warning" file="Xst" num="653" delta="unknown" >Signal &lt;<arg fmt="%s" index="1">switches</arg>&gt; is used but never assigned. Tied to value <arg fmt="%s" index="2">000000000000</arg>.
</msg>

<msg type="info" file="Xst" num="1767" delta="unknown" >HDL ADVISOR - Resource sharing has identified that some arithmetic operations in this design can share the same physical resources for reduced device utilization. For improved clock frequency you may try to disable resource sharing.
</msg>

<msg type="info" file="Xst" num="1651" delta="unknown" >Address input of ROM &lt;<arg fmt="%s" index="1">Mrom__AUX_15</arg>&gt; is tied to register &lt;<arg fmt="%s" index="2">ir</arg>&gt;.
</msg>

<msg type="info" file="Xst" num="2502" delta="unknown" >HDL ADVISOR - Asynchronous or synchronous initialization of this register prevents it from being combined with the ROM for implementation as read-only block RAM.
</msg>

<msg type="info" file="Xst" num="1647" delta="unknown" >Data output of ROM &lt;<arg fmt="%s" index="1">Mrom__mux0005</arg>&gt; is tied to register &lt;<arg fmt="%s" index="2">interrupt_inhibit_clear</arg>&gt;.
</msg>

<msg type="info" file="Xst" num="2506" delta="unknown" >In order to maximize performance and save block RAM resources, this small ROM will be implemented on LUT. If you want to force its implementation on block, use option/constraint rom_style.
</msg>

<msg type="info" file="Xst" num="1647" delta="unknown" >Data output of ROM &lt;<arg fmt="%s" index="1">Mrom__mux0003</arg>&gt; is tied to register &lt;<arg fmt="%s" index="2">tx_int</arg>&gt;.
</msg>

<msg type="info" file="Xst" num="2506" delta="unknown" >In order to maximize performance and save block RAM resources, this small ROM will be implemented on LUT. If you want to force its implementation on block, use option/constraint rom_style.
</msg>

<msg type="warning" file="Xst" num="1426" delta="unknown" >The value init of the FF/Latch <arg fmt="%s" index="1">onetime</arg> hinder the constant cleaning in the block <arg fmt="%s" index="2">debounce</arg>.
You should achieve better results by setting this init to <arg fmt="%i" index="3">1</arg>.
</msg>

<msg type="warning" file="Xst" num="1291" delta="unknown" >FF/Latch &lt;<arg fmt="%s" index="1">ata_out_12</arg>&gt; is unconnected in block &lt;<arg fmt="%s" index="2">ide1</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1291" delta="unknown" >FF/Latch &lt;<arg fmt="%s" index="1">ata_out_13</arg>&gt; is unconnected in block &lt;<arg fmt="%s" index="2">ide1</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1291" delta="unknown" >FF/Latch &lt;<arg fmt="%s" index="1">ata_out_14</arg>&gt; is unconnected in block &lt;<arg fmt="%s" index="2">ide1</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1291" delta="unknown" >FF/Latch &lt;<arg fmt="%s" index="1">ata_out_15</arg>&gt; is unconnected in block &lt;<arg fmt="%s" index="2">ide1</arg>&gt;.
</msg>

<msg type="info" file="Xst" num="2146" delta="unknown" >In block &lt;<arg fmt="%s" index="1">ide_disk</arg>&gt;, <arg fmt="%s" index="2">Counter</arg> &lt;<arg fmt="%s" index="3">offset</arg>&gt; </msg>

<msg type="warning" file="Xst" num="1291" delta="unknown" >FF/Latch &lt;<arg fmt="%s" index="1">io/tf/disk/ide1/ata_out_12</arg>&gt; is unconnected in block &lt;<arg fmt="%s" index="2">top</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1291" delta="unknown" >FF/Latch &lt;<arg fmt="%s" index="1">io/tf/disk/ide1/ata_out_13</arg>&gt; is unconnected in block &lt;<arg fmt="%s" index="2">top</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1291" delta="unknown" >FF/Latch &lt;<arg fmt="%s" index="1">io/tf/disk/ide1/ata_out_14</arg>&gt; is unconnected in block &lt;<arg fmt="%s" index="2">top</arg>&gt;.
</msg>

<msg type="warning" file="Xst" num="1291" delta="unknown" >FF/Latch &lt;<arg fmt="%s" index="1">io/tf/disk/ide1/ata_out_15</arg>&gt; is unconnected in block &lt;<arg fmt="%s" index="2">top</arg>&gt;.
</msg>

<msg type="info" file="Xst" num="2387" delta="unknown" >HDL ADVISOR - A <arg fmt="%d" index="1">2</arg>-bit shift register was found for signal &lt;<arg fmt="%s" index="2">io/tt/tt_uart/rx_d2</arg>&gt; and currently occupies <arg fmt="%d" index="3">2</arg> logic cells (<arg fmt="%d" index="4">1</arg> slices). Removing the set/reset logic would take advantage of SRL16 (and derived) primitives and reduce this to 1 logic cells (1 slices). Evaluate if the set/reset can be removed for this simple shift register. The majority of simple pipeline structures do not need to be set/reset operationally.
</msg>

<msg type="info" file="Xst" num="2169" delta="unknown" >HDL ADVISOR - Some clock signals were not automatically buffered by XST with BUFG/BUFR resources. Please use the buffer_type constraint in order to insert these buffers to the clock signals to help prevent skew problems.
</msg>

</messages>
