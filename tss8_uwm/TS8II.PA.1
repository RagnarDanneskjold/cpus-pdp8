/TS8II - UWM VERSION 25
/
/COPYRIGHT 1971, 1975		DIGITAL EQUIPMENT CORPORATION
/				MAYNARD, MASSACHUSETTS
/
/EXTENSIVELY MODIFIED AND CORRECTED BY
/	RICHARD BARTLEIN, 1974, 1976
/	UNIVERSITY OF WISCONSIN - MILWAUKEE
/
/*CJOBDA	/CURRENT JOB DATA POINTER
/*DTJOB		/JOB HOLDING DECTAPE CONTROLLER
/*F1OFFJ	/SYSTEM OFF/ON COMMAND FLAG
/*RKJOB		/JOB HOLDING RK05 CONTROLLER

	*0
	ZBLOCK 7	/ (IN CASE ANYONE REFERENCES JOB 0
	REBOOT		/ OR JUMPS TO LOC. ZERO)

	*10
K0030,	30
K0500,	500
K0614,	614

IX3,	0
IX4,	JOBTBL		/WAIT 2 - UNQUEUE POINTER
A15,	0		/USER DDB POINTER FOR DT SERVICE
A16,	0		/USER FIELD POINTER (BLT)
A17,	0		/DATFLD POINTER (BLT)
/
CJOBDA,	0		/POINTER TO CURRENT JOB'S STATUS BLOCK
CORTBA,	CORTBL-1
DEVTBA,	DEVTBL
DTBLK,	0
DTBLKP,	0
DTBUF,	0
DTCOM,	0
DTJOB,	0
DTREMB,	0
DTST,	0
DTTIME,	0
DTUCA,	0
DTBUFA,	ENDBUF-1
DTCAP,	7755
F1OFFJ,	0		/MASK FOR LOGIN - ON=0, OFF=7774
F1SCH,	0
JOBA,	JOB		/POINTER TO CURRENT JOB NUMBER
RKBLKS,	0
RKCOM,	0
RKCORE,	0
RKCNT,	0
RKJOB,	0
RKSECT,	0
RKTIME,	0
AWAKEN,	WAKEUP
BLTF1A,	BLTF1
DTCHKA,	DEVCHK
DTERRA,	DTERR
DTGOA,	DTGO
DTRKHA,	DTRKHG
DTRKJA,	DTRKJB
GETTB1,	GETJTB
JOBCNT,	-JOBMAX
JOBTAB,	JOBTBL
QUEUE1,	QUEUE0
REBOOT=	JMS I .
	RBOOT1	/AUTO-RESTART ENTRY
RKERRA,	RKERR
SLEEPB,	SLEEP
UDFP,	UUDF
WAIT2,	WAITS2

/CONSTANTS
K0002,	2
K0003,	3
K0004,	4
K0005,	5
K0006,	6
K0007,	7
K0010,	10
K0020,	20
K0037,	37
K0040,	40
K0070,	70
K0200,	200
K0204,	204
K0214,	214
K0377,	377
K0400,	400
K0600,	600
K1000,	1000
K6201,	6201
K7000,	7000
K7400,	7400
K7700,	7700
K7770,	7770
K7774,	7774
M201,	-201
M2702,	-2702

INTS1,	0		/INTERRUPT TEMP
INTS2,	0
TEMP0,	0
TEMP1,	0
TEMP2,	0
TEMP3,	0
TEMP4,	0
L2SAP,	L2SV0+2		/USER'S SAVED AC

UDF1,	0
	HLT		/SELECT USER FIELD
	JMP I .-2

EXITF1=	JMP .
K6203,	CIF CDF
	TAD F1SCH
	SNA CLA		/ANYTHING JUST OUT OF WAIT?
	JMP I .+4	/NO - TAKE NORE LEVEL-2 EXIT
	DCA F1SCH	/YES - CLEAR THE FLAG
	JMP I .+1	/ AND RESCHEDULE
	SCHED0
	L2EXIT

INTRTN=	JMP .
	CIF CDF
	JMP I .+1	/DISMISS INTERRUPT
	F1RTN

/JOB TABLE ADDRESS TO TEMP0
/CALL:	TAD JOB #
/	JMS GETTBA
/	 TABLE ENTRY
/	RETURN WITH ADDRESS IN TEMP0

GETTBA,	0
	DATFLD
	DCA TEMP0	/SAVE THE JOB #
	TAD I GETTBA
	DCA .+5		/SET THE PARAMTER FOR F0 ROUTINE
	TAD TEMP0
	TAD JOBTAB	/CALL THE F0 ROUTINE WITH AC
K6202,	CIF		/ POINTING TO THE JOBTBL ENTRY
	JMS I GETTB1
	 0
	DCA TEMP0
	ISZ GETTBA
	JMP I GETTBA	/ AND RETURN


WAITF1=	JMP .
	CIF CDF
	JMP I .+1
	WSCHED

/SYSTEM POINTERS USED BY VARIOUS LIBRARY PROGRAMS

/*UPTIM1	/SYSTEM UPTIME
/*UPTIM2
	*170
	NULINE		/NUMBER OF KEYBOARDS
	JOBMAX		/NUMBER OF JOBS
	DEVTBL		/POINTER TO DEVICE TABLE
UPTIM2,	0
UPTIM1,	0		/LOW ORDER

/DDB POINTERS FOR USE BY 'SI'
/*F1TCNT	/DDB CHARACTER COUNT
/*F1ECNT	/DDB EMPTY COUNT
/*F1BUF		/DDB EMPTY BLOCK
F1TCNT,	0		/DDB CHARACTER COUNT
F1ECNT,	0		/DDB EMPTY COOUNT
F1BUF,	0		/DDB EMPTY BLOCK

	*OUTREG
	ZBLOCK SKPTBL-OUTREG

KSKIP=	KSF-30
TSKIP=	TSF-40

	*SKPTBL
	KSF		/K00	/SKIP IOT FOR CONSOLE KEYBOARD
IFZERO DC08A <
	KSKIP+400	/K01	/KEYBOARD SKIP IOTS FOR PT08 AND KL8E
	KSKIP+420	/K02
	KSKIP+440	/K03
	KSKIP+460 >	/K04
	KSKIP+340	/K05; K01 IF DC08A WITH PT08'S
	KSKIP+110	/K06; K02 IF DC08A WITH PT08'S
IFNZRO CPU-1 <
	KSKIP+300 >	/K07; K03 IF DC08A WITH PT08'S
	KSKIP+320	/K10; K04 IF DC08A WITH PT08'S
	KSKIP+500	/K11; K05 IF DC08A WITH PT08'S
	KSKIP+520	/K12; K06 IF DC08A WITH PT08'S
	KSKIP+540	/K13; K07 IF DC08A WITH PT08'S
	KSKIP+560	/K14; K10 IF DC08A WITH PT08'S
	KSKIP+700	/K15
	KSKIP+360	/K16
	KSKIP+720	/K17
	KSKIP+060	/K20
	KSKIP+140	/K21
	KSKIP+160	/K22
	KSKIP+050	/K23

	IFNZRO CDVIN	<*SKPTBL+NULINE+CONTTY>
	IFNZRO CDVGAP	<NOP; NOP; NOP>	/LEAVE ROOM FOR HSR, ?, AND CDR
	IFZERO CDVIN-1&4000	<NOP>	/R2 - 4006
	IFZERO CDVIN-2&4000	<NOP>	/X0 - 4010
	IFZERO CDVIN-3&4000	<NOP>	/X1 - 4012
	IFZERO CDVIN-4&4000	<NOP>	/X2 - 4014
	IFZERO CDVIN-5&4000	<NOP>	/X3 - 4016

IFNZRO DC08A <
*SKPTBL+PT08+KL8+CONTTY+CDVIN+CDVGAP
	DC8REG
	ZBLOCK DC08A >	/DC08A ACTIVE OUTPUT REGISTERS

IFZERO DC08A <*SKPTBL+NULINE+CONTTY+CDVIN+CDVGAP
	OUTIOT >	/SWITCH TO OUTPUT SIDE

	TSF		/K00	/SKIP IOT FOR CONSOLE TELEPRINTER
IFZERO DC08A <
	TSKIP+410	/K01	/TELEPRINTER SKIP IOTS FOR PT08 AND KL8E
	TSKIP+430	/K02
	TSKIP+450	/K03
	TSKIP+470 >	/K04
	TSKIP+350	/K05; K01 IF DC08A WITH PT08'S
	TSKIP+120	/K06; K02 IF DC08A WITH PT08'S
IFNZRO CPU-1 <
	TSKIP+310 >	/K07; K03 IF DC08A WITH PT08'S
	TSKIP+330	/K10; K04 IF DC08A WITH PT08'S
	TSKIP+510	/K11; K05 IF DC08A WITH PT08'S
	TSKIP+530	/K12; K06 IF DC08A WITH PT08'S
	TSKIP+550	/K13; K07 IF DC08A WITH PT08'S
	TSKIP+570	/K14; K10 IF DC08A WITH PT08'S
	TSKIP+710	/K15
	TSKIP+370	/K16
	TSKIP+730	/K17
	TSKIP+070	/K20
	TSKIP+150	/K21
	TSKIP+170	/K22
	TSKIP+650	/K23

IFNZRO DC08A <
*SKPTBL+NULINE+PT08+KL8+CONTTY+CONTTY+CDVIN+CDVGAP+1
	JMPDC8		/DC08A OUTPUT VECTOR
	JMPDC8		/DC08A OUTPUT VECTOR
	JMPDC8		/DC08A OUTPUT VECTOR
	JMPDC8		/DC08A OUTPUT VECTOR
	JMPDC8		/DC08A OUTPUT VECTOR
	JMPDC8		/DC08A OUTPUT VECTOR
	JMPDC8		/DC08A OUTPUT VECTOR
	JMPDC8		/DC08A OUTPUT VECTOR
	JMPDC8		/DC08A OUTPUT VECTOR
	JMPDC8		/DC08A OUTPUT VECTOR
	JMPDC8		/DC08A OUTPUT VECTOR
	JMPDC8		/DC08A OUTPUT VECTOR
	JMPDC8		/DC08A OUTPUT VECTOR
	JMPDC8		/DC08A OUTPUT VECTOR
	JMPDC8		/DC08A OUTPUT VECTOR
	JMPDC8		/DC08A OUTPUT VECTOR
	JMPDC8		/DC08A OUTPUT VECTOR
	JMPDC8		/DC08A OUTPUT VECTOR
	JMPDC8		/DC08A OUTPUT VECTOR
	JMPDC8 >	/DC08A OUTPUT VECTOR

*SKPTP
IFNZRO PUNCH <PSF>	/PUNCH
IFZERO PUNCH <NOP>
IFNZRO LPT <LSF>	/LINE PRINTER
IFZERO LPT <NOP>
	IFZERO CDVOUT-1&4000	<NOP>	/P2 - 4005
	IFZERO CDVOUT-2&4000	<NOP>	/L2 - 4007
	IFZERO CDVOUT-3&4000	<NOP>	/Y0 - 4011
	IFZERO CDVOUT-4&4000	<NOP>	/Y1 - 4013
	IFZERO CDVOUT-5&4000	<NOP>	/Y2 - 4015
	IFZERO CDVOUT-6&4000	<NOP>	/Y3 - 4017
	ENDIOT		/TERMINATES LIST

	*RINGIN
/ADDITIONAL FREE CORE GENERATION TABLE; REFERENCED BY 'INIT'
/	THE FOLLOWING AREAS WILL BECOME PART OF FREE CORE

IFZERO TC01&RK05&CDR <
	ENDBUF;FCE4	>

IFNZRO TC01+RK05+CDR <
IFZERO TC01 <
	ENDBUF;FCE1	>
IFZERO RK05 <
	FCB2;FCE2
	FCB4;FCE4	>
IFZERO CDR <
	FCB3;FCE3	> >
IFNZRO DC08A <
IFNZRO D689 <
	FCB5;FCE5	>
IFZERO D689 <
	FCB5;DATA1	> >

	IFZERO DEBUG&7-3&4000	<*RINGIN>
	0		/TO TERMINATE THE LIST

	NOPUNCH
	ZBLOCK ENDBUF-.	/KEYBOARD INPUT RING BUFFER
	ENPUNCH
	*ENDBUF
	NOPUNCH
	ZBLOCK 201	/DECTAPE BUFFER
	ENPUNCH
	*.

/DECTAPE LEVEL 1 ENTRY

/*DTL11		/LEVEL-1 INTERRUPT FOR DECTAPE
DTL11,	TAD DTREMB	/PREVIOUS ERRORS FROM THIS TRANSFER
	DTRB		/"OR'ED" WITH ANY NEW ERRORS
	DCA DTREMB
	DTRB		/WERE THERE ANY ERRORS?
	SMA
	JMP I DTXOR	/A-OK!
	AND K0500	/WHAT WAS IT?
	SNA		/SELECT ERROR OR TIMING ERROR?
	JMP DTSR0	/NO - MUST BE A MARK, END OR PARITY
	AND K0400
	SZA CLA		/TIMING ERROR?
	JMP DTSR1	/N0 - SELECT ERROR - DON'T RETRY
	CLL CMA RAL	/AC=-2
	TAD I DTERRA	/TIMING ERROR WAS OUR FAULT - INTERRUPT OFF TOO LONG
	DCA I DTERRA	/DON'T CHARGE HIM FOR THE TURN-AROUNDS
DTSR0,	ISZ I DTERRA	/COUNT A TURN-AROUND
	JMP DTSR2	/OK - CONTINUE SEARCHING
DTSR1,	TAD DTREMB	/ACCUMULATED ERROR STATUS
	RAL
	STL RAR		/MAKE SURE THE ERROR BIT IS SET
	JMP DTSTOP	/SHUT HIM DOWN
DTSR2,	CDF
	TAD DTBLKP
	DCA I DTCAP	/RESTORE CA TO POINT INTO WORD 2 OF HIS DDB
	DTRA		/CURRENT STATUS
	AND K0377
	DTXA		/CLEAR GO, FUNCTION, AND INTERRUPT ENABLE
	TAD K0614	/SWITCH DIRECTIONS, GO, SEARCH AND ENABLE
DTSRCH,	JMS DTXOR	/CONTINUE SEARCHING
DTSR3,	TAD DTCOM
	RTL
	RTL
	STA CML RAL	/AC=-1 IF FORWARDS R/W; AC=-2 IF REVERSE R/W
	DCA DTDIR
	TAD I DTBLKP
	TAD M2702
	SNL CLA		/ARE WE AT A REASONABLE BLOCK NUMBER?
	JMP DTSR0	/NO -- TURN AROUND
	TAD DTBLK
	TAD M2702
	SNL CLA		/DOES HE WANT A REASONABLE BLOCK?
	JMP DTSR1	/NO -- QUIT LOOKING FOR IT
	DTRA		/WHICH WAY ARE WE GOING
	RTL
	RTL
	CLA		/PRESENT DIRECTION IS IN THE LINK
	TAD DTBLK	/BLOCK WANTED
	CIA
	TAD I DTBLKP	/BLOCK FOUND
	SNA		/ARE WE THERE?
	JMP DTSR5	/YES - SEE IF WE ARE GOING THE RIGHT DIRECTION
	ISZ DTDIR	/NO
	CIA		/REVERSE R/W - NEGATE AC
	SMA
	JMP DTSR4	/SKIP SOME CODE - WE'RE ON THE WRONG SIDE OF THE BLOCK
	SZL		/L=1 MEANS WE'RE GOING THE WRONG WAY
	TAD K0003	/MAKE ROOM FOR TURN AROUND
	CMA
	AND K7770
	SNA		/ARE WE CLOSE
	JMS DTSR7	/YES - GO CHECK BUFFER STATUS
DTSR4,	AND K7700	/ARE WE TOO FAR AWAY?
	SZA SNL SMA
	JMP DTSR6	/PUT HIM ON THE TIMER
	SNL CLA		/ARE WE GOING IN THE RIGHT DIRECTION?
	JMP DTSRCH	/CONTINUE THE SAME DIRECTION
	JMP DTSR0	/GO TURN AROUND

DTSR5,	JMS DTSR7	/CHECK ON BUFFER STATUS
	ISZ DTDIR
	CML		/CORRECT LINK FOR REVERSE R/W
	SNL		/ARE WE GOING THE RIGHT DIRECTION
	JMP DTSRCH	/NO - CAUSE OVER-SHOOT FOR TURN-AROUND
	TAD M201
	CDF
	DCA I DTWCP	/SET-UP DECTAPE WORD COUNT
	TAD DTBUFA
	DCA I DTCAP	/SET-UP DECTAPE CURRENT ADDRESS
	TAD DTCOM
	AND K0040	/READ OR WRITE?
	CLL RAR
	TAD K0030
	JMS DTXOR	/CHANGE FROM SEARCH TO READ OR WRITE
DTSTOP,	ISZ DTBUF	/ASSIGN THE BUFFER - IF HE DOESN'T ALREADY HAVE IT
	AND K7701
	DCA I DTERRA	/SAVE STATUS B FOR HIM
	DTRA
	AND K0400
	SZA CLA		/WHICH WAY ARE WE GOING
	TAD K7774
	TAD K0002
	TAD I DTBLKP	/REMEMBER WHERE WE WILL FINALLY STOP
	DCA I DTBLKP
	DTRA
	AND K0204	/CLEAR GO & INTERRUPT ENABLE
	JMP DTSRCH	/TO STOP THE TAPE

DTWCP,	7754
K7701,	7701
K0014,	14

DTSR6,	RTR		/DIVIDE BY 100
	RTR
	RTR
	CIA
	DCA DTBUF	/ -SECONDS TO WIND ON TIMER
	TAD K0003
	TAD I DTST
	DCA DTDIR	/POINTS TO USER WORD 1
	DTRA
	AND K0400
	SZA CLA		/WHICH WAY SHOULD WE SET THE BRAKES LATER
	ISZ I DTDIR	/SET BIT 11 TO SHOW REVERSE
	TAD K0014
	JMP DTSRCH	/KEEP HIM MOVING WITH INIT, DISABLED

DTSR7,	0
	TAD DTCOM
	AND K0020	/IS THIS A READ
	TAD DTBUF	/OR - IS THE BUFFER LOADED FOR A WRITE
	SZA CLA
	JMP I DTSR7	/PROCEED
	JMP DTSTOP+2	/STOP AND WAIT FOR THE BUFFER TO BE LOADED

DTDIR,
DTXOR,	DTSTOP		/WHERE TO RETURN ON SUCCESSFUL INTERRUPT
	DTXA		/ZAP IN THE NEW FUNCTION
	DTRA
	RTR
	RAR
	SZL CLA		/DID WE STOP?
	CML CMA RTL
	DCA DTTIME	/LOAD THE CONTROLLER TIMER
	SNL
	TAD DTL2	/WE'RE DONE - SCHEDULE LEVEL 2
	INTRTN
DTL2,	DTL20

/*DTL21		/DECTAPE LEVEL-2 COMPLETION
DTL21,	TAD DTBUF	/WHAT KIND OF COMPLETION?
	SNA
	JMP DTEND4	/END OF A SEARCH - TAPE NOW IN POSITION FOR THE WRITE
	SPA CLA
	JMP DTEND6	/THIS DRIVE HAS BEEN PUT ON TIMER
	TAD DTCOM
	AND K0020
	SNA		/WAS IT A READ OR WRITE?
	JMP DTEND3	/WRITE - HE'S ALL DONE
	JMS DTDATA	/READ -TRANSFER HIS DATA BACK TO HIM
	EXITF1		/WAIT FOR DISC TO FINISH
DTEND3,	TAD DTJOB
	JMS I AWAKEN	/TAKE HIM OUT OF WAIT STATUS
DTERR,	0
DTEND4,	DCA DTJOB	/CONTROLLER IS FREE
DTEND5,	JMS I DTGOA	/TRY TO START A DECTAPE TRANSFER
	EXITF1

DTEND6,	TAD DTBUF
	DCA I A15	/SAVE -SECONDS TO WIND TAPE
	ISZ I DTST	/CHANGE TO DECTAPE TIMER WAIT
	JMP DTEND4	/FIND SOMETHING ELSE TO DO

/MOVE 201 WORDS TO/FROM USER, FROM/TO DATFLD
/USER MAY BE IN CORE OR ON HIS SWAP TRACK
DTDATA,	0
	DCA TEMP1	/SAVE READ/WRITE INDICATOR; 0=WRITE, 20=READ
	CIF
	TAD DTJOB
	JMS I COREA	/NOW FIND OUT WHERE HE IS
	 FSWP LOCK FIP SI CJOB
	JMP DTDA1	/HE'S IN HIS SWAP TRACK
	AND K0070	/SAVE HIS FIELD
	TAD K6201
	DCA UDF1+1	/UDF1 IS FIXED FOR BLTF1
	TAD DTBUFA
	DCA A17		/POINTS TO DECTAPE BUFFER IN DATFLD
	TAD DTUCA
	DCA A16		/USER BUFFER POINTER
	TAD TEMP1
	CLL CMA RTR
	RTR
	RAR
	JMS I BLTF1A	/L=0 FOR READ, L=1 FOR WRITE; AC=-201
	ISZ DTDATA	/SKIP - DATA HAS ALREADY BEEN MOVED
	JMP I DTDATA

DTDA1,	IAC
	TAD DTUCA
	CLL IAC
	TAD K0200
	SNL		/DO WE HAVE A WRAP AROUND SITUATION?
	CLA		/NO - WE CAN DO THE WHOLE THING AT ONCE
	TAD M201
	DCA DTDWC	/WC FOR DISC TRANSFER
	TAD DTBUFA
	DCA DTDCA	/CA FOR DISC TRANSFER
	TAD DTJOB
	TAD K0004
	CLL RTL
	DCA DTDHI	/TRACK ADDRESS FOR DISC TRANSFER
	TAD TEMP1
	SZA CLA
	STL RTL
	TAD DTDMAR
	DCA DTDIOT	/DMAR OR DMAW FOR DISC TRANSFER
	IAC
	TAD DTUCA
	JMS DTDGO	/START THE DISC
	JMP I DTDATA	/EXIT - NO SKIP - MUST WAIT FOR DISC

/DISC PARAMETER BLOCK FOR DECTAPE HANDLER
DTDIOT,	0
DTDHI,	0
	7
DTDWC,	0
DTDCA,	0
DTDLO,	0
	DTDSK
DTDPAR,	DTDIOT

COREA,	CORSRC
DTDMAR,	DMAR
DTDISK,	DTDSF0

DTDGO,	0
	DCA DTDLO	/DISC ADDRESS TO START AT
	TAD DTDPAR
	CIF
	JMS I DTDISK	/NOW GO TO TS8 TO START OUR REQUEST
	JMP I DTDGO	/RETURN HERE AFTER STARTING THE DISC
	JMP DTDCMP	/RETURN HERE AFTER A GOOD DISC TRANSFER
	SKP		/RETURN HERE AFTER A BAD DISC TRANSFER
	JMP DTEND3	/RETURN HERE AFTER REPORTING THE DISC ERROR
	TAD DTJOB	/JOB IN TROUBLE
	CIF CDF
	JMP I .+1	/GO REPORT THE ERROR - MAKE IT SWPRER
	DTDEF0

DTDCMP,	TAD DTDWC
	CIA
	TAD M201
	SNA		/DO WE NEED A SECOND PASS
	JMP DTDCM0	/NO - IT'S DONE
	DCA DTDWC
	TAD DTDLO	/YES - HAVE WE ALREADY DONE IT?
	SNA
	JMP DTDCM0	/ALL FINISHED!
	CIA
	TAD DTDCA	/UPDATE THE DISC'S C.A.
	DCA DTDCA
	JMS DTDGO	/START THE DISC AGAIN
	EXITF1

DTDCM0,	TAD DTBUF	/WAS IT A READ OR WRITE?
	SZA CLA
	JMP DTEND3	/READ - WE'RE FINISHED
	ISZ DTBUF	/ASSIGN THE BUFFER TO HIM NOW
	TAD A15		/GO RESTART HIS WRITE
	JMP DTEND5

DTLOAD,	0
	DCA DTDGO	/SAVE THE DESIRED STATUS A
	DTRA
	DCA DTDATA	/AND THE PRESENT STATUS A
	TAD DTDGO
	AND DTDATA	/WHERE WILL CARRIES BE GENERATED
	CIA
	CLL RAL		/WE WANT TO CANCEL THE CARRIES
	TAD DTDGO	/NOW ADD THEM TOGETHER
	TAD DTDATA	/NOW WE HAVE THE "XOR" OF THE "PRESENT" AND THE "DESIRED" STATUS A
	DTXA		/"XOR" IT INTO THE CONTROLLER
	JMP I DTLOAD	/THE RESULT WILL BE THE DESIRED STATUS A

	IFNZRO .&100	<PAGE>
/START OR RESTART A DECTAPE READ OR WRITE FOR THE USER

DTGO,	0
	SZA		/ARE WE RESTARTING AFTER A TIMER KILLED US
	JMP DTGO1	/YES - SO WE DON'T NEED TO LOOK AT THE QUEUE
	TAD DTJOB
	SZA CLA		/IS THE CONTROLLER BUSY?
	JMP I DTGO	/CONTROLLER IS ALREADY BUSY
	DCA DTBUF	/BUFFER IS EMPTY
	JMS I DTRKJA	/FIND SOMEONE WAITING FOR THE CONTROLLER
	 -1
	JMP I DTGO	/NOTHING WAITING
DTGO1,	AND K7770
	DCA A15
	TAD I A15	/PULL JOB NUMBER FROM DDB
	DCA DTJOB
	TAD DTJOB
	JMS GETTBA	/FIND WAIT 2
	 JOBWMK+1
	TAD TEMP0
	DCA DTST	/SAVE IT'S POINTER FOR LATER
	ISZ A15
	TAD A15		/ADDRESS TO DUMP BLOCK NUMBERS INTO
	DCA DTBLKP
	ISZ A15
	TAD I A15	/USER WORD 1 -- UNIT,DIR,FUNC.
	DCA DTCOM
	TAD I A15	/USER WORD 2 -- BLOCK NUMBER WANTED
	DCA DTBLK
	TAD I A15	/USER WORD 3 -- USER'S C.A.
	DCA DTUCA
	TAD DTCOM	/DIRECTION FOR THIS OPERATION
	AND K0400
K7740,	SZA SMA CLA
	TAD DTREV
	TAD K0006	/AC=-5 FOR REVERSE R/W; AC=+6 FOR FORWARD R/W
	TAD I DTBLKP	/GET BLOCK FROM LAST TIME
	TAD K0020	/BIAS BY 20 TO AVOID NEG. NUMBERS AND ZERO
	STL CIA
	TAD K0020
	TAD DTBLK	/BLOCK WE WANT
	SZL
	CIA		/AC= ABSOLUTE VALUE OF DIFFERENCE
	AND K7740
	DCA TEMP4	/SAVE THAT RESULT FOR LATER
	TAD DTCOM
	AND K7000	/SAVE ONLY THE UNIT
	SZL		/LINK = INITIAL SEARCH DIRECTION
	TAD K0400	/SEARCH REVERSE INITIALLY
	JMS I DTLOAA	/LOAD THE CONTROLLER
	TAD DTCOM	/LOAD THE DECTAPE BUFFER IF:
	AND K0020	/ ******* HE'S DOING A WRITE
	TAD TEMP4	/ ******* THE DISIRED BLOCK IS FAIRLY CLOSE
	TAD DTBUF	/ ******* THE BUFFER IS EMPTY
	SZA CLA
	JMP DTGO2	/AT LEAST ONE OF THE ABOVE IS FALSE
	JMS I DTGETW	/MOVE 201 WORDS FROM USER (CORE OR SWAP TRACK) TO DATFLD
	JMP DTGO3	/WAIT FOR THE DISC TO FINISH
	ISZ DTBUF	/ASSIGN THE BUFFER TO HIM
DTGO2,	TAD DTSR3A
	DCA I DTXORA	/SET-UP FOR SEARCH MODE
	DCA DTREMB	/CLEAR ERROR ACCUMULATOR
	CDF
	TAD DTBLKP
	DCA I DTCAP	/SET-UP CA FOR THE BLOCK NUMBERS
	CIF DATFLD	/INHIBIT INTERRUPTS
	TAD K0010	/ALL DATA BREAKS ARE TO DATFLD
	DTLB
	TAD K7770
	DCA I DTERRA	/ALLOW 10 CHANGES OF DIRECTION
	TAD K0214
	DTXA		/GO SEARCH, INT, ENABLE
	CLL CMA RTL	/SET CONTROLLER TIMER FOR 3 SECONDS
DTGO3,	DCA DTTIME
	JMP I DTGO

DTREV,	-13
DTSR3A,	DTSR3
DTGETW,	DTDATA
DTXORA,	DTXOR
DTLOAA,	DTLOAD

DTIMER,	0
	JMS I DTRKJA	/FIND A JOB IN DECTAPE TIMER WAIT
	 -2
	JMP DTIME3	/ALL DONE
	TAD K0005
	DCA TEMP3
DTIME1,	CLL CMA RTL	/AC=-3
	ISZ I TEMP3	/IS HIS TIMER UP?
	JMP DTIMER+1
	TAD TEMP3	/YES - JAM ON THE BRAKES
	DCA TEMP4	/POINT TO USER WORD 1
	CIF DATFLD	/INHIBIT INTERRUPTS
	DTRA		/GET STATUS OF CURRENT UNIT
	AND K0004	/SAVE ENABLE
	SZA		/IS IT REALLY DOING SOMETHING?
	TAD K0200	/YES - CLEAR GO AND ENABLE
	DTXA
	TAD I TEMP4
	AND K7001	/SAVE UNIT AND CURRENT DIRECTION
	TAD K0377	/MOVE THE DIRECTION BIT INTO POSITION
	AND K7400
	JMS I DTLOAA	/STOP HIM!!!
	TAD K7770
	AND I TEMP4
	DCA I TEMP4	/CLEAR "BREAK" BIT
	TAD TEMP2
	TAD I TEMP0
	DCA I TEMP0	/PUT HIM BACK IN DECTAPE WAIT
	JMP DTIME1	/CHECK FOR OTHER DRIVES TO STOP
DTIME3,	TAD TEMP4
	SNA CLA
	JMP DTIME4	/NOTHING STOPPED THIS TIME
	TAD DTTIME	/WAS ANYTHING IMPORTANT GOING ON
	SZA CLA
	TAD A15		/YES - LET'S GET BACK TO IT
	JMS I DTGOA	/START SOMETHING
DTIMEX,	JMP I DTIMER
DTIME4,	CIF DATFLD	/INHIBIT INTERRUPTS
	TAD DTTIME	/IS THE CONTROLLER BUSY?
	SZA CLA		/NO
	ISZ DTTIME	/YES - BUMP CONTROLLER TIMER
	JMP I DTIMER
	DTRA		/IT'S HUNG
	AND K0204
	DTXA		/STOP THE TAPE (IF IT'S EVEN MOVING)
	STA
	DCA I DTERRA	/LET HIM KNOW THE TRANSFER PROBABLY DIDN'T HAPPEN
K7001,	IAC
	DCA DTBUF
	DCA DTCOM
	TAD DTJOB
	JMS DTRKER	/REPORT THE ERROR & SCHEDULE LEVEL 2
	DTL20
	JMP I .+1	/BACK THROUGH THE TIMER CODE
	DTIMEX

FCE1=	.+1&7770
DTRKER,	0
	CIF CDF
	JMS I DTRKHA	/REPORT THE HUNG DEVICE
	TAD I DTRKER	/GET THE L2 DISPATCH ADDRESS
	ISZ DTRKER	/BUMP PAST THE ARG.
	CIF CDF
	JMS I QUEUE1	/PUT IT ON LEVEL 2 QUEUE
	JMP I DTRKER

/*UUDTRK	/UUO ENTRY FOR DECTAPE & RK05
UUDTRK,	DCA TEMP2
	TAD I L2SAP	/GET USER AC
	DCA TEMP1
	SNL		/DON'T CLEAR THE AC IF ITS AN RK05 REQUEST
	DCA I L2SAP	/CLEAR HIS AC
	TAD I UDFP	/GET THE "CDF" FOR HIS FIELD
	DCA UDF1+1
	JMS UDF1	/CHANGE TO USER FIELD
	TAD I TEMP1	/GET WORD 1 OF HIS PARAMETERS
	SZL		/RK05?
	JMP URK05	/YES
	RTL
	RTL
	AND K0007	/AC=UNIT NUMBER
UDTXAD,	TAD DTDEVA	/INDEX INTO THE DEVICE TABLE
	DCA UDTDDB
	DATFLD
	CIF		/FIELD 0 ROUTINE
	JMS I DTCHKA	/SEE IF HE OWNS THIS UNIT
UDTDDB,	0
	STA
	TAD TEMP1
	DCA A16
	TAD I UDTDDB
	TAD K0003	/SET-UP TO MOVE PARAMETERS
	DCA A17
	CLL CMA RTL	/L=1; AC=-3
	JMS I BLTF1A	/MOVE 3 WORDS FROM UDF TO DATFLD
	TAD I UDTDDB
	TAD TEMP2
	JMS I WAIT2	/SET WAIT 2 CONDITION FOR DECTAPE OR RK05
	TAD TEMP2
	CLL RTR
	SZL CLA		/RK05?
	JMP RK05GO	/YES
	JMS I DTGOA	/NO - TRY TO START THE DECTAPE
	WAITF1

URK05,	CLL RAR
	AND K0003	/RK05 UNIT #
	TAD K0010	/DISPLACE TO RK05 DDB'S
	JMP UDTXAD
DTDEVA,	DEVTBE+20

/SEARCH FOR A JOG WAITING FOR A "WAIT 2" CONDITION
/CALLING SEQUENCE:
/	AC=0 COMPLETE PASS; AC NON-ZERO FINISH CURRENT PASS
/	JMS DTRKJB
/	MINUS WAIT CONDITION NUMBER
/	RETURN - NO JOBS FOUND
/	RETURN - CONTENTS OF WAIT 2 IN AC

DTRKJB,	0
	SZA CLA		/DO WE WANT A FULL PASS?
	JMP DTRK2	/NO - JUST COMPLETE FROM WHERE WE LEFT OFF
	TAD JOBCNT
	DCA TEMP1	/SET COUNT FOR JOBMAX
DTRK1,	TAD IX4		/CHECK POSITION OF RING POINTER
	TAD DTRKEN
	SZA CLA
	JMP .+3
	TAD JOBTAB	/RESET RING POINTER
	DCA IX4
	TAD I IX4
	SNA		/IS THIS JOB DEFINED?
	JMP DTRK2	/NO
	TAD K0005	/POINT AT WAIT 2
	DCA TEMP0
	TAD I TEMP0
	AND K0007
	TAD I DTRKJB
	SZA CLA		/IS HE WAITING FOR OUR CONDITION?
	JMP DTRK2	/NOPE
	TAD I TEMP0	/PUT THE CONTENTS OF WAIT 2 IN THE AC
	ISZ DTRKJB	/CAUSE SKIP ON EXIT
	JMP DTRK3
DTRK2,	ISZ TEMP1	/MORE?
	JMP DTRK1
DTRK3,	ISZ DTRKJB	/INDEX PAST ARGUMENT ON RETURN
	JMP I DTRKJB

DTRKEN,	-CLKTBL+1

/MOVE DATA TO/FROM DATFLD FROM/TO USER CORE
/	USER'S POINTER IN "A16"
/	DATFLD POINTER IN "A17"
/CALLING SEQUENCE:
/	AC=-NUMBER OR WORDS; LINK=0 FROM DATFLD TO USER, LINK=1 FROM USER TO DATFLD
/	JMS BLTF1
/	RETURN

BLTF1,	0
	DCA TEMP1	/SAVE NUMBER OF WORDS TO MOVE
BL0,	SNL		/WHICH DIRECTION?
	JMP BL1
	JMS UDF1	/FROM USER
	TAD I A16
	DATFLD		/TO DATFLD
	DCA I A17
	JMP BL2
BL1,	TAD I A17	/FROM DATFLD
	JMS UDF1
	DCA I A16	/TO USER
	DATFLD
BL2,	ISZ TEMP1	/MORE?
	JMP BL0		/YES
	JMP I BLTF1

WAKEUP,	0
	ISZ F1SCH	/SET FLAG TO SCHEDULE THIS USER IMMEDIATELY IF POSSIBLE
	JMS GETTBA	/FIND STR1
	 JOBSTS+1
	CLL STA RAL	/AC=7776
	AND I TEMP0	/CLEAR JSWAIT
	IAC
	DCA I TEMP0	/NOW WE CAN BE SURE THAT IT IS SET
	ISZ TEMP0	/NOW UPDATE THE DEVICE STATUS REGISTER
	TAD I WAKEUP
	DCA I TEMP0	/THE NEW D.S.R.
	ISZ TEMP0
	ISZ I TEMP0	/TURN ON DUMMY WAIT BIT IN WAIT MASK 1
	ISZ TEMP0
	DCA I TEMP0	/TAKE HIM OUT OF WAIT
	ISZ WAKEUP
	JMP I WAKEUP

FCB2=	.+7&7770
RKREDO,	REDO0
RK05GO,	CIF CDF
	TAD RKJOB	/WHO OWNS THE CONTROLLER?
	SZA CLA
	JMP I RKREDO	/HE'LL HAVE TO WAIT
	TAD I JOBA
	DCA RKJOB	/HE OWNS THE CONTROLLER
	DCA I L2SAP	/ZERO AC IN CASE TRANSFER DOESN'T START
	CIF DATFLD
	TAD RKJOB
	JMS GETTBA	/GET WAIT 2
	 JOBWMK+1
	CLL CMA RTL	/AC=-3
	DCA RKERR	/3 TRIES ON ERROR
	DCA RKBLKS	/CLEAR SUCCESSFULL TRANSFER COUNTER
	JMS USRLOK	/LOCK HIM IN HIS FIELD
	DCA RKCORE	/SAVE THE CORTBL POINTER
	TAD I TEMP0	/POINTS TO DDB WORD 4 (-1)
	JMS I RKGOA	/START UP THE RK05 DISC
	SZA CLA
	JMP RKL21	/DIDN'T EVEN GET OFF THE GROUND
	CLL STA RAL
	DCA RKTIME	/SET TIMER FOR 2 SECONDS
	WAITF1

/*RKL21		/LEVEL-2 HANDLER FOR RK05
RKL21,	TAD RKCORE
	SZA CLA		/DO WE HAVE A LEGAL 'CORTBL' POINTER?
	TAD RKJOB
	SNA CLA		/ AND A VALID JOB NUMBER HERE?
		IFNZRO DEBUG <
	REBOOT		/NO - ERROR *****
		>
		IFZERO DEBUG <
	JMP RKEND3
		>
	ION
	CDF
	CLA CLL CMA RTR
	AND I RKCORE
	DCA I RKCORE	/UNLOCK HIS FIELD
	DCA RKCORE
	TAD RKJOB
	JMS GETTBA	/FIND HIS AC
	 JOBREG+2
	TAD RKBLKS
	DCA I TEMP0	/PASS NUMBER OF BLOCKS TRANSFERED BACK TO THE USER
	TAD RKJOB
RKEND2,	JMS I AWAKEN	/TAKE HIM OUT OF WAIT STATUS
RKERR,	0		/ (USED AS ERROR COUNTER & STATUS TO RETURN TO USER)
RKEND3,	DCA RKJOB	/FREE THE CONTROLLER
	JMS I DTRKJA	/LOOK FOR OTHERS WAITING FOR THE CONTROLLER
	 -3
	EXITF1		/NOBODY ELSE WANTS IT
	AND K7770
	DCA IX3
	TAD I IX3	/EXTRACT THE JOB# FROM THE DDB
	JMP RKEND2
RKGOA,	RKGO
FCE2=	.+1&7770

/ROUTINE TO SET WAIT 2 CONDITION FOR THE CURRENT USER
/	(FOR DECTAPE,RK05 OR CARDREADER)
/	ENTER WITH DISIRED WAIT 2 STATUS IN THE AC

WAITS2,	0
	DCA TEMP2
	CDF
	TAD I JOBA	/GET USER JOB NUMBER
	JMS GETTBA
	 JOBWMK
	DCA I TEMP0	/CLEAR WAIT MASK 1
	ISZ TEMP0
	TAD TEMP2	/GET WAIT NUMBER
	DCA I TEMP0	/NOW'S HE'S WAITING
	JMP I WAITS2

/ROUNTINE TO LOCK CURRENT USER IN HIS CORE FIELD
/	RETURNS WITH CORTBL POINTER IN AC
USRLOK,	0
	CDF
	TAD I L2SFP	/POINTER TO LEVEL 2 SAVE FIELD
	AND K0007	/JUST THE FIELD
	TAD CORTBA	/DISPLACEMENT INTO THE CORE TABLE
	DCA TEMP2
	STL RTR		/AC = 2000
	TAD I TEMP2
	DCA I TEMP2	/LOCK IN CORE
	DATFLD
	TAD TEMP2	/NOW RETURN WITH POINTER INTO CORE TAVLE
	JMP I USRLOK
L2SFP,	L2SF

FCB3=	.+7&7770
CDCNT,	0
CDCORE,	0
CDTIMR,	TIMCDR

/*CDL21		/LEVEL-2 HANDLER FOR CARD READER
CDL21,	CLL CMA RTR	/AC=5777
	AND I CDCORE
	DCA I CDCORE	/UNLOCK THE CORE FIELD
	TAD CDJOB
	JMS GETTBA	/FIND HIS AC
	 JOBREG+2
	TAD CDCNT
	DCA I TEMP0	/PUT THE COLUMN COUNT IN HIS AC
	TAD CDJOB
	JMS I AWAKEN	/TAKE HIM OUT OF WAIT STATUS
CDBUF,	0
	EXITF1

/*CDL11		/LEVEL-1 INTERRUPT FOR CARD READER
CDL11,	TAD I CDTIMR
	SNA CLA		/WERE WE EXPECTING A INTERRUPT?
	JMP CDIOT	/NO
	ISZ CDCNT	/COUNT A COLUMN
	ISZ CDBUF	/BUMP THE USER'S POINTER
CDJOB,	0		/JOB OWNING THE CARD READER - (COVERS THE "ISZ SKIP")
CDREAD,	.-.		/THE PROPER READ IOT IS PLACED HERE
CDFLD,	.-.		/CDF TO THE USER'S FIELD
	DCA I CDBUF	/STASH A COLUMN IN THE USER'S BUFFER
	INTRTN
CDIOT,	RCRA		/CLEAR UNWANTED INTERRUPT
	CLA
	INTRTN

/*UUCDR		/UUO ENTRY FOR CARD READER
UUCDR,	CLL RAL		/TIMES 2
	TAD CDIOT	/CONSTRUCT READ IOT
	DCA CDREAD	/EITHER ALPHA, BINARY, OR COMPRESSED (8E ONLY)
	TAD I L2SAP
	DCA CDBUF	/SAVE THE USER'S BUFFER POINTER
	DCA I L2SAP	/CLEAR USER AC - IN CASE THE READER ISN'T READY
	TAD I UDFP
	DCA CDFLD	/SAVE CDF TO USER'S FIELD
	TAD I JOBA
	DCA CDJOB
	DCA CDCNT	/ZERO COLUMN COUNT
	IOF
IFZERO CPU&7776 < JMP .+4 >
IFNZRO CPU&7776 < RCTF >/CLEAR 8E TRANSITION FLAG
	IAC
	RCNO		/ENABLE CARD READER INTERRUPTS
	CLA
	RCSE		/START CARD READER
	JMP UUCDRB	/NOT READY - PUT HIM TO SLEEP BEFORE CONTINUING
	JMS USRLOK	/LOCK HIM IN HIS FIELD
	DCA CDCORE	/SAVE POINTER TO CORTBL
	TAD K0004
	JMS I WAIT2	/MAKE HIM WAIT FOR THE CARD READER
	CIF CDF
	CLL CMA RAL	/AC=-2
	DCA I CDTIMR	/SET CARD READER TIMER
	WAITF1
UUCDRB,	CIF CDF
	JMP I SLEEPB	/PUT HIM TO SLEEP FOR A COUPLE SECONDS
*2000
FCE3=	.&7770

FCB4=	.+7&7770

/*RKL11		/LEVEL-1 INTERRUPT FOR RK05
RKL11,	DRST		/GET CONTROLLER STATUS
	CLL RAL		/IGNORE THE DONE BIT
	SZA
	JMP RKSR1	/ERROR!!!!!
	ISZ RKBLKS	/COUNT A SUCCESSFUL TRANSFER
	TAD RKCMD
	SNA		/ARE WE FINISHED?
	JMP RKSR2	/YES
	DLDC		/LOAD THE NEW COMMAND
	TAD RKSECT
	DLAG		/LOAD THE NEW SECTOR - WE'RE OFF AND RUNNING AGAIN
	JMS RKNXT	/SET-UP FOR THE NEXT BLOCK (IF ANY)
	CLL STA RAL
	DCA RKTIME	/SET CONTROLLER TIMER FOR 2 MORE SECONDS
	CLL STA RTL
	DCA I RKERRA	/THREE ERRORS
	INTRTN

RKSR1,	ISZ I RKERRA
	JMP RKSR4	/STILL OK TO RETRY
	DRST
RKSR2,	DCA I RKERRA	/FINAL STATUS FOR THE USER
	DLDC		/CLEAR CONTROLLER STATUS AND COMMAND REGISTERS
	DCA RKTIME
	TAD RKL2	/SCHEDULE LEVEL 2
	INTRTN
RKSR4,	AND K1012	/SAVE SPECIAL CASE ERROR BITS
	SNA
RKSRE,	JMP RKSR5+1	/DON'T RECALL, OR PUT CURRENT JOB TO SLEEP
	AND K0010
	SZA CLA
	JMP RKSR5	/PUT CURRENT JOB TO SLEEP AND RE-TRY
	IAC
	DCLR		/INCASE WE HAVE SOMETHING REALLY IN TROUBLE
	TAD RKCOM
	AND K0006	/SAVE ONLY THE UNIT #
	TAD K0600	/ENABLE INTERRUPT ON SEEK COMPLETION
	DLDC
	STL RTL
	DCLR		/RE-CALIBRATE
	TAD RKSRE
	DCA RKL11	/CHANGE LEVEL 1
	CLL STA RTL	/ALLOW 3 SECONDS FOR THE RE-CALIBRATE
	DCA RKTIME
	DCLR
	INTRTN

RKSR5,	TAD SLEEPB
	DCA INTS2
	CLL CMA RTL	/AC=-3
	TAD IX3		/POINTER TO DDB WORD 4 (-1)
	JMS RKGO	/RE-TRY
	SNA		/ANYTHING BAD?
	TAD INTS2	/NO - HOW ABOUT PUTTING SOMEONE TO SLEEP?
	INTRTN
K1012,	1012
RKL2,	RKL20
RKFLD,	-CORTBL+51
RKGO,	0
	DCA IX3		/SAVE THE DDB POINTER
	IAC
	DCLR		/CLEAR THE CONTROLLER
	TAD I IX3	/USER WORD 1
	CLL RTR
	RAR
	DCA RKCOM	/SAVE COMMAND DIVIDED BY 10
	TAD RKCOM
	AND K0037	/PAGE COUNT
	SNA
	TAD K0040	/FOR 0 OR 40 GIVE HIM 40
	CMA
	TAD RKBLKS
	TAD RKBLKS	/ADD NUMBER OF PAGES ALREADY TRANSFERED
	DCA RKCNT
	TAD RKCOM
	AND K7400	/SAVE FUNCTION, DRIVE AND HI ORDER SECTOR BIT
	TAD RKCORE	/POINTER TO CORTBL ENTRY
	TAD RKFLD	/EXTRACT FIELD NUMBER AND INSERT INTERRUPT ENABLE AND HALF BLOCK BITS
	CML RTL		/"RKFLD" COMPLEMENTED THE LINK
	RAL
	DCA RKCOM	/SAVE THE CONSTRUCTED COMMAND REGISTER
	TAD RKBLKS	/NUMBER OF SECTORS ALREADY TRANSFERED
	TAD I IX3
	DCA RKSECT	/STARTING SECTOR NUMBER FROM THE USER
	SZL
	ISZ RKCOM	/BUMP HI ORDER BIT
	TAD RKBLKS	/NUMBER OF BLOCKS ALREADY TRANSFERED
	CLL RTR		/TIMES 400
	RTR
	RAR
	TAD I IX3
	IAC		/WE ADD ONE SINCE THE CONTROLLER WANTS THE REAL ADDRESS
	DLCA		/LOAD USER'S CA INTO THE CONTROLLER
	JMS RKCMD	/GENERATE FIRST COMMAND
	IOF
	DLDC		/LOAD CONTROLLER COMMAND REGISTER
	TAD RKSECT
	DLAG		/LOAD IN THE DESIRED SECTOR - WE ARE OFF AND RUNNING
	JMS RKNXT	/SET-UP FOR THE NEXT SECTOR (IF ANY)
	TAD RKDRST
	DCA RKL11	/FIX FIRST WORD OF INTERRUPT SERVICE
	DSKP		/ARE WE TRYING TO DO SOMETHING BAD?

	JMP I RKGO	/NO - EVERYTHING IS PEACHY
RKDRST,	DRST
	DCA I RKERRA	/SAVE ERROR STATUS - NO RE-TRIES WILL BE MADE
	DLDC		/CLEAR CONTROLLER STATUS AND COMMAND REGISTERS
	TAD RKL2	/RETURN WITH L2 DISPATCH
	JMP I RKGO

RKCMD,	0
	ISZ RKCNT
	TAD RKCNT
	SMA CLA		/ANY MORE BLOCKS TO GO
	JMP RKDONE	/NO - CLOSE IT OUT
	ISZ RKCNT	/HALF BLOCK?
	TAD K7700	/NO - REMOVE THE HALF BLOCK BIT FROM THE COMMAND
	TAD RKCOM	/GET THE COMMAND
	JMP I RKCMD

RKNXT,	0
	ISZ RKSECT	/BUMP SECTOR
	TAD RKSECT
	SNA
	ISZ RKCOM	/BUMP HI-ORDER SECTOR BIT
	AND K0037
	SZA CLA		/WILL WE SEEK ON THIS ONE?
	TAD K1000	/NO - DO A READ ALL OR WRITE ALL
	DCA INTS1
	JMS RKCMD	/CHECK FOR HALF BLOCK AND COMPLETION
	TAD INTS1
RKDONE,	DCA RKCMD	/SAVE THE NEW COMMAND REGISTER
	JMP I RKNXT
PAGE
FCE4=	.&7770

IFNZRO DC08A <
T8ASSM,	0
	AND T83770	/THE CHARACTER ONLY
	SNA
	JMP T8ASS1	/IGNORE NULL CHARACTERS
	CLL RTR		/BRING THE CHARACTER INTO POSTION
	RAR
	AND T80177
	TAD K0200	/FORCE ON THE PARITY BIT
	CIF 00		/STASH IT AWAY
	JMS I T8IN1A	/THAT'S DONE IN FIELD 0
	ION
T8ASS1,	CLL STA RTL	/AC=-3
	TAD T8ASSM
	DCA T8T		/POINTS TO THE LSW
	TAD I T8T
	AND T83770	/SAVE ONLY THE LINE NUMBER
	DCA I T8T
	ISZ T8T		/POINTS TO THE CAW
	STL RTR		/AC=2000
	DCA I T8T	/RESET THE FLAG BIT
	TTIR		/BUMP THE "R" REGISTER
	JMP I T8ASSM
T80177,	177
T83770,	3770
T8IN1A,	T8IN1
T8T,	0

T8TTI,	TTI
	DC08LO^10+0	/LSW  LINE # PT08+DC08LO+1
	2000		/CAW
	JMS T8ASSM	/CHARACTER FULLY ASSEMBLED
	TTI
	DC08LO^10+10	/LSW  LINE # PT08+DC08LO+2
	2000		/CAW
	JMS T8ASSM	/CHARACTER FULLY ASSEMBLED
	TTI
	DC08LO^10+20	/LSW  LINE # PT08+DC08LO+3
	2000		/CAW
	JMS T8ASSM	/CHARACTER FULLY ASSEMBLED
	TTI
	DC08LO^10+30	/LSW  LINE # PT08+DC08LO+4
	2000		/CAW
	JMS T8ASSM	/CHARACTER FULLY ASSEMBLED
	TTI
	DC08LO^10+40	/LSW  LINE # PT08+DC08LO+5
	2000		/CAW
	JMS T8ASSM	/CHARACTER FULLY ASSEMBLED
	TTI
	DC08LO^10+50	/LSW  LINE # PT08+DC08LO+6
	2000		/CAW
	JMS T8ASSM	/CHARACTER FULLY ASSEMBLED
	TTI
	DC08LO^10+60	/LSW  LINE # PT08+DC08LO+7
	2000		/CAW
	JMS T8ASSM	/CHARACTER FULLY ASSEMBLED
	TTI
	DC08LO^10+70	/LSW  LINE # PT08+DC08LO+10
	2000		/CAW
	JMS T8ASSM	/CHARACTER FULLY ASSEMBLED
	TTI
	DC08LO^10+100	/LSW  LINE # PT08+DC08LO+11
	2000		/CAW
	JMS T8ASSM	/CHARACTER FULLY ASSEMBLED
	TTI
	DC08LO^10+110	/LSW  LINE # PT08+DC08LO+12
	2000		/CAW
	JMS T8ASSM	/CHARACTER FULLY ASSEMBLED
	TTI
	DC08LO^10+120	/LSW  LINE # PT08+DC08LO+13
	2000		/CAW
	JMS T8ASSM	/CHARACTER FULLY ASSEMBLED
	TTI
	DC08LO^10+130	/LSW  LINE # PT08+DC08LO+14
	2000		/CAW
	JMS T8ASSM	/CHARACTER FULLY ASSEMBLED
	TTI
	DC08LO^10+140	/LSW  LINE # PT08+DC08LO+15
	2000		/CAW
	JMS T8ASSM	/CHARACTER FULLY ASSEMBLED
	TTI
	DC08LO^10+150	/LSW  LINE # PT08+DC08LO+16
	2000		/CAW

	JMS T8ASSM	/CHARACTER FULLY ASSEMBLED
	TTI
	DC08LO^10+160	/LSW  LINE # PT08+DC08LO+17
	2000		/CAW
	JMS T8ASSM	/CHARACTER FULLY ASSEMBLED
	TTI
	DC08LO^10+170	/LSW  LINE # PT08+DC08LO+20
	2000		/CAW
	JMS T8ASSM	/CHARACTER FULLY ASSEMBLED
	TTI
	DC08LO^10+200	/LSW  LINE # PT08+DC08LO+21
	2000		/CAW
	JMS T8ASSM	/CHARACTER FULLY ASSEMBLED
	TTI
	DC08LO^10+210	/LSW  LINE # PT08+DC08LO+22
	2000		/CAW
	JMS T8ASSM	/CHARACTER FULLY ASSEMBLED
	TTI
	DC08LO^10+220	/LSW  LINE # PT08+DC08LO+23
	2000		/CAW
	JMS T8ASSM	/CHARACTER FULLY ASSEMBLED
	TTI
	DC08LO^10+230	/LSW  LINE # PT08+DC08LO+24
	2000		/CAW
	JMS T8ASSM	/CHARACTER FULLY ASSEMBLED
*T8TTI+DC08A+DC08A+DC08A+DC08A
	CIF 00
	JMP I .+1	/BACK TO THE REST OF THE DC08A SERVICE
	T8OUT1


FCB5=	.+7&7770
*2360

FCE5=	.&7770

DFCLS0,	ZBLOCK 4
DFCNO0,	ZBLOCK 4
DFL2S0,	ZBLOCK 4
	-1		/TO END TABLE
DFL2DL=	.
	1-DC08LO+PT08+KL8;11-DC08LO+PT08+KL8
	21-DC08LO+PT08+KL8;31-DC08LO+PT08+KL8


DFRING,	CTG		/CLEAR THE GROUP COUNTER
	TAD K7774
	DCA TEMP0	/COUNTER FOR GROUP SEARCH
DFRNG1,	RRS		/READ RING STATUS
	SZA
	STR		/ACKNOWLEDGE RING(S)
	CLA
	ITG		/INCREMENT THE GROUP COUNTER
	ISZ TEMP0	/LOOKED AT ALL LINES?
	JMP DFRNG1	/NO, KEEP LOOKING
	STA
	IOF
	DCA I .+2	/DATA FLD=0 HERE, I HOPE, RESET COUNTER
	EXITF1
	D6FLAG

DFCLSI,	0
DFCNWI,	0
DFCLST,	DFCLS0
DFCNOW,	DFCNO0
DFCNTR,	0
DFCSET,	0
	TAD DFCLST
	DCA DFCLSI	/POINTER TO STATUS AT LAST INTERRUPT
	TAD DFCNOW
	DCA DFCNWI	/POINTER TO STATUS AT THIS INTERRUPT
	TAD K7774
	DCA DFCNTR	/COUNTER FOR COMPARISONS
	CTG		/CLEAR GROUP COUNTER
	JMP I DFCSET

DFCARR,	JMS DFCSET	/INITIALIZE STATUS
DFCAR1,	RCS		/READ CARRIER STATUS
	DCA I DFCNWI	/PLACE ON TABLE
	ISZ DFCNWI
	ITG		/INCREMENT THE GROUP COUNTER
	ISZ DFCNTR	/READ ALL FOUR GROUPS?
	JMP DFCAR1	/NO, READ NEXT
	JMS DFCSET
	TAD DFL2ST
	DCA DFL2SI
DFCAR2,	TAD I DFCNWI
	CMA
	AND I DFCLSI
	SZA		/ANY LINES CLEAR?
	JMP DFCAR3	/YES, ACKNOWLEDGE
DFCAR5,	TAD I DFCLSI
	CMA
	AND I DFCNWI
	SZA
	JMS DFCAR6
	ISZ DFCLSI
	ISZ DFCNWI
	ISZ DFL2SI
	ITG		/INCREMENT THE GROUP COUNTER
	ISZ DFCNTR	/ALL LINES CHECKED?
	JMP DFCAR2	/NO
	JMS DFCSET
DFCAR4,	TAD I DFCNWI	/TRANSFER THIS STATUS TABLE TO LAST
	DCA I DFCLSI
	ISZ DFCNWI
	ISZ DFCLSI
	ISZ DFCNTR
	JMP DFCAR4
	JMP DFL200

DFCAR3,	CTR		/CLEAR TERMINAL READY
	JMS DFCAR6
	JMP DFCAR5	/LOOK AT OTHER GROUPS

DFCAR6,	0
	DCA TEMP4	/BIT TO SET
	TAD TEMP4
	CMA
	AND I DFL2SI
	TAD TEMP4
	DCA I DFL2SI
	JMP I DFCAR6

DFL200,	TAD DFL2ST	/INITIALIZE PSEUDO GROUP CTR
	DCA DFL2SG

DFL22,	TAD K7770	/EIGHT PHONES
	DCA TEMP0
	IAC
	DCA TEMP1	/SELECT EACH LINE I GROUP

DFL21,	TAD I DFL2SG
	SNA
	JMP DFL23
	SPA
	EXITF1
	AND TEMP1
	SZA CLA
	JMP DFL25

DFL26,	TAD TEMP1
	CLL RAL
	DCA TEMP1
	ISZ TEMP0
	JMP DFL21
DFL23,	DCA I DFL2SG
	ISZ DFL2SG
	JMP DFL22

DFGBLK,	GETB
DFL25,	TAD DFL2SG
	TAD DFL2C
	DCA TEMP2
	TAD I TEMP2
	TAD TEMP0
	TAD K0010
	CLL RAL
	TAD DFVTBA
	DCA TEMP3
	TAD I TEMP3
	SZA CLA
	JMP .+5		/YES
	TAD TEMP3
	CIF
	JMS I DFGBLK
	JMP DFL26
	TAD TEMP3
	CIF CDF
	JMS I DFUMES
	JMP DFL26

DFL2SG,	0
DFL2C,	DFL2DL-DFL2S0
DFVTBA=	DEVTBA
DFL2SI,	0
DFL2ST,	DFL2S0
DFUMES,	UHLTMS
	>

	PAGE

/*TIMER0	/FIELD 1 TIMER ROUTINE
/ROUTINE TO DECREMENT TIMERS
/THEY ARE BUMPED ONCE EACH SECOND
/THUS A USER CAN MEASURE UP TO 4096 SECONDS

TIMER0,	0
	JMP DISPLA
		IFZERO DEBUG&4000 <
	*.-1
	NOP		/REPLACE THIS NOP WITH 'JMP DISPLA' TO ENABLE IT
		>
TIMER4,	ISZ TIMBIG	/HAVE WE GONE THROUGH A SECOND YET?
	JMP F0TIMT	/NO - FINISH ANY FIELD 0 TIMERS MISSED BEFORE
	TAD TICSEC	/REFRESH SECOND TIMER
	DCA TIMBIG
	TAD JOBCNT
	DCA TIMET1
	TAD TIMTB1	/START OF CLKTBL
	DCA TIMET2
TIMER1,	DATFLD
	TAD I TIMET2
	SZA CLA		/IS THIS TIMER RUNNING?
	ISZ I TIMET2	/YES - DECREMENT IT
	JMP TIMER2
	TAD TIMEJM	/IT RAN OUT - SET TIMER FLAG
	TAD TIMET1
	JMS GETTBA	/GET PTR TO STATUS 1
	 JOBSTS+1
	TAD TEMP0
	SNA CLA		/DOES THE JOB STILL EXIST?
	REBOOT		/NO - 'CLKTBL' ENTRY NOT CLEARED, SO ERROR *****
	TAD I TEMP0	/YES, SET JSTIME IN STR1
	RAL
	STL RAR
	DCA I TEMP0
TIMER2,	ISZ TIMET2
	ISZ TIMET1
	JMP TIMER1
	ISZ UPTIM1	/INDEX LOW ORDER UPTIME
	SKP
	ISZ UPTIM2	/INDEX HI ORDER UPTIME
	NOP

	IFZERO TC01	<JMP .+3>
	IFNZRO TC01	<CLA CMA>
	DCA TEMP2	/ENABLE TRANSFER BACK TO DECTAPE CONTROLLER WAIT
	JMS I TIMEDT	/ AND RUN THE DECTAPE TIMERS

	IFZERO RK05	<JMP TIMER3>
	IFNZRO RK05	<CIF DATFLD>	/SUPPRESS INTERRUPTS MOMENTARILY
	TAD RKTIME
	SZA CLA		/ANYTHINGACTIVE THERE?
	ISZ RKTIME	/YES - DECREMENT IT
	JMP TIMER3	/NOTHING TO COMPLAIN ABOUT YET
	CLA IAC
	DCLR		/WHOOPS! STOP WHATEVER IS GOING ON
	CLA CMA
	DCA I RKERRA	/ AND INDICATE THE RK05 TRANSFER FAILED
	TAD RKJOB
	JMS I RKHUNG	/THEN REPORT THE ERROR
	 RKL20

TIMER3,
	IFZERO CPU-2 <
	JMS I TIMKFX	/FIX ROUTINE FOR KL8E BUG
	>
F0TIMR,	TAD TIMER0
	DCA TIMIT	/SET THE FIELD 0 COUNTERS POINTER
F0TIMS,	CDF
	IOF
	TAD I TIMIT
	SZA CLA		/IS THIS TIMER ACTIVE?
	ISZ I TIMIT	/YES - IS IT TIME YET?
	JMP F0TIMT	/NO
	ION
	ISZ TIMIT
	TAD I TIMIT	/YES - GET THE LEVEL-2 DISPATCH ADDRESS
	CDI
	JMS I QUEUE1	/ AND QUEUE
	ISZ TIMIT
	JMP TIMOUT	/ONLY ONE FOR NOW (AVOID L2Q OVERFLOW)
F0TIMT,	ION
	ISZ TIMIT
	ISZ TIMIT
	TAD TIMIT
	CIA
	TAD TIME3A
	SMA SZA CLA	/REACHED END OF LIST?
	JMP F0TIMS	/NO - KEEP CHECKING
TIMOUT,	CIF CDF		/BACK TO FIELD 0
	JMP I TIME3A	/RETURN

RKHUNG,	DTRKER
TICSEC,	-TICSPS		/STARTING VALUE OF TIMEBIG
TIMBIG,	-TICSPS		/ACTIVE COUNTER
TIMEDT,	DTIMER
TIMEJM,	JOBMAX+1
TIME3A,	L2TIM3
TIMET1=	TEMP4
TIMET2=	TEMP2
TIMIT,	L2TIM3
TIMTB1,	CLKTBL+1
	IFZERO CPU-2 <
TIMKFX,	FXPT08
	>

/ROUTINE TO DUMP VALUE OF ONE CORE CELL INTO MQ 
/RUNS AT EACH SYSTEM TICK
/TO USE, SET THE DESIRED CORE ADDRESS IN THE SWITCH REGISTER
/TO SELECT FIELDS, CLEAR TO SR TO 0, AND SET THE DESIRED
/FIELD IN THE LOW ORDER BITS OF THE SR.

/THIS MEANS THAT YOU CANNOT ADDRESS LOCATIONS 0,1,2,OR 3
/BY THE SR.  WHEN DOING A FIELD SELECT, LOCATION 1
/OF THE SELECTED FIELD IS AUTOMATICALLY CHOSEN

/IF THIS ROUTINE IS RUNNING, THE EAE IS NOT MUCH USE
/TO USER PROGRAMS.  SORRY ABOUT THAT.

DISPLA,	LAS		/GET ADDRESS FROM SR
	AND C7774	/TRYING A FIELD SELECT?
	SNA
	JMP DISPL1	/YES, GO CHANGE THE FIELD
	LAS		/NO; WHAT WAS THAT ADDRESS AGAIN
	DCA TEMP0
DISFLD,	CDF		/ASSUME FIELD 0 TO START
	TAD I TEMP0	/PICK UP CONTENTS OF SPECIFIED ADDRESS
	MQL		/DUMP IT IN THE MQ
	JMP TIMER4	/BACK TO MORE IMPORTANT THINGS

DISPL1,	LAS		/WHAT WAS THAT FIELD AGAIN?
	CLL RAL
	RTL
	TAD K6201	/BUILD THE FIELD SELECT
	DCA DISFLD
	IAC		/LOOK AT LOCATION 1 OF CHOSEN FIELD
	JMP DISFLD-1	/NOW GO LOOK

C7774,	7774

	IFZERO CPU-2 <
/
/ROUTINE TO FIX LOCK-OUT PROBLEM OF KL8E BOARDS.
/WE JUST RE-ENABLE THE INTERRUPT FOR EACH TERMINAL
/ONCE A SECOND.
/
KE=	6005	/'KIE' - KEYBOARD INTERRUPT ENABLE

FXPT08,	0
	CLA CLL IAC	/SET BIT 11 FOR THE KIE
FXP1,	KE+030		/RE-ENABLE K00
	KE+400
	KE+420		/K02
	KE+440
	KE+460		/K04
	KE+340
	KE+110		/K06
	KE+300
	KE+320		/K10
	KE+500
	KE+520		/K12
	KE+540
	KE+560		/K14
	KE+700
	KE+360		/K16
	KE+720
	KE+060		/K20
	KE+140
	KE+160		/K22
	KE+050		/K23
	*FXP1+KL8+1
	CLA
	JMP I FXPT08	/ AND RETURN
	>

	PAGE
	IFNZRO D689-4 <	IFNZRO CPU-3 <
	IFZERO TC01-1 <	IFZERO TD8E <
///	TSS/8 CRASH-DUMP BOOTSTRAP LOADER
/IT SAVES THE FIRST 1000 WORDS OF TS8II IN THE
/DISC COPY OF TS8II, STARTING AT DISC LOCATION
/47000; IT THEN READS THE MAIN PART OF THE CRASH-
/DUMP PROGRAM FROM DISC LOCATION 46000 (IN TS8II)
/INTO CORE, STARTING AT LOCATION 0.
/
CBOOT,	CLA CLL
	IOF		/JUST TO BE SURE
	CDF		/FOR DISC CTRL
	TAD CRFLD

	IFZERO RF08 <
	DIML		/SET THE CORE FIELD
	CLA CLL IAC RTL
	DXAL		/DISC EXT = 4
	>
	IFZERO RF08-40 <
	DEAL		/SET THE TRACK & THE FIELD
	CLA
	>
	TAD CR6605
	JMS CRDISC	/SAVE PART OF TS8II
	TAD CR6603	/ (LINK=1 HERE)
	JMS CRDISC	/GET REST OF CRASHDUMP
	CIF+10		/GET TO TS8II FIELD
	JMP I .+1	/ & START THE DUMP
	CDUMP
/
/SUBROUTINE TO DO THE DISC I/O
CRDISC,	0
	DCA CRIOT	/SET THE IOT
	CLA CMA
	DCA I CR7751	/SET ADDR-1
	TAD CR7000
	DCA I CR7750	/SET -(WORD-COUNT)
	CML IAC RTR	/AC=7000 OR 6000,
	CML IAC RAR	/ DEPENDING ON LINK
CRIOT,	HLT		/ (ACTUAL IOT)

	IFZERO RF08 <
	DFSC DFSE	/NOW WAIT FOR A SIGN
	>
	IFZERO RF08-40 <
	DFSC		/WAIT FOR ANY DF32 INTERRUPTS
	>
	JMP .-1
	DFSE		/ANY ERRORS?

	IFZERO RF08-40 <
	SKP		/ (SENSE OF DF32 CHECK IS REVERSED)
	>
	JMP I CRDISC	/NO - RETURN
	TAD CRIOT	/YES - RESET THE LINK
	RTR		/ (FUDGE)
	JMP CRDISC+2	/ & TRY IT AGAIN
/
	IFZERO RF08 <
CRFLD,	10	/FIELD OF TS8II
	>
	IFZERO RF08-40 <
CRFLD,	410	/TRACK & RESIDENT FIELD OF TS8II
	>
CR6603,	6603
CR6605,	6605
CR7000,	7000
CR7750,	7750
CR7751,	7751
	>>>>
	IFNZRO .&177	<HLT>

/*UPEEK1	/FIELD 1 PEEK IOT CODE
/
UPEEK1,	CLA CMA
	TAD I L2SAP	/GET THE USER'S PACKET
	DCA A16
	TAD I UDFP
	DCA UDF1+1	/SET THE USER-FIELD SELECT
	JMS UDF1
	TAD I A16
	AND K0070	/MAYBE CHANGE TO 'K0010'
	TAD K6201
	DCA UPEEK2	/SET DESIRED FIELD SELECT
	CLA CMA
	TAD I A16	/GET MONITOR ADDRESS
	DCA A17
	CLA CMA
	TAD I A16	/ AND THE USER BUFFER ADDRESS
	DCA UPEEKP
	TAD I A16	/ AND THE WORD-COUNT
	DCA UPEEKC
	TAD UPEEKP
	DCA A16
UPEEK2,	 HLT		/CDF TO MONITOR FIELD
	TAD I A17
	JMS UDF1
	DCA I A16	/STORE WORD IN USER'S BUFFER
	ISZ UPEEKC
	JMP .-5
	CIF CDF
	DCA I L2SAP	/ZERO HIS AC
	JMP I .+1	/ AND EXIT
	UUOEX1

UPEEKC=	TEMP1
UPEEKP=	TEMP2


/FIELD 1 ROUTINE TO HANDLE THE AUTO-RESTART CRASH.

RBOOT1,	0
	IOF
	CLA
	TAD RBOOT1
	CIF
	JMP I .+1	/OFF TO THE AUTO-RESTART CODE
	RELOAD

/
/*F1DTST	/DECTAPE STOP ROUTINE
/ROUTINE TO STOP ANY DECTAPE ACTIVITY FOR A JOB FOR ^C OR ^BS.
/CALL:	TAD JOB #
/	CDF CURRENT
/	CIF 10
/	JMS F1DTST
/	..RETURN IS WITH 'DATFLD' SET

F1DTST,	0
	DCA DTSJOB
	RDF
	TAD K6202
	DCA DTSEXT	/SET THE RETURN FIELD
	TAD DTSJOB
	JMS GETTBA	/GET THE DEVICE-WAIT STATUS
	 JOBDWT
	TAD I TEMP0
	AND K0007
	TAD K7776
	SNA		/IS HE ON DECTAPE TIMER?
	JMP DTSTP1	/YES
	IAC
	SZA CLA		/NO - IS HE USING THE DRIVE AT ALL?
	JMP DTSEXT	/NO - JUST RETURN
	TAD DTSJOB
	CIA
	TAD DTJOB
	SNA CLA		/IS THE JOB ON THE CONTROLLER NOW?
	JMP DTSEXT	/YES - DON'T TRY ANYTHING
	JMP DTSTP2	/NO - CLEAR HIS REGISTERS
DTSTP1,	TAD I TEMP0
	TAD K0005
	DCA TEMP0	/SET POINTER TO THE TIMER WORD
	CLA CMA
	DCA I TEMP0	/SET THE TIMER TO EXPIRE IMMEDIATELY
	CLA CMA
	TAD DTSJOB
	TAD JOBTAB
	DCA IX4		/SET THE POINTER FOR 'DTIMER'
	CLA CLL CMA RAL
	DCA TEMP1	/STOP ONLY ONE JOB'S TIMER
	DCA TEMP2	/ AND PREVENT HIM FROM GOING BACK ON WAIT
	CLA IAC
	JMS I DTSTIM	/STOP THE DRIVE
DTSTP2,	TAD DTSJOB
	JMS I AWAKEN	/CLEAR HIS DEVICE-WAIT AND SET THE STATUS
	 -1
	DCA F1SCH	/ (DON'T NEED THE SCHEDULING FLAG)
DTSEXT,	 .-.
	JMP I F1DTST
/
DTSJOB,	0
DTSTIM,	DTIMER
K7776,	-2

DEVDMB=	JOBTBL-2		/DUMMY POINTER FOR NONEXISTENT DEVICES

	IFNZRO DEVTBL-1-.&4000	<GLITCH>
	*DEVTBL-1
	DEVDMB			/DUMMY ENTRY USED BY FIP RELEASE
DEVTBL,	ZBLOCK DEVTBE-DEVTBL	/CLEAR ALL THE TERMINAL ENTRIES
	0			/FIELD SERVICES NEEDS H.S.R. FOR THEIR PMK01
	IFZERO PUNCH	<DEVDMB>
	IFNZRO PUNCH	<0>
			DEVDMB	/DEVICE 2 NOT USED FOR NOW
	IFZERO LPT	<DEVDMB>
	IFNZRO LPT	<0>
	IFZERO CDR	<DEVDMB>
	IFNZRO CDR	<0>
			DEVDMB	/P2 - 4005
			DEVDMB	/R2 - 4006
			DEVDMB	/L2 - 4007
			DEVDMB	/X0 - 4010
			DEVDMB	/Y0 - 4011
			DEVDMB	/X1 - 4012
			DEVDMB	/Y1 - 4013
			DEVDMB	/X2 - 4014
			DEVDMB	/Y2 - 4015
			DEVDMB	/X3 - 4016
			DEVDMB	/Y3 - 4017
	IFZERO TC01	<DEVDMB
			DEVDMB
			DEVDMB
			DEVDMB
			DEVDMB
			DEVDMB
			DEVDMB
			DEVDMB>
	IFNZRO TC01	<ZBLOCK 10>	/4020 - 4027
	IFNZRO RK05	<ZBLOCK RK05>	/4030 - 4033
	IFNZRO .-JOBTBL+1 <DEVDMB>
	IFNZRO .-JOBTBL+1 <DEVDMB>
	IFNZRO .-JOBTBL+1 <DEVDMB>
	IFNZRO .-JOBTBL+1 <DEVDMB>
	-1			/TERMINATOR
JOBTBL,	0

/THE REMAINING CONTROL TABLES ARE CLEARED DURING START-UP.

		IFZERO DEBUG&7-3&4000 <
		IFZERO CDR <
	*1710
/*RETCHK	/RETB CHECKER
RETCHK,	0
	DCA RCBLK
	TAD RCBLK
	AND K0007
	SZA CLA		/GOOD ADDRESS?
	REBOOT		/NO
	TAD RCBLK
	AND K7400
	SNA CLA
	REBOOT		/NO
	CDF
	TAD I RCFREE
	DATFLD
RETC1,	DCA RCPTR
	TAD RCPTR
	CIA
	TAD RCBLK
	SNA CLA		/WAS THE BLOCK RELEASED PREVIOUSLY?
	REBOOT		/YES ******
	TAD I RCPTR
	SZA		/END OF FREE LIST?
	JMP RETC1	/NOT YET
	ISZ RETCHK	/YES - SKIP THE CALL ADDRESS
	CLA IAC
	TAD RCSAVE
	AND K0017
	TAD RCBASE
	DCA RCSAVE	/NOW POINTS TO NEW RING ELEMENT
	CDF
	TAD I RETBA	/GET THE RETURN ADDRESS OF THE RELEASE
	DATFLD
	DCA I RCSAVE	/SAVE IT IN THE RING BUFFER
	ISZ RCSAVE
	TAD RCBLK
	DCA I RCSAVE	/ ALONG WITH THE BLOCK ADDRESS
	CIF
	JMP I RETCHK	/THEN RETURN
/
K0017,	17
RCFREE,	FREE
RCBLK,	0
RCPTR,	0
RCBASE,	2360	/BE SURE THIS PART OF FIELD 1 IS FREE
RCSAVE,	2361
RETBA,	RETB
		>>

	IFNZRO D689-4 <
	IFZERO TC01-1 <
	IFZERO TD8E <
	IFNZRO CPU-3 <
///	TSS/8 DECTAPE CRASH-DUMP
/THIS IS LOADED FROM DISC BY THE CRASH-DUMP
/BOOTSTRAP LOADER. IT ASSUMES A FORMATTED
/DECTAPE IS MOUNTED ON UNIT 0. WHEN THE DUMP
/IS FINISHED, TSS/8 INIT IS LOADED & STARTED.
/
	*6000
	NOPUNCH
	*0
	ENPUNCH
/
QAX0=	10
QWS0=	20	/SCRATCH STORAGE
QWS1=	21
QWS2=	22
QWS3=	23
QWS4=	24
QWS5=	25
QWS6=	26
QWS7=	27
QWBLK=	30
QWFLD=	31
QRTRK=	32	/EXTENDED DISC ADDRESS
QRADR=	33	/DISC ADDRESS
/
	*6000+QRADR+1
	NOPUNCH
	*QRADR+1
	ENPUNCH
WTAPE=	JMS I .		/DECTAPE WRITE
	WTENT
RDISC=	JMS I .		/DISC READ
	RDENT
SPEAK=	JMS I .		/MESSAGE TYPING
	SPENT
/
	IFDEF CBOOTA <
	*6000+CBOOTA
	NOPUNCH
	*CBOOTA
	ENPUNCH
CBOOTA,	CDUMP	/TO OVERLAY IN CASE RESTARTED AT 'CRASH'
	>

	*6200
	NOPUNCH
	*200
	ENPUNCH

///	BEGIN CRASH-DUMP
CDUMP,	CLA CLL
	IOF
	TAD QK600
	DTCA DTXA	/REWIND THE DECTAPE
	DCA QWBLK	/FIRST DT BLOCK IS ZERO
	CLA CMA
	DCA QWS2	/SET CORE-1
	TAD QK10	/SET MEMORY FIELD
	DCA QWFLD
	CLA CMA
	DCA QWS3	/SET -(# BLOCKS)
	WTAPE		/WRITE OUT BLOCK ZERO
	TAD QM40	
	DCA QWS3	/SET BLK COUNT FOR 1 FLD
	DCA QWFLD	/SET MEM FLD TO ZERO
	CLA CMA
	DCA QWS2	/ & CORE ADDR - 1
	WTAPE		/ AND WRITE OUT FIELD ZERO
	TAD QDADR
	DCA QRADR	/SET SAVED DATA ADDRESS
	TAD QDTRK
	DCA QRTRK
	RDISC		/GET THE SAVED TS8II PIECE
	TAD QF1
	DCA QWBLK	/SET TS8II BLOCK NUMBER
	TAD QM4
	DCA QWS3	/SET -(# BLOCKS TO WRITE)
	WTAPE		/WRITE OUT THE SAVED DATA
	TAD QK10
	DCA QWFLD	/SET MEMORY FIELD
	TAD QM34
	DCA QWS3	/# BLOCKS FOR REST OF TS8II
/
/NOW WRITE OUT EACH REMAINING MEMORY FIELD.
QMEMD,	WTAPE
	TAD QWFLD
	TAD QK10	/UPDATE THE FIELD
	DCA QWFLD	/ NUMBER
	TAD QM40
	DCA QWS3	/RESET BLOCK COUNT
	TAD QWFLD
	TAD QXFLD	/ARE WE PAST THE END
	SPA CLA		/ OF THE REQUIRED CORE?
	JMP QMEMD	/NO - CONTINUE
/
/NOW, USING FLD 2 FOR SCRATCH, READ A 4K BLOCK FROM
/DISC AND WRITE IT TO DECTAPE.
	TAD QK20
	DCA QWFLD	/SET THE FIELD
	TAD QM37
	TAD QWBLK	/SET QWS6 TO THE FIRST
	DCA QWS6	/ BLOCK OF THE LAST FLD
	DCA QRADR	/CLEAR DISC ADDRESS
	DCA QRTRK
	TAD QXTBK
	DCA QWS7	/SET 4K BLOCK-COUNTER
/
QDSCD,	JMS QADVB	/LEAVE ROOM BETWEEN BLOCKS
	RDISC		/GET A 4K BLOCK
	WTAPE		/ & WRITE IT OUT
	ISZ QRTRK	/INCRE. THE TRACK ADDR.
	ISZ QWS7	/ARE WE DONE?
	JMP QDSCD	/NO - CONTINUE
	DTCA DTXA	/STOP THE TAPE
	CLA CLL CML RTL
	DCA QRTRK	/SET FOR TRACK 2
	TAD QCORM
	DCA QWFLD	/ & PROPER FIELD
	RDISC		/THEN READ 'INIT'
	CIF CDF INFLD
	JMP I .+1	/ & START UP TSS/8
	4200
/
/SUBROUTINE TO ADJUST THE BLOCK ADDRESS TO ALLOW
/ROOM FOR THE TAPE TO STOP & START.
QADVB,	0
	CLA
	TAD QWS6	/GET LAST STARTING BLOCK
	TAD QSKIP	/ ADD THE SKIP COUNT
	DCA QWBLK	/ & SAVE IT
	TAD QWBLK
	DCA QWS6
	TAD QM40	/ALSO, RESET THE BLOCK
	DCA QWS3	/ COUNT
	JMP I QADVB	/THEN RETURN
/
QCORM,	INFLD
QDADR,	7000	/DISC ADDR. OF TS8II PIECE
QDTRK,	4
QF1,	44	/BLOCK NUMBER FOR TS8II
QK10,	10
QK20,	20
QK600,	600
QM4,	-4
QM34,	-34
QM37,	-37
QM40,	-40
QSKIP,	50	/INTER-BLOCK GAP + BLOCK-SIZE
QXFLD,	-40	/DUMP FIELDS 0 - 3
QXTBK,	-SWDEX-JOBMAX	/ -(# OF DISC TRACKS TO DUMP)

	*6400
	NOPUNCH
	*400
	ENPUNCH
/
/DECTAPE WRITE SUBROUTINE - DUMPS ALL OR PART OF
/A MEMORY FIELD ONTO DECTAPE
WTENT,	0
	CDF		/FOR DT CTRL/WORDS
WTX1,	CLA CLL CMA RTL
	DCA QWS0	/SET -(ERROR LIMIT)
	CLA CLL CMA RTL
	DCA WX		/SET -(MAX REVERSALS)
	DTRA
	AND QK7174
	DTXA		/CLEAR STATUS REG 'A'
	DTLB		/ & CLEAR FIELD BITS
	TAD WTWC
	DCA I WTCA
	DTRA
	TAD QK210	/ESTABLISH SEARCH GO MODE
	AND QK210
	JMP WTX4
WTX3,	SNL		/CHANGE DIRECTION?
	JMP WTX5	/YES
WTX4,	JMS WTOPR
	DTRA
	RTL
	RTL
	SZL CLA		/GOING FORWARD?
	TAD QK2		/NO - ALLOW FOR SLIP
	TAD I WTWC	/GET THE LAST BLOCK SEEN
	CMA
	TAD QWBLK	/ & COMPARE TO THE BLK WE WANT
	CMA
	SZA CLA		/ARE WE THERE?
	JMP WTX3	/NO - CONTINUE SEARCH
	SZL		/GOING FORWARD?
	JMP WTX5	/NO - CHANGE TO FORWARD
	TAD QWFLD	/SET THE FIELD BITS
	DTLB
	TAD QM200
	DCA I WTWC	/ & SET FOR 200 WORDS
	TAD QWS2
	DCA I WTCA	/ & SET CORE ADDR - 1
	TAD QK50
	JMS WTOPR	/THEN DO THE TRANSFER
	TAD QK40
	DTXA
	TAD I WTCA	/GET THE UPDATED CORE ADDR.
	DCA QWS2
	ISZ QWBLK	/UPDATE THE BLOCK-COUNT
	ISZ QWS3	/ARE WE DONE?
	JMP WTX1	/NO - DO ANOTHER BLOCK
	JMP I WTENT	/YES - RETURN
/
/HERE WE REVERSE THE TAPE DIRECTION AND CHECK TO
/SEE IF WE HAVE DONE MORE THAN A REASONABLE NUMBER
/OF REVERSES.
WTX5,	TAD QK400
	ISZ WX		/INCRE. THE COUNT
	JMP WTX4	/OK - CONTINUE
	JMP WT01	/BAD - PRINT ERROR
/
/SUBROUTINE TO PERFORM A 'DTXA' AND WAIT FOR
/COMPLETION OF THE OPERATION.
WTOPR,	0
	DTXA
	DTSF DTRB
	JMP .-1
	SMA CLA		/ANY ERRORS?
	JMP I WTOPR	/NO - RETURN
	DTRB		/GET THE STATUS AGAIN
	RTL
	RAL
	SPA CLA		/SELECT ERROR?
	JMP WTSELC	/YES
	SZL		/END-ZONE ERROR?
	TAD QK400	/YES - CHANGE TAPE DIRECTION
	DTXA
	ISZ QWS0	/INCRE. ERROR LIMIT
	JMP WTX1+2	/ & TRY IT AGAIN
WT01,	SPEAK; WTHELP	/PUSH THE PANIC BUTTON
	JMP I QK200	/RESTART (MAYBE EVEN SUCCEED)
WTSELC,	SPEAK; WTSMS	/SELECT ERROR
	JMP WTX1	/TRY AGAIN
/
WTWC,	7754	/DT WORD COUNT
WTCA,	7755	/DT BUFFER ADDRESS
WX,	-1	/REVERSAL COUNTER
/
/SUBROUTINE TO READ ALL OR PART OF A 4K DISC TRACK.
RDENT,	0
	CLA CLL CMA RTL
	DCA QWS0	/SET -(ERROR LIMIT)
	CDF
RDX1,	CLA CMA
	DCA I RDCA	/SET CORE ADDR - 1
	TAD QRADR
	DCA I RDWC	/USE DISC ADDR. AS COUNT

	IFZERO RF08 <
	TAD QRTRK
	DXAL		/SET DISC EXTENSION
	TAD QWFLD
	DIML		/SET MEMORY FIELD
	>
	IFZERO RF08-40 <
	TAD QRTRK	/GET THE DISC EXTENSION
	CLL RTL; RTL; RTL
	TAD QWFLD	/ & ADD IN THE FIELD SELECT
	DEAL
	CLA
	>
	TAD QRADR
	DMAR		/SET THE ADDR. & READ
	DFSC DFSE	/ & WAIT FOR A FLAG
	JMP .-1
	DFSE		/ANY ERRORS?
	JMP I RDENT	/NOPE - RETURN
	ISZ QWS0	/TOO MANY ERRORS?
	JMP RDX1	/NOPE - TRY AGAIN
	SPEAK; RDHELP	/YES - PRINT A MSG
	JMP I QK200	/THEN TRY A RESTART
/
RDWC,	7750	/DISC WORD COUNT
RDCA,	7751	/DISC BUFFER ADDRESS
/
QK2,	2
QK40,	40
QK50,	50
QK200,	200
QK210,	210
QK400,	400
QK7174,	7174
QM200,	-200

	*6600
	NOPUNCH
	*600
	ENPUNCH
/
/SUBROUTINE TO PRINT A MESSAGE AND WAIT FOR A RESPONSE.
SPENT,	0
	CLA CLL
	DATFLD		/GET TO OUR DATA FIELD
	TAD QK215
	JMS QTOUT	/TYPE <CR>
	TAD QK212
	JMS QTOUT	/ & <LF>
	CLA CMA
	TAD I SPENT	/GET THE MESSAGE ADDR.
	ISZ SPENT
	DCA QAX0
SPRNT,	TAD I QAX0	/GET A CHARACTER
	SNA		/DONE?
	JMP QTX		/YES
	JMS QTOUT	/NO - TYPE THE CHARACTER
	JMP SPRNT	/ & DO IT AGAIN
QTX,	KCC		/CLEAR THE KEYBOARD
	KSF
	JMP .-1
	KRB
	DCA QWS1	/SAVE THE CHAR
	TAD QWS1
	JMS QTOUT	/ & ECHO IT
	TAD QWS1
	TAD QM215
	SZA CLA		/CARRIAGE RETURN?
	JMP QTX		/NO - TRY AGAIN
	TAD QK212
	JMS QTOUT	/YES - TYPE <LF>
	CDF
	JMP I SPENT	/THEN RETURN
/
/SUBROUTINE TO TYPE ONE CHARACTER.
QTOUT,	0
	TLS		/TYPE THE CHAR
	CLA		/ & CLEAR THE AC
	TSF
	JMP .-1
	JMP I QTOUT	/RETURN
/
QK212,	212
QK215,	215
QM215,	-215
/
/CRASH-DUMP ERROR MESSAGES.
RDHELP,	"D;"I;"S;"C;" ;"F;"A;"I;"L;"U;"R;"E;0
WTHELP,	"B;"A;"D;" ;"D;"E;"C;"T;"A;"P;"E;"?;0
WTSMS,	"D;"E;"C;"T;"A;"P;"E;" ;"S;"E;"L;"E;"C;"T;" ;"E;"R;"R;"O;"R;0
	>>>>

/*WINBAS	/BASIC RETRIEVAL WINDOW
	*FIPBLK
FIPBLK,	ZBLOCK 10	/FIP I/O PARAMETER BLOCK
WINBAS,	ZBLOCK -.	/SPECIAL BASIC WINDOW (TO END OF FIELD)
/////	$$$$$
	$$$$$

