/TS8 - UWM VERSION 25
/
/COPYRIGHT 1971, 1975		DIGITAL EQUIPMENT CORPORATION
/				MAYNARD, MASSACHUSETTS
/
/EXTENSIVELY MODIFIED AND CORRECTED BY
/	RICHARD BARTLEIN, 1974, 1976
/	UNIVERSITY OF WISCONSIN - MILWAUKEE

	*1
	JMP I .+1
	IFNZRO INT-200	<GLITCH; *.-1>
C0200,	INT
WS0,	0	/WORKING STORAGE FOR MAIN FLOW
EMPTY,		/BUFFER EMPTY POINTER
WS1,	0
JOBSWA,	0	/POINTER TO JOB STATUS WORDS

	*10
ACX10,	0		/INTERRUPT SERVICE
ACX11,	RINGIN-1	/LEVEL 1 - INPUT RING-BUFFER POINTER
DSPAR,	0		/DISC HANDLER
L2Q,	L2QTB-1		/LEVEL-2 REQUEST QUEUE POINTERS
L2QE,	L2QTB-1	
AXS1,	0		/LEVEL-2 AUTO-INDEX REGISTERS
AXS2,	0	
DSKPTR,	DSUTBL+6	/DISC REQUEST QUEUE POINTER

/*CONDBA	/POINTER TO DEVTBL ENTRY IN USE
/*CONDDB	/POINTER TO DDB IN USE
/*SIDATA	/SI CONTROL WORDS
/*TTCHAR	/CHARACTER FOR FEED ROUTINES
SIDATA,
COMCNT,	0	/NUMBER OF COMMANDS WAITING
COMDSP,	0	/FIP RETURN DISPATCH
COMPTR,	DEVTBL	/POINTER TO LAST DDB CHECKED
SICHAR,	0	/LAST CHARACTER SCANNED
SIFLG,	0	/CURRENT COMMAND STATUS-BITS
SIREG,	0	/SAVED USER PC
	0	/  "   AC
	0	/  "   LINK-WORD (WITH EAE STATUS)
CONDBA,	0	/DEVTBL ENTRY POINTER
CONDDB,	0	/CURRENT DDB POINTER
TTCHAR,	0	/CHARACTER INPUT FOR 'GIR'
/
/*CLK1		/SYSTEM DAYCLOCK (LOW)
/*CLK2		/ (HIGH)
/*DATE
/*DSBUSY	/DISC BUSY COUNT
/*FRECNT	/AVAILABLE FREE-CORE BLOCKS
/*FREE		/LINK TO FIRST FREE-CORE BLOCK
CLK1,	0	/LOW-ORDER SYSTEM CLOCK
CLK2,	0	/ AND HIGH-ORDER
DATE,	0	/ DATE = [(YEAR-1974)*12 + MONTH-1]*31 + DAY-1
DSBUSY,	-1	/DISC ACTIVITY COUNT
FREE,	0	/LINK TO FIRST FREE-CORE BLOCK
FRECNT,	0	/NUMBER OF FREE-CORE BLOCKS AVAILABLE

/*L2SF		/LEVEL 2: SAVED FIELD AND MODE
/*L2SV0		/LEVEL 2: SAVED PC
L2SF,	100	/IF, DF, AND MODE (USER FLAG)
L2SV0,	NULJOB	/SAVED PC
L2SVLK,	0	/SAVED LINK
L2SA,	0	/SAVED ACCUMULATOR

/*FIPJOB	/JOB REQUESTING 'FIP'
/*JOB		/CURRENTLY ACTIVE JOB
BONUS,	0		/JOB # JUST BROKEN OUT OF I/O WAIT
CLOCK,	-1		/NUMBER OF SYSTEM TICKS PENDING (-1)
CNOTR,	-1-NOTRUN
CORTBA,	CORTBL-1	/CORE ALLOCATION TABLE
CURJOB,	0		/JOB INTERRUPTED BY I/O COMPLETION
DEAD,	0		/POSSIBLE DEAD-WOOD JOB
DEVTBA,	DEVTBL		/DEVICE DDB TABLE
DSUTBA,	DSUTBL		/USER DISC REQUEST QUEUE
FANCOR,	CORTBL+1	/FIELD OF PHANTOM (2)
FINISH,	0		/+(IN) OR -(OUT) FIELD OF JOB BEING SWAPPED
FIPJOB,	0		/JOB NOW RUNNING FIP
FIT,	0		/JOB # SCHEDULED
FORCE,	0		/FIELD TO BE SWAPPED OUT
JOB,	0		/NUMBER OF CURRENT JOB
JOBTBA,	JOBTBL		/START OF JOBTBL
JOBTIM,	0		/NUMBER OF TICKS JOB HAS RUN
SCHNEW,	0		/ (-1) TO INDICATE FULL TIME SLICE
SQREQ,	0		/SWAP-REQUEST FLAG

BASWIN,	-WINBAS-1
HSRCNT,	0		/NUMBER OF HSR CHARACTERS TO READ
INTRC,	0		/TRAC # TO BE SWAPPED IN (DF32 0X00 ) ( RF08 000X)
JOBDAT,	CJOBDA		/POINTER TO CURRENT JOB STATUS (F1)
OUTTRC,	0		/TRAC # TO BE SWAPPED OUT
SWPGD2,	SWGOOD
SWPIOA,	SWPIO
/
/CONSTANTS
C0002,	2
C0003,	3
C0004,	4
C0005,	5
C0006,	6
C0007,	7
C0010,	10
C0014,	14
C0020,	20
C0037,	37
C0070,	70
C0100,	100
C0177,	177
	IFNZRO WRDSEG-1-377	<GLITCH; *.-1>
SEGSM1,		/WRDSEG-1
C0377,	377
	IFNZRO WRDSEG-400	<GLITCH; *.-1>
SEGSIZ,		/WRDSEG
C0400,	400
C0600,	600
C0770,	770
C0777,	777
C1000,	1000
C3777,	3777
C6203,	CIF CDF
C7377,	7377
	IFNZRO WRDSEG-400	<GLITCH; *.-1>
SEGLMK,		/-WRDSEG
C7400,	7400
C7600,	7600
C7770,	7770
C7776,	7776
/SUBROUTINE DISPATCHES
BLT=	JMS I .
	BLT0	/BLOCK TRANSFER
BREAK=	JMS I .
	BRKTST	/TEST IF CHARACTER IS A DELIMITER
CLRBUF=	JMS I .
	CLRBF0	/CLEAR A CHARACTER BUFFER
CORE=	JMS I .
	CORSRC	/CORTBL SEARCH
DISMIS=	JMP I .
	DISMI0	/DISMIS INTERRUPTS
DSGO=	JMS I .
	DSGO0	/START DISC REQUEST
ERROR=	JMS I .
	SYSERR	/SYSTEM ERROR
EXIT=	JMP I .
EXITA,	L2EXIT	/LEAVE LEVEL 2
FETCH=	JMS I .
	TOF	/FETCH A BUFFERED CHARACTER
FIUSER,	DSUSER	/QUEUE FILE REQUEST IN DSUTBL
GETBLK=	JMS I .
	GETB	/FETCH A FREE-CORE BLOCK
GETDDB=	JMS I .
	GETDB0	/FETCH A DDB
GETJTA=	JMS I .
	GETJTB	/GET JOB STATUS WORD ADDRESS
GETJTI=	JMS I .
	GETJI0	/GET CONTENT OF JOB STATUS WORD (ANY JOB)
GETJTW=	JMS I .
	GETJW0	/GET CONTENT OF JOB STATUS WORD (CURRENT JOB)
GIR=	JMS I .
	GIR00	/ROUTE CHARACTERS TO JOBS AND TELETYPES
IOR=	JMS I .
	IOR0	/INCLUSIVE OR
PRINT=	JMS I .
	PRINT0	/TYPE OUT A CHARACTER
REBOOT=	JMS I .
	RBOOT	/INITIATE AUTOMATIC SYSTEM RESTART
REDO=	JMP I .
	REDO0	/REPEAT IOT LATER TO (HOPEFULLY) COMPLETE IT
RESJOB=	JMS I .
	RESJO0	/RESTORE THE PREVIOUSLY SAVED STATUS
RETBLK=	JMS I .
	RETB	/RELEASE A FREE-CORE BLOCK
RSCHED=	JMP I .
RSCHEA,	SCHED0	/FIND NEXT JOB TO BE RUN
RUNABL=	JMS I .
	RUNTST	/TEST IF SPECIFIED JOB IS RUNABLE
SAVJOB=	JMS I .
	SAVJO0	/SAVE THE STATUS OF THE CURRENT JOB
SCHED=	JMP I .
	SCHEDI	/SCHEDULE NEXT JOB NOW CORE RESIDENT
SETFLG,	PTSTAR	/SET FLAGS IN JOB'S STR1
START=	JMP I .
	SUJ	/START USER JOB
STORE=	JMS I .
	GIRSC	/STORE A CHARACTER IN BUFFER
TTYUSE=	JMS I .
	TTYSRC	/FIND USER TTY
UUOERA,	UUOERR
UUOEXT=	JMP I .
	UUOEX1	/UUO EXIT
WAIT=	JMP I .
	WSCHED	/SAVE CURRENT JOB AND RESCHEDULE

/*UUDF		/USER FIELD SELECT
UDF=	JMS .	/SELECT FIELD OF CURRENT JOB
WS2,	0
UUDF,	0	/DATA FIELD SELECT FOR FIELD OF CURRENT JOB
	JMP I .-2
/
CONGEA,	CONGET
CONO1A,	CONOU1
CONSEA,	CONSET
	PAGE
/PRIORITY LEVEL 0 (HIGHEST PRIORITY)
/KEEPS TRACK OF REAL TIME
/ALWAYS ENTERED BY CLOCK FLAG
/DISMISSES TO LEVEL 1 IF INTERRUPT WAS NOT FROM LEVEL 1
/OTHERWISE, DISMISSES TO INTERRUPTED LOCATION.
/
INT,	SINT		/USER IOT? (HAS TO BE CHECKED FIRST!!!)

	IFZERO DC08A <
	JMP INT0	/NO - GO CHECK THE REST
	>
	IFZERO D680-2 <
	SKP		/NO - CHECK THE DC08
	>
	JMP I UUOA	/YES, GO SAVE LEVEL 2 STUFF

	IFZERO D680-2 <
	T8SKP		/CLOCK TICK?
	JMP INT0	/NO - KEEP LOOKING
	ISZ CLKCNT	/YES - IS A SYSTEM TICK UP YET?
	JMP I T8DISA	/NO - RUN DC08 INTERRUPT SERVICE
	DCA CLKIT	/YES - SAVE THE AC
	TAD L2TIMA
	DCA I L2Q	/ AND SCHEDULE 'L2TIME'
	TAD CLKIN1
	DCA CLKCNT	/RESET THE TICK COUNTER
	TAD CLKIN2
	DCA CLKIN1	/THEN SWAP COUNTERS SO SYSTEM CLOCK RATE
	TAD CLKCNT	/ IS THE SAME FOR ALL HARDWARE
	DCA CLKIN2
	TAD CLKIT	/GET AC AT INTERRUPT
	JMP I .+1	/RUN DC08 SERVICE
T8DISA,	T8DIS
CLKCNT,	-34
CLKIN1,	-33	/DIVIDE CLOCK RATE BY 27 & 28 SO THE
CLKIN2,	-34	/ EFFECTIVE RATE IS 550/27.5 = 20 TICKS/SEC
	>
/INTERRUPTS OTHER THAN 680 (LEVEL 1)
/DISMISSES TO LEVEL 2 IF NOT FROM LEVEL 1 OR 2.

INTAC,	0		/AC AT LEVEL 1
INTLK,	0		/LINK AT LEVEL 1
UUOA,	UUO0

INT0,	DCA INTAC	/SAVE AC AND LINK
	RTR
	DCA INTLK
	IFZERO DC08A <
	IFNZRO CPU-4	<CSCF>	/SKIP AND CLEAR CLOCK FLAG
	IFZERO CPU-4	<CLSK>	/SKIP ON CLOCK FLAG
	JMP DTINT0
	IFZERO CPU-4	<CLCL>	/CLEAR THE FLAG
		IFZERO CPU-1 <
	CLA CMA		/RESET KW08 CLOCK
	CCF CLB		/CLEAR FLAG AND LOAD BUFFER
	CECI		/ & ENABLE
		>
		IFNZRO CPU-3 <
	ISZ CLKCNT	/IT WAS CLOCK - WAS IT A SYSTEM TIC?
	JMP CLKCHK	/NO - CHECK TO SEE IF WE'RE STILL UP
	TAD CLKINI	/YES - SET FOR NEXT SYSTEM TIC
	DCA CLKCNT
		>
	ISZ CLOCK	/ALREADY HAVE LEVEL-2 SCHEDULED?
	JMP CLKCHK	/YES
	TAD L2TIMA	/SCHEDULE L2TIME ON L2QUE
	JMP DISMI0

	IFZERO CPU-2 <
CLKCNT,	-6	/NUMBER OF CLOCK TICKS/SYSTEM TICK = 6
CLKINI,	-6
	>
	IFNZRO CPU-2&4000 <
CLKCNT,	-3	/# OF CLOCK TICKS/SYSTEM TICK = 3
CLKINI,	-3
	>>

DTINT0,	JMS DTCHK	/CHECK & DISPATCH IF HIGH-SPEED STUFF
	DISMIS		/ (RETURNS HERE IF FLAG FOUND)
	IFZERO RF08-40 <
	DFSE		/DF32 ERROR?
	JMP I DSWAIT	/YES
	DFSC		/DISC COMPLETION?
	JMP I INT2	/NO
	>
	IFZERO RF08 <
	DFSC DFSE	/DISC INTERRUPT?
	JMP I INT2	/NO
	DFSE		/RF08 ERROR?
	>
	ISZ DSWAIT	/NO - EXIT TO HANDLER+1
	JMP I DSWAIT
DSWAIT,	0		/SET BY DISC SERVICE
	IFNZRO CDR <
INT2,	INTCDR
	>
	IFZERO CDR <
INT2,	RINT
	>
L2TIMA,	L2TIME
CLKIT,	0	/TEMPORARY FOR AC

/HUNG-SYSTEM CRASH DETECTOR -- IT'S HIGHLY UNLIKELY THAT
/WE'D HANG WITH INTERRUPT OFF AND THE CLOCK DISABLED;
/SO THIS THING COUNTS DOWN TICKS SINCE THE LEVEL-2
/CODE LAST RAN AND RESTARTS US IF IT'S BEEN TOO LONG.

	IFZERO 240-.&4000 <
CLKCHK,	LAS
	TAD OPCHK
	SNA CLA		/OPERATOR FORCED RESTART?
	REBOOT		/YES
	ISZ CLKMIS	/MISSED TOO MANY TICKS?
	JMP DISMI2
	REBOOT		/YES - RESTART THE SYSTEM
CLKMIS,	-400
OPCHK,	-4321	/TOP SECRET RESTART CODE (SHH!)
	>

/ROUTINE TO CHECK OUR SUNDRY HIGH-SPEED DEVICES
/BY MAKING IT A SUBROUTINE, WE CAN CALL IT SEVERAL TIMES
/IN OUR INTERRUPT CHECKING, THEREBY MAKING IT HIGHLY
/UNLIKELY THAT WE WOULD MISS AN INTERRUPT & GET A 'TIM' ERROR.
DTCHK,	0
	IFNZRO CDR	<RCSF>	/CARD READER?
	IFZERO CDR	<JMP .+6>
	JMP .+5		/NOPE
	CIF DATFLD
	CDF
	JMP I .+1	/YES - OFF TO THE HANDLER IN FIELD 1
	 CDL11
/
	IFNZRO RK05	<DSKP>	/RK05?
	IFZERO RK05	<JMP .+5>
	JMP .+4		/NO
	CIF DATFLD
	JMP I .+1	/YES - OFF TO ITS HANDLER
	 RKL11
/
	IFNZRO TC01	<DTSF>	/DECTAPE?
	IFZERO TC01	<JMP DTCK1>
	JMP DTCK1	/NO
	DTRA
	AND C0004
	SNA CLA		/YES - IS IT INTERRUPT ENABLED?
	JMP DTCK1	/NO - JUST IGNORE THE FLAG
	CIF DATFLD
	JMP I .+1	/YES - OFF TO FIELD 1
	 DTL11
DTCK1,	ISZ DTCHK	/ELSEWISE, WE SKIP TO INDICATE NO FLAGS FOUND
F1RTN,	JMP I DTCHK	/ (DEVICE HANDLERS RETURN HERE)

/*F1RTN		/RETURN FROM FIELD 1 INTERRUPT HANDLERS
/DISMIS ROUTINE
/ENTERED FROM INTERRUPT HANDLER TO ENTER LEVEL 2 FROM LEVEL 1
/AC = ADDRESS OF LEVEL 2 SERVICE ROUTINE
/OR 0 IF NO LEVEL 2 SERVICE REQUIRED

DISMI0,	CDF
	SNA		/DISMIS INTERRUPTS
	JMP DISMI2	/NO-BACK TO WHATEVER WAS GOING ON BEFORE
	DCA CLKIT	/SAVE DISPATCH
	RIB		/MODE BIT = 100
	AND C0100
	SNA CLA		/FROM USER MODE?
	JMP DISMI1	/NO - QUEUE REQUEST UNTIL LATER
	TAD INTAC	/MOVE THE AC TO LEVEL 2
	DCA L2SA
	TAD INTLK	/MOVE LINK TO LEVEL 2
	DCA L2SVLK
	TAD 0		/MOVE PC TO LEVEL 2
	DCA L2SV0
	RIB
	DCA L2SF	/FIELDS AND MODE TO LEVEL 2
	CLA CLL		/AC & LINK = 0 UPON ENTRANCE TO LEVEL-2 CODE
	ION
	JMP I CLKIT	/DISMISS TO EXEC MODE, FIELD 0, LEVEL-2

DISMI1,	TAD CLKIT
	DCA I L2Q	/QUEUE THE LEVEL-2 REQUEST
DISMI2,	TAD INTLK	/RESTORE LINK AND AC
	CLL RTL
	TAD INTAC
	RMF		/RESTORE IF, DF & MODE
	ION
	JMP I 0		/BACK TO INTERRUPTED PROGRAM

	IFNDEF CLKMIS <
CLKCHK=	DISMI2
	>
UUOWAT,	DEVWAT

/ROUTINE TO CAUSE AN EFFECTIVE SKIP BEFORE ENTERING UUOEXT.
UUOEX2,	ISZ L2SV0	/POSITIVE FLAG TEST EXIT
	NOP
/
/*UUOEX1	/IOT EXIT ROUTINE
/'UUOEXT' - EXIT ROUTINE FOR RESIDENT IOT HANDLERS.
/ENTERED WITH AC = WAIT-BITS TO CLEAR IN STR1 & SET IN WAIT-MASK 1
UUOEX1,	SNA		/ANY WAIT CONDITIONS?
	JMP UUOEX3	/NO - JUST CLEAN UP
	DCA WS0		/YES - SAVE BITS TO CLEAR
	GETJTW		/YES - SET UP THE WAIT-MASK
	 JOBWMK
	CLA IAC
	TAD WS0		/WAIT ON THIS FLAG+JSWAIT
	DATFLD
	DCA I JOBSWA	/SET WAIT MASK 1
	TAD WS0		/BITS TO CLEAR
UUOEX3,	JMS I UUOWAT	/CHECK FOR WAIT
	TAD JOB
	RUNABL		/JOB STILL RUNNABLE?
	WAIT		/NO - RESCHEDULE
	EXIT		/YES - EXIT
/
/RETURN CONTENT OF STATUS WORD IN AC
/CALL:	TAD POINTER TO JOB-STATUS BLOCK
/	GETJTI
/	 RELATIVE ADDRESS OF WORD
/	RETURN (ADDRESS OF WORD IN JOBSWA)

GETJI0,	0
	CDF
	DCA JOBSWA	/SAVE POINTER TO JOB STATUS
	TAD I GETJI0	/GET THE POSITION IN THE LIST
	DCA .+3
	TAD JOBSWA
	GETJTA		/NOW GET THE ADDRESS OF THIS ENTRY
	 0
	DCA JOBSWA	/SAVE IT
	DATFLD
	TAD I JOBSWA	/GET THE CONTENTS OF THAT ADDRESS
	CDF
	ISZ GETJI0
	JMP I GETJI0	/ AND RETURN
	IFNZRO .-400&4000	<PAGE>
/STORE  CHARACTER  (ENTER AND EXIT WITH 'DATFLD' SET)
/CALL WITH ADDRESS OF DDB IN AC, CHARACTER IN TTCHAR
/	STORE
/	 ADDRESS OF SIZE-CHECKER
/	WON'T FIT
/	OK

GIRSC,	0
	TAD DBINPA
	DCA GIRSB	/POINTS TO ADDRESS OF BUFFER (FILL-POINTER)
	CDF
	TAD I GIRSC
	DCA GIRST	/SAVE THE SIZE-CHECK ROUTINE ADDRESS
	DATFLD
	TAD I GIRSB
	SNA		/IS THE FILL-BUFFER SET UP?
	JMP GIRSC8	/NO - GO GET A BUFFER
	DCA GIRSCT	/ADDRESS OF FILL COUNT IN DDB
	ISZ I GIRSCT	/ANY ROOM LEFT?
	JMP GIRSC4	/YES
	CLA IAC
	TAD GIRSB	/POINTS TO CHARACTER COUNT
	JMS I GIRST	/ AND CHECK THE BUFFER SIZE
	JMP GIRSCX	/YES - NO MORE BUFFERS; MAYBE RING BELLS NOW
	CLL CLA CMA RTL	/IS THERE ENOUGH (I.E. 3 BLOCKS) OF FREE CORE LEFT?
	TAD FRECNT
	SPA SNA CLA
	JMP GIRSCX	/NO-DON'T GIVE HIM ANOTHER BUFFER NOW
	TAD GIRSCT	/OK - AC=POINTER TO THE LINK-WORD
	CDF
	GETBLK		/GET (AND CLEAR) A BLOCK
	JMP GIRSCX	/NONE AVAILABLE
	DATFLD
	TAD I GIRSCT
	DCA I GIRSB	/LINK THE NEW BLOCK TO THE PREVIOUS ONE
GIRSC3,	TAD I GIRSB
	DCA GIRSCT
	TAD GIRSIZ	/INITIALIZE CHAR COUNT TO -12
	DCA I GIRSCT	/AND SAVE IN DDB
GIRSC4,	TAD I GIRSCT
	TAD C0003
	SMA		/ARE WE DOING THE LAST 3 CHARACTERS IN THE BLOCK?
	CLL CML RAL	/YES - WORD POINTER IS (COUNT-3)*2+1
	SPA
	STL CIA		/NO - WORD POINTER IS JUST -(COUNT)
	TAD I GIRSB	/START OF BUFFER
	DCA GIRSCT	/ADDRESS TO STORE CHARACTER
	TAD TTCHAR
	SNL		/DOES IT GET SPLIT?
	JMP GIRSC6	/YES
	AND C0377
GIRSC5,	DCA I GIRSCT	/STORE CHARACTER
	ISZ GIRSB
	ISZ I GIRSB	/COUNT THE CHARACTER
	ISZ GIRSC	/INDICATE SUCCESS
GIRFLD,	CLA CLL
	ISZ GIRSC	/SKIP THE PARAMETER
	JMP I GIRSC
GIRSC6,	CLL RTL; RTL
	AND C7400	/MASK OFF THE HIGH 4 BITS
	TAD I GIRSCT	/ ADD THE REST OF THE WORD
	DCA I GIRSCT	/ AND STORE IT
	ISZ GIRSCT
	TAD TTCHAR
	CLL RTR; RTR; RAR
	AND C7400	/NOW THE LOW 4 BITS
	TAD I GIRSCT	/INCLUDE THE REST OF THE WORD
	JMP GIRSC5	/ AND COUNT THE CHARACTER

GIRSC8,	CDF		/ATTACH A BUFFER TO FILL POINTER
	TAD GIRSB	/LINK ADDRESS
	GETBLK
	JMP GIRFLD	/CAN'T GET ONE - TOO BAD
	DATFLD		/OK - SET UP POINTERS
	CLA CLL CML RTL
	TAD GIRSB
	DCA EMPTY	/POINTS TO THE EMPTY COUNT
	CLA CMA
	TAD GIRSIZ
	DCA I EMPTY	/SET IT TO -13 INITIALLY
	ISZ EMPTY	/NOW POINTS TO EMPTY POINTER
	TAD I GIRSB
	DCA I EMPTY	/AIM IT AT OUR BUFFER
	JMP GIRSC3

GIRSCX,	DATFLD		/COULDN'T SQUEEZE CHARACTER IN
	STA		/BUT WE ALREADY BUMPED FILL COUNT
	DCA I GIRSCT	/ SO JUST RESET THE COUNT
	JMP GIRFLD	/ AND EXIT WITHOUT SKIPPING

	IFNZRO DDBINP-4	<GLITCH; *.-1>
DBINPA=	C0004	/DDBINP
GIRSB,	0
GIRSCT,	0
GIRSIZ,	-12	/10 (DECIMAL) CHARACTERS/BLOCK
GIRST,	0
/DECTAPE HANDLER CODE
/FOR DISC TRANSFERS TO OR FROM USER SWAP AREA
/AND FOR ALL LEVEL-2 COMPLETION.

/*DTDSK		/DECTAPE DISC COMPLETION
DTDSK,	ISZ DTDSF0	/INCREMENT THE RETURN
	DATFLD
	DCA I DTDQUE	/CLEAR THE QUEUE ENTRY
	CDF
	JMS I DTDCON	/START UP ANYTHING WAITING
	JMP DTDCF0	/ AND RETAKE THE EXIT

/*DTDEF0	/DECTAPE ERROR REGISTRATION
DTDEF0,	ERROR		/RECORD THE DISC ERROR
	 SWPRER
DTDCF0,	ISZ DTDSF0	/INCREMENT THE RETURN
	JMP DTDXF0	/ AND BACK TO FIELD 1 (AGAIN)

/*DTDSF0	/DECTAPE BUFFER TO SWAP AREA
DTDSF0,	0		/MAY RETURN UP TO 4 TIMES - EACH +1 FROM THE LAST
	DCA I DTDQUE	/QUEUE THE DECTAPE'S DISC REQUEST
	CDF
	ISZ DSBUSY	/IS THE DISC ALREADY BUSY?
	SKP
	JMS I FIUSER	/NO - START IT UP
DTDXF0,	CIF DATFLD
	JMP I DTDSF0	/BACK TO FIELD 1

/*DTL20		/DECTAPE LEVEL-2 DISPATCH
DTL20,	CIF DATFLD
	JMP I .+1
	DTL21

DTDCON,	DSKCON
DTDQUE,	DSUTBL+7


/ROUTINE TO SET FLAGS IN STR1 FOR TTY, LPT, OR PTP

	IFNZRO JSPTP-4	<GLITCH; *.-1>
	IFNZRO JSTEL-20	<GLITCH; *.-1>
	IFNZRO JSLPT-40	<GLITCH; *.-1>

CONSET,	0
	TAD CONPTC
	TAD WS1
	SNA		/IS IT THE PTP 'OUTREG' POSITION?
	JMP .+4		/YES
	SMA CLA		/NO - SKIP IF A TTY
	TAD C0020	/NO - IT MUST BE THE LPT
	TAD C0014
	TAD C0004
	JMS I SETFLG	/NOW SET THE BIT IN STR1
	JMP I CONSET
/
CONPTC,	CDVOUT+2


/*OVRLA1	/SYSTEM OVERLAY COMPLETION DISPATCHER
/
/DISC COMPLETION DISPATCHER FOR SYSTEMIC OVERLAYS.
OVRLA1,	JMS I FIUSER
	WAIT
	PAGE

/RETURN TTY BUFFER TO FREE LIST
/CALL	TAD BUFFER ADDRESS
/	RETBLK
/	RETURN WITH LINK IN AC

/*RETB		/FREE A CORE-BLOCK
RETB,	0
	SNA		/LEGAL RELEASE?
		IFNZRO DEBUG <
	REBOOT		/NO - ERROR *****
		>
		IFZERO DEBUG <
	CLA IAC		/FORCE A NORMAL RETURN
		>
	DCA RETB1
	RDF
	TAD C6203
	DCA RETF	/FOR RETURNING TO CALLER
	CLA CLL
	TAD RETB1
	TAD RETFIP
	SZL CLA		/FIP'S I/O BLOCK OR A FILL-COUNT?
	JMP RETF	/YES - THEY DON'T GET RELEASED
	TAD RETB1
		IFNZRO DEBUG&7-3&4000+CDR <
	AND C0007
	SZA CLA		/IS IT A GOOD FREE-CORE ADDRESS?
		IFNZRO DEBUG <
	REBOOT		/NO - ERROR *****
		>
		IFZERO DEBUG <
	JMP RETF	/NO - JUST RETURN IN A PRODUCTION SYSTEM
		>>
		IFZERO DEBUG&7-3&4000 <
		IFZERO CDR <
	CIF DATFLD
	JMS I .+1
	RETCHK		/OFF TO CHECK THE RELEASE VALIDITY
		>>
	DATFLD
	TAD I RETB1	/YES - GET THE LINK FROM THE BLOCK
	DCA RETBL
	TAD FREE	/GET OLD START OF FREE LIST
	DCA I RETB1	/PUT IT IN LINK
	TAD RETB1	/PUT ADDRESS OF THIS BLOCK
	DCA FREE	/ AS START OF FREE LIST
	ISZ FRECNT	/INCREMENT THE FREE-COUNT
	TAD RETBL
RETF,	0		/RETURN WITH LINK
	JMP I RETB

RETFIP,	-FIPBLK

/START USER JOB

SUJ,	TAD L2SF	/CLEAR NOTRUN FLAG SO JOB CAN BE SWAPPED
	AND C0007	/GET CORTBL INDEX
	TAD CORTBA
	DCA SUJSRC	/POINTS TO ENTRY IN CORTBL FOR THIS JOB
	TAD I SUJSRC	/GET CORTBL ENTRY
	AND CNOTR	/CLEAR NOT RUN BIT
	DCA I SUJSRC	/SAVE ENTRY
	TAD JOB
	AND C0600
	SZA CLA		/IS THIS A PHANTOM?
	EXIT		/YES - WE'RE ALL SET
	JMS I SUJUDF	/SET UUDF
SUJ1,	GETJTW		/NO. IOT RESULTS TO USER?
	 JOBSTS
	DATFLD
	AND SJIOTC	/IOTC BIT IN STR0
	SNA
	JMP SUJ4	/NO - WAS THERE A SYSTEM ERROR?
	CMA		/CLEAR THE BIT
	AND I JOBSWA	/JSIOTC:=0
	DCA I JOBSWA	/SAVE NEW STR0
	GETJTW		/GET # ARGUMENTS TO RETURN
	 JOBLNK
	DCA SUJSRC	/POINTS TO WORD 1 OF PARAMETER BLOCK
	TAD L2SVLK	/GET THE LINK SAVE-WORD
	CLL RTR
	RTR
	RAR
	AND C0007	/GET THE PARM COPY-COUNT
	DATFLD
	SNA		/IS IT A ZERO?
	JMP SUJ3	/YES - JUST BACK FROM WINDOW-TURN
	CIA
	DCA SUJCNT	/SAVE COUNT
	TAD L2SA
	DCA SUJDES	/SET THE USER'S PACKET ADDRESS
	TAD I SUJSRC	/THEN GET THE VALUE
	DCA L2SA	/ TO RETURN IN HIS AC
	ISZ SUJSRC	/POINTS TO WORD 2 OF BLOCK
	TAD UUDF	/TRANSFER RESULTS TO USER'S FIELD
	DCA SUJDFS
	CDF
	BLT		/MOVE RESULTS TO USER
	 DATFLD		/FROM FIELD 1
SUJSRC,	 0		/SOURCE ADDRESS
RETBL,
SUJDFS,	 0		/TO USER FIELD
RETB1,
SUJDES,	 0		/AT THIS ADDRESS
SUJCNT,	 0		/-WORD COUNT
	CLA CMA
	TAD SUJSRC	/GET THE BLOCK ADDRESS
	RETBLK		/ AND RELEASE THE BLOCK
CM200,	-200		/ (ALSO ACTS AS 'CLA')
	TAD JOB
	RUNABL		/IS HE STILL RUNNABLE?
	WAIT		/NO - HE JUST NEEDED HIS FIP RESULTS
	JMP SUJ1	/YES - RUN THROUGH THE CHECKS AGAIN

SUJ3,	TAD SUJSRC	/UFILE RETURN
	JMP I .+1
	SIFILE

SUJ4,	ISZ JOBSWA
	TAD I JOBSWA	/GET STR1
	AND SUJERR
	SNA		/SYSTEM ERROR OCCUR?
	EXIT		/NO - OFF TO THE USER
	CMA
	AND I JOBSWA	/YES - CLEAR THE ERROR-BIT
	DCA I JOBSWA
/
/THE USER HAS AN ERROR CODE SET. SINCE WE GOT HERE, HE
/MUST BE ENABLED TO HANDLE IT; WE DO AN EFFECTIVE
/'JMS' TO HIS ERROR-HANDLING ROUTINE.
	GETJTW		/GET HIS ERROR-ADDRESS
	 JOBERR
	DCA WS0		/POINTS TO HIS ROUTINE
	TAD L2SV0
	UDF
	DCA I WS0	/SAVE THE ERROR-ADDRESS IN HIS ROUTINE
	TAD WS0
	IAC
	DCA L2SV0	/ AND SET THE NEXT LOCATION AS HIS PC
	EXIT		/THEN JUST EXIT

SJIOTC,	JSIOTC
	IFNZRO JSERR-2	<GLITCH; *.-1>
SUJERR=	C0002	/JSERR
SUJUDF,	UDFSET
/IF THE USER EXECUTES A FLAG TEST IOT (EG KSF, TSF, ETC.)
/THEN IT IS USEFUL TO KNOW IF HE IS IN A "WAIT LOOP"
/(I.E. KSF; JMP .-1) OR IF HE IS JUST CHECKING TO SEE
/IF THERE IS ANYTHING WORTH LOOKING AT.  IN THE FORMER
/CASE, WE WILL DISMIS THE USER UNTIL THE FLAG TEST IS
/SATISFIED; IN THE LATTER, THE USER IS ALLOWED TO
/PROCEED, REGARDLESS OF THIS FLAG'S STATUS.
IOWAIT,	0		/DETERMINE IF USER'S INSTRUCTION IS JMP .-1
	STA
	TAD L2SV0	/COMPUTE .-1
	AND CP0177	/SAVE LOW ORDER 7 BITS
	TAD C5200	/JMP DIRECT CURRENT PAGE
	CIA
	UDF
	TAD I L2SV0	/ MINUS THE INSTRUCTION FOLLOWING THE IOT
	SNA		/JMP .-1 ON CURRENT PAGE?
	JMP IOWAT2	/YES
	TAD C0200
	SZA CLA		/NO - PAGE 0?
	JMP IOWAT1	/NO-- NOT A JMP .-1
	CLA CMA
	TAD L2SV0	/ADDRESS OF USER INSTRUCTION
	TAD CM200
	SPA CLA		/WOULD A JMP .-1 LAND ON PAGE 0?
IOWAT2,	ISZ IOWAIT	/YES - INCREMENT RETURN FOR JMP .-1
IOWAT1,	JMP I IOWAIT

CP0177,	177
C5200,	5200
	PAGE
/
/PAPER TAPE READER SERVICE FOR TSS/8

UPTR,	JMS I PTRCHK	/DOES HE OWN DEVICE
PTRDEV,	 DEVTBE		/POINTS TO READER ENTRY IN DEVTBL
	TAD URCBI
	TAD UUOCAL
	SNA CLA		/IS THIS THE NEW 'RCB' IOT?
	JMP URCB	/YES - CLEAR THE READER BUFFER
	DCA WS0		/FAKE A BREAK-MASK OF ZERO
	JMS I PTRIOT	/ANALYZE IOT
	 JMP URRS	/READ A STRING
PTRFL,	 JSPTR		/FEADER FLAG
	 JMP I PTRSKP	/WE ALWAYS SKIP
	SNL CLA		/RRB?
	UUOEXT		/NO - MUST HAVE BEEN RFC - SO WHAT!
	DATFLD
	TAD I PTRDEV	/ADDRESS OF DDB
	FETCH		/FETCH A CHARACTER FROM READER BUFFER
	 JMP PSTWT0	/NONE AVAILABLE - START READER
	DCA PTRCH	/SAVE FOR NEXT RRB
	CDF
	TAD PTRACA	/POINTS TO L2SA
	IOR		/OR THE CHARACTER INTO HIS AC
PTRCH,	 0
	UUOEXT		/EXIT TO USER
PTRSKP,	UUOEX2

URRS,	DATFLD
	TAD I PTRDEV	/GET THE DDB ADDRESS
	DCA CONDDB
	JMS I PSTRIN	/TRANSFER STRING TO USER
	 JMP PSTWT0	/INSUFFICIENT NUMBER OF CHARACTERS IN BUFFER
	UUOEXT

/SPECIAL 'RCB' IOT CLEARS THE READER BUFFER
URCB,	DATFLD
	TAD I PTRDEV	/CLEAR THE ENTIRE READER BUFFER
	CLRBUF
	UUOEXT
PSTWT0,	STA
L2PTR1,	DCA PTRSET	/REMEMBER WHY WE ARE HERE
	CDF CIF		/SELECT F0 AND INHIBIT IMTERRUPTS
	TAD I PTRTIM	/IS THE READER BUSY
	SNA CLA
	RFC		/START THE READER
	CLL STA RAL	/AC=-2
	DCA I PTRTIM	/SET THE READER TIMER
	DCA HSRCNT	/NO LIMIT UNTIL IT'S READ AT LEAST ONE BLOCK WORTH
	ISZ PTRSET	/FROM UUO OR LEVEL 2?
	EXIT		/LEVEL 2 - FINISHED
	STA
	TAD L2SV0	/BACK UP HIS PC FOR A REDO
	DCA L2SV0
	TAD PTRFL
	UUOEXT		/NOW WAIT FOR THE READER

PTRSIZ,	0
	DCA PTRSET	/SAVE POINTER TO CHARACTER COUNT
	ISZ PTRSIZ	/WE ALWAYS SUCCEED
	CDF CIF		/NO INTERRUPTS WHILE WE CHECK THE READER'S STATUS
	TAD I PTRTIM
	SMA CLA		/IS IT STILL RUNNING?
	JMP PTRSI2	/NO - JUST MAKE SURE THE FLAG IS SET
	TAD FRECNT	/HOW'S THE SUPPLY OF FREE CORE
	TAD C7770
	SMA SZA CLA
	TAD PTRFUL	/MINUS NUMBER ALLOWED
	DATFLD
	TAD I PTRSET	/PLUS CURRENT COUNT
	CDF
	SMA
	STA		/SHUT DOWN THE READER AFTER THE NEXT CHARACTER
	DCA HSRCNT
	TAD HSRCNT
	TAD C0100
	SMA CLA
PTRSI2,	JMS PTRSET	/SET THE READER FLAG IN STR1
	JMP I PTRSIZ
L2PTR,	JMS PTRSET	/WAKE HIM UP - HE'S HUNG
	TAD I PTRDEV
	SNA		/STILL HAVE A DDB?
	EXIT		/NO
	DCA AXS2	/YES - SAVE IT WE'LL NEED THE JOB NUMBER FROM IT
	TAD AXS2
	TAD C0004
	DCA WS0
	TAD I WS0	/IS IS EMPTY?
	SZA CLA
	EXIT		/NO - SO IT ISN'T OFFICIALLY HUNG YET
	TAD I AXS2	/JOB OWNING PTR
	CDF
	ERROR		/REPORT THE HUNG READER TO HIM
	 HUNGDV
	EXIT

PTRSET,	0
	DATFLD
	TAD PTRDEV	/READER'S POSITION IN DEVTBL
	DCA CONDBA
	TAD PTRFL
	JMS I SETFLG	/SET JSPTR IN STR1
	JMP I PTRSET

PTRCHK,	DEVCHK
PTRIOT,	UKT1
PSTRIN,	UKREAD
PTRTIM,	TIMPTR
URCBI,	-6017
PTRFUL,	-240

/ROUTINE TO HANDLE EASY DECTAPE STUFF
/LIKE DTSF AND DTRB
/DTSF ALWAYS SKIPS

UDTRBS,	ISZ L2SV0	/BUMP HIS PC
PTRACA,	L2SA		/TRICKY, TRICKY
UDTRB,	GETJTW		/GET HIS LAST VALUE OF STATUS B
	 JOBSTB
	DCA L2SA	/GIVE IT TO USER
	UUOEXT

C4000,	4000
MCSCQ,	-4044		/COVERS BOTH ^Q AND ^S

	IFNZRO CTRLS-4000	<GLITCH; *.-1>
	IFNZRO .+21&100		<*.+177&7600-21>

CONSQ,	0
	ISZ CONDBA	/POINT TO OUTPUT SIDE IN DEVTBL
	TAD TTCHAR
	CLL RTR
	TAD MCSCQ	/CHECK FOR ^Q AND ^S
	SZA CLA
	JMP I CONSQ	/NEITHER
	TAD I CONDBA
	SNA
	JMP I CONSQ	/DOESNT HAVE AN OUTPUT DDB - SO ^S/^Q MEANS NOTHING
	DCA WS2		/ADDRESS OF OUTPUT DDB
	TAD I WS2
	AND C3777	/CLEAR THE BIT FIRST
	SNL		/NOW WHICH WAS IT?
	TAD C4000	/^S - SET THE BIT TO INHIBIT HIS TTY FROM PRINTING
	DCA I WS2	/SAVE UPDATED STATUS
	SZL		/WHICH WAS IT AGAIN?
	JMS TYPE	/^Q - START HIM TYPING IF HE HAS ANYTHING TO TYPE
	JMP I .+1	/TAKE SUCESSFUL EXIT THROUGH "KEY"
	GIREXT

/*PRINT0	/TYPE CHARACTER
/MULTI-FIELD ROUTINE TO OUTPUT TO A TTY, PTP, OR LPT
/CALL:	CONDBA CONTAINS POINTER TO POSITION IN DEVTBL
/	AC OR TTCHAR CONTINS CHARACTER TO BE OUTPUT
/	PRINT
/	NO ROOM IN OUTPUT BUFFER
/	OK

PRINT0,	0
	SZA		/CHARACTER IN THE AC?
	DCA TTCHAR	/YES - JUST STORE IT FOR NOW
	RDF
	TAD C6203
	DCA PRINTX	/REMEMBER FROM WHENCE WE CAME
	DCA EMPTY	/CLEAR EMPTY BUFFER INDICATOR
PRINT1,	DATFLD
	TAD I CONDBA	/GET ADDRESS OF DDB
	SNA
	JMP PRINT2
	STORE		/STASH THE CHARACTER IN HIS BUFFER
	 OUTSIZ		/ADDRESS OF SIZE ROUTINE FOR OUTPUT
	JMP PRINTX	/WOULDN'T FIT
	ISZ PRINT0	/OK - SKIP ON RETURN
	TAD EMPTY	/WAS THE BUFFER EMPTY?
	SZA CLA
	JMS TYPE	/YES - BETTER START THE HARDWARE
PRINTX,	 .-.		/FIELD SELECT
	JMP I PRINT0	/AND BACK
PRINT2,	TAD CONDBA	/NO BUFFER SETUP YET
	CDF
	GETBLK		/CREATE A PSUEDO DDB
	 JMP PRINTX	/NO BLOCKS AVAILABLE
	JMP PRINT1
TTOFLB,	TTOFLG

TYPE,	0
	TAD CONDBA	/DEVTBL POINTER
	TAD OUTOFF	/MINUS DIF.
	CLL RAR		/DIVIDE BY 2
	DCA OUTSIZ	/= OUTREG POINTER
	CIF		/NO INTERRUPTS
	TAD I OUTSIZ
	AND C4001
	SZA CLA		/CHECK SERVICE AND CHARACTER FLAGS
	JMP I TYPE	/CHARACTER WILL BE TAKEN BY AN INTERRUPT
	STL RAR
	TAD I OUTSIZ	/SET THE SERVICE FLAG
	DCA I OUTSIZ
	CDF
	DCA I TTOFLB	/SCHEDULE LEVEL 2 TO PRINT IT
	JMP I TYPE

OUTSIZ,	0
	DCA TYPE	/SAVE POINTER TO CHARACTER COUNT
	TAD I TYPE	/CURRENT COUNT
	SPA		/DOES IT INCLUDE A FILLER CHARACTER COUNT?
	AND C0377	/YES - DISREGARD IT
	DCA TYPE	/THE ACTUAL COUNT TO COMPARE WITH
	TAD FRECNT
	AND C0400
	SNA		/OVER 400 BLOCKS OF FREE-CORE?
	TAD FRECNT	/NO - USE THE WHOLE COUNT
	DCA OUTFRE
	TAD TTCHAR
	SMA CLA		/ARE WE COMING FROM THE USER?
	JMP OUTSI1	/NO - THIS IS THE SYSTEM (OR NONSTANDARD INPUT)
	TAD CONDBA
	TAD LPTSIZ
	SZA CLA		/IS THIS TO THE LINE-PRINTER?
	JMP OUTSI2	/NO - MUST BE A NORMAL TTY OR PTP CHARACTER
	TAD OUTFRE	/YES - LPT GETS ROUGHLY 40% OF FREE-SPACE
	TAD OUTFRE
OUTSI1,	TAD OUTFRE
OUTSI2,	TAD OUTFRE
	CIA
	TAD TYPE
	TAD OUTLIM	/FORCE A MARGIN FOR THE FREE-LIST
	SPA CLA		/STILL WITHIN REASONABLE LIMITS?
	ISZ OUTSIZ	/YES - SKIP ON RETURN
	JMP I OUTSIZ

C4001,	4001
OUTLIM,	25
LPTSIZ,	-DEVTBE-3
OUTOFF,	-OUTDIF
/SEARCH FOR JOB IN CORE
/CALL	TAD JOB #
/	CORE
/	 MASK
/	NOT THERE, AC:=0
/	THERE, SAVE FIELD IN AC


/THESE TWO WORDS MUST IMMEDIATELY PRECEDE CORSRC
/THEY MUST ALSO BE ORIGINED AT CORSRC-2 OR NOTHING WILL WORK

/*CORSRC	/CORTBL SEARCH

CORCNT,	0	/INIT TO (-) THE NUMBER OF USER FIELDS
CORTBE,	0	/INIT TO (-) THE FIRST LOCKED 'CORTBL' ENTRY

OUTFRE,
CORSRC,	0		/ENTER WITH BIT PATTERN TO MATCH
	AND I CORSRC	/MASK AS SPECIFIED
	DCA CORSR4	/SAVE THE PATTERN TO FIND
	RDF		/FIGURE OUT WHENCE WE CAME
	TAD C6203
	DCA CORSR3	/SO WE CAN RETURN
	TAD I CORSRC	/GET THE MASK
	DCA CORSR2	/SAVE IT
	ISZ CORSRC	/SKIP PAST MASK IN CALL
	CDF
	TAD CORCNT	/-# ENTRIES TO CHECK
	DCA AXS1	/USED AS COUNTER
CORSR1,	ISZ CORTBP	/INCREMENT TABLE POINTER
	TAD CORTBP
	TAD CORTBE
	SZA CLA		/ARE WE PAST THE END OF 'CORTBL'?
	JMP CORSR5	/NO
	TAD FANCOR
	DCA CORTBP	/YES - REINITIALIZE THE POINTER
CORSR5,	TAD I CORTBP	/GET TABLE ENTRY
	AND CORSR2	/MASK IT
	CIA
	TAD CORSR4	/COMPARE WITH DESIRED ENTRY
	SNA CLA
	JMP CORSR6	/FOUND IT!
	ISZ AXS1	/NOT YET
	JMP CORSR1	/KEEP GOING
CORSR3,	0		/RETURN WITH AC=0
	JMP I CORSRC
CORSR6,	TAD CORTBA	/WE HAVE IT; GET CORTBL INDEX
	CIA
	TAD CORTBP
	DCA AXS1	/FIELD #
	TAD CORSR4	/WE HAVE TO SET MODE BIT APPROPRIATELY
	AND C0600
	SNA CLA		/IS THIS A PHANTOM?
	TAD C0010	/NO - SET USER-MODE BIT
	TAD AXS1	/SET UP SAVE FIELD
	CLL RTL		/SHIFT AND ADD DATA FIELD
	RAL
	TAD AXS1
	ISZ CORSRC	/SKIP TO INDICATE SUCCESS
	JMP CORSR3	/BACK
CORSR2,	0
CORSR4,	0
CORTBP,	CORTBL	/PERMANENT "ROUND-ROBIN" POINTER
	PAGE
/*GETB		/GET A FREE-BLOCK
/GET A BUFFER FROM FREE LIST
/CALL	TAD (ADDRESS TO STORE LINK)
/	GETBLK
/	NONE AVAILABLE
/	OK WITH LINK STORED

CLST0,
GETDB2,
GETB,	0
	DCA GETBT	/SAVE ADDRESS TO SAVE PTR
	RDF		/SAVE CALLING FIELD
	TAD C6203
	DCA GETB2	/SO WE CAN GET BACK
	DATFLD
	CLA CMA
	TAD FRECNT
	SPA		/ANY BLOCKS LEFT?
	JMP GETB1	/NO - TAKE ERROR RETURN
	DCA FRECNT	/YES - SAVE THE NEW COUNT
	TAD FREE
	DCA I GETBT	/STORE LINK IN ADDRESS SPECIFIED
	TAD FRECNT
	SNA CLA		/IS THIS THE END?
	JMP .+5		/YES (WE SHOULD REALLY ZERO 'FREE')
	TAD I FREE	/NO - GET THE FORWARD LINK
	SNA		/ZERO?
	REBOOT		/YES - ERROR *****
	DCA FREE	/NO - SET NEW FREE-LIST START
	ISZ GETB	/ AND INDICATE SUCCESS
	STA		/NOW WE'LL BE GOOD GUYS
	TAD I GETBT	/ AND CLEAR THE BUFFER
	DCA AXS1
	TAD C7770	/8 WORDS TO ZERO
	DCA GETBT
	DCA I AXS1
	ISZ GETBT	/DONE?
	JMP .-2		/NO
GETB1,	CLA CLL
GETB2,	0		/YES - RESET THE FIELD
	JMP I GETB	/ AND RETURN
/GET A DATA BLOCK
/CALL	TAD LINK
/	GETDDB
/	NONE AVAILABLE
/	OK

	IFNZRO DDBTIM-3	<GLITCH; *.-1>

DEVWT0,
/*GETDB0	/GET DDB BLOCK
GETDB0,	0
	DCA GETDB1	/ADDRESS OF DDB POINTER (USUALLY IN DEVTBL)
	RDF
	TAD C6203
	DCA GETDB5	/SAVE CALLING FIELD SO WE CAN GET OUT
	CDF
	TAD GETDB1
	GETBLK		/GET A BUFFER FROM FREE-CORE
	JMP GETDB5	/BOO! HISS! THEY'RE FRESH OUT
	DATFLD
	ISZ GETDB0	/SUCCESSFUL RETURN
	CLA CLL CML RTL
	TAD I GETDB1
	DCA AXS1	/SET POINTER TO ASSIGN-TIME
	TAD CLK1	/GET LOW ORDER CLOCK
	RTL		/AND SHIFT BITS 0-2 INTO AC 9-11
	RTL
	AND C0007	/GET MOST SIGNIFCANT BITS FROM LOW ORDER
	DCA GETDB2	/SAVE THEM
	TAD CLK2	/GET HIGH ORDER TIME
	RTL		/SHIFT LEFT 3 PLACES
	RAL
	AND C7770	/KEEP BITS 0-8
	TAD GETDB2	/ADD COMPONENT DERIVED FROM CLK1
	DCA I AXS1	/SAVE IN DDB
GETDB5,	0		/RETURN
	JMP I GETDB0


/*QUEUE0	/REGISTER LEVEL-2 FOR FIELD 1
/REGISTER LEVEL-2 REQUESTS FOR FIELD 1

QUEUE0,	0
	DCA I L2Q	/STORE THE REQUEST
	CIF DATFLD
	JMP I QUEUE0	/ AND RETURN

/AFTER EXECUTING AN IOT FOR A USER PROGRAM,
/UUOEXT IS CALLED WITH THE AC BITS SET TO
/INDICATE WHICH STATUS BITS (IF ANY)
/HAVE BEEN CHANGED (I.E. CLEARED).
/
/THIS ROUTINE DOES THE ACTUAL CLEARING OF BITS
/IF ANY BITS ARE CLEARED, INDICATING A WAIT CONDITION,
/THEN THE DUMMY WAIT BIT (BIT 11 OF STR1) IS ALSO
/CLEARED

/CALL:	TAD <WAIT-BIT>
/	JMS DEVWAT
/	RETURN

GETBT,
DEVWAT,	0
	DCA DEVWT0	/STR1 BITS TO CLEAR
	TAD DEVWT0
	IAC		/CLEAR JSWAIT ALSO
	JMS CLSTR1
	TAD DEVWT0	/DID WE CLEAR ANYTHING
	SNA CLA
	ISZ I JOBSWA	/NO, TURN JSWAIT BACK ON
	CDF
	JMP I DEVWAT	/GO AWAY

GETDB1,
CLSTR1,	0		/ROUTINE TO CLEAR BITS IN STR1
	CMA		/ENTER WITH BITS TO CLEAR IN AC
	DCA CLST0	/SAVE MASK OF BITS TO SAVE
	GETJTW		/GET CURRENT SETTING OF STR1
	 JOBSTS+1
	AND CLST0	/CLEAR SELECTED BITS
	DATFLD
	DCA I JOBSWA	/SAVE CLEARED STATUS REGISTER
	JMP I CLSTR1	/RETURN

/WE COME HERE EVERY 5 SECONDS TO FUDGE UP THE TERMINAL
/HANDLER TO CHECK FOR NON-DRAINING TERMINAL BUFFERS

L2OUT,	TAD CTIMER
	DCA I TIMCOA	/RESET THE TIMER
	TAD CONJMS
	DCA I TTIMEB	/ AND FUDGE THE 'CONOUT' CODE
	DCA I TTOFLC	/THEN SCHEDULE 'CONOUT' ON LEVEL-2
	EXIT

CONJMS,	JMSTIM
CTIMER,	-5
TIMCOA,	TIMCON
TTIMEB,	TTIMER
TTOFLC,	TTOFLG
/SET KEYBOARD BREAK-MASK OR RETURN CURRENT MASK

	IFNZRO DDBBRK-2	<GLITCH; *.-1>
UKSBRK=	C0002	/DDBBRK

UKSB,	TAD JOB
	TTYUSE		/FIND USER'S INPUT TTY DDB
	TAD UKSBRK
	DCA JOBSWA	/POINTS TO BREAK-MASK IN DDB
	TAD L2SA
	DATFLD
	SZA		/IS THIS A NEW MASK?
	JMP UKSB1	/YES - SET IT IN THE DDB
	TAD I JOBSWA	/NO - RETURN THE CURRENT MASK
	JMP UKSB2

/ENABLE THE PROGRAMMATIC CTRL/C AND SET THE RESTART ADDRESS.

USRA,	DATFLD
	TAD I JOBDAT
	IAC
	IOR		/SET THE RESTART ENABLE BIT IN STR0
	 JSRSEN
	JMP USRA1

/ENABLE THE USER'S ERROR HANDLING ABILITY:
/	1) SET THE ERROR ENABLE BIT IN STR0
/	2) SAVE THE USER'S ERROR ROUTINE ADDRESS
/
/JSEREN MAY BE CLEARED BY .RUN, START, OR
/A USER EXECUTING A "CLEAR STATUS" IOT.

USEA,	DATFLD		/SET JSEREN WHEN USER EXECUTES SEA
	TAD I JOBDAT	/POINTS TO WORD 0 OF JOB DATA AREA
	IAC		/POINTS TO STR0
	IOR		/OR IN JSEREN
	 JSEREN
	CLA CLL CMA RAL	/AC = -2, TO GET JOB DATA POINTER

/ROUTINE TO SET SWITCH REGISTER, RESTART ADDR., OR ERROR
/ADDR.  THIS ROUTINE IS VERY SENSITIVE TO THE POSITION
/OF THESE CELLS IN THE JOB DATA AREA.  USE CAUTION.

	IFNZRO JOBSRA-5	<GLITCH; *.-1>
	IFNZRO JOBERR-6	<GLITCH; *.-1>
	IFNZRO JOBSWR-10<GLITCH; *.-1>
USSW,	TAD C0003	/AC = 3 (SWITCH REGISTER)
USRA1,	TAD C0005	/AC = AC+5 (RESTART ADDRESS)
	DCA .+2
	GETJTW		/GET THE APPROPRIATE POINTER
	 0
	CLA
	TAD L2SA	/GET THE PASSED PARAMETER
	DATFLD
UKSB1,	DCA I JOBSWA	/ AND SAVE IN THE JOB DATA AREA
UKSB2,	DCA L2SA	/THEN CLEAR HIS AC
	UUOEXT		/ AND EXIT
	PAGE

/HANDLER FOR THE NONSTANDARD CHARACTER INPUT DEVICES.

UNSCI2,	TAD C0002
UNSCI1,	TAD UNSCDV
	DCA .+2		/SET THE DEVTBL ENTRY POINTER
	JMS I UNSCHK	/ AND CHECK FOR THE DEVICE OWNERSHIP
	 .-.
	TAD .-1
	DCA CONDBA	/SET THE POINTER FOR THE FETCH ROUTINE
	TAD UNSCWT
	JMS I UNSCLR	/CLEAR THE NONSTANDARD-DEVICE FLAG
	TAD I CONDBA
	DCA CONDDB
	TAD CONDDB
	TAD UNSCNT
	DCA UKEYC	/NOW POINTS TO FILL-COUNT
	TAD I UKEYC
	SZA CLA		/ANY CHARACTERS IN THE BUFFER?
	TAD UNSCWT	/YES - SET HIS STR1 FLAG
	TAD I JOBSWA
	DCA I JOBSWA
	TAD UNSCWT	/NOW SET THE WAIT-FLAG WE USE
	JMP UKEY1	/ AND SHARE THE 'UKEY' CODE

UNSCDV,	DEVTBE+10	/DEVTBL ENTRY FOR 'X0'
UNSCHK,	DEVCHK
UNSCLR,	CLSTR1
	IFNZRO DDBINC-5	<GLITCH; *.-1>
UNSCNT=	C0005	/DDBINC
UNSCWT,	JSPTR		/ (FOR LACK OF OUR OWN FLAG)

/KEYBOARD IOTS

UKEY,	JMS I UKEY0A	/CHECK FOR 'SI' MODE & GET HIS DDB
	TAD UKEYWT
UKEY1,	DCA UKEYFL
	DATFLD
	TAD CONDDB
	TAD UKEYBA
	DCA WS0		/POINTS TO THE BREAK-MASK
	TAD I WS0
	DCA WS0		/SET THE BREAK-MASK FOR 'FETCH'
	JMS I UKEY1A	/WHAT DOES HE WANT TO DO?
	 JMP UKEYRS	/READ STRING
UKEYFL,	 JSDEL+JSERR	/DELIMITER FLAG
	 JMP UKWAT1	/KSF AND NO CHARACTERS AROUND...
	RAR		/NOW BIT 0 = 2-BIT AND L = 4-BIT
	SPA CLA		/IS BIT SET FOR 6032 (KCC)?
	DCA L2SA	/YES - JUST CLEAR HIS AC

/EVENT TIME 3
	SNL CLA		/IS BIT SET FOR 6034?
	UUOEXT		/NO - JUST EXIT
	DATFLD
	TAD CONDDB
	FETCH		/YES - GET A CHARACTER
	 JMP UKWAIT	/NONE AVAILABLE-RESET PC AND WAIT
	DCA UKEYC	/SAVE CHARACTER
	TAD UKL2SA	/OR INTO USER'S AC
	CDF
	IOR		/IT WOULD PROBABLY BE ADEQUATE TO JAM IT INTO AC.
UKEYC,	 0
	UUOEXT		/AND BACK TO USER

/STRING READ
UKEYRS,	JMS UKREAD	/CALL THE STRING-MOVER
	 JMP UKWAIT	/WAIT FOR MORE INPUT
	UUOEXT

UKWAIT,	STA		/BACK UP HIS PC
	TAD L2SV0
	DCA L2SV0
	JMP UKWAT2

UKWAT1,	JMS I UKLOOP	/CHECK FOR 'JMP .-1' LOOP
	SKP CLA		/NOPE
UKWAT2,	TAD UKEYFL	/YES - SET FLAGS TO WAIT ON
	DCA UKEYC
	CLA CLL CML RTR	/AC=2000
	DATFLD
	AND I CONDDB	/ AND OFF THE STATUS-BITS
	SNA		/WAS AN 'XOFF' SENT?
	JMP UKWAT3	/NO, JUST WAIT FOR KEYBOARD
	CMA		/CLEAR XON BIT IN DDB
	AND I CONDDB
	DCA I CONDDB
	ISZ CONDBA	/NOW POINTS TO OUTPUT SIDE
	TAD UKXON
	CDF
	PRINT		/SEND OUT A 'XON' TO RESTART THE READER
	 WAIT		/NO ROOM - TRY LATER
UKWAT3,	TAD UKEYC	/CLEAR BIT IN STR1
	UUOEXT

/ROUTINE TO READ CHARACTERS & TRANSFER TO THE USER'S STRING
/BREAK-MASK IS ASSUMED TO BE IN 'WS0'.
UKREAD,	0
	TAD L2SA
	IAC
	DCA WS1		/POINTER TO USER'S BUFFER ADDRESS
	UDF
	TAD I WS1
	DCA AXS2	/POINTER TO THE BUFFER
UKRD1,	DATFLD
	TAD CONDDB
	FETCH		/FETCH A WORD FOR HIM
	 JMP I UKREAD	/FRESH OUT - JUST RETURN
	UDF
	DCA TTCHAR
	TAD TTCHAR
	DCA I AXS2	/PASS IT BACK TO HIS BUFFER
	ISZ I WS1	/ AND UPDATE HIS BUFFER POINTER
	NOP
	TAD WS0
	ISZ I L2SA	/DONE?
	BREAK		/ OR IS THIS A BREAK CHARACTER?
	 SKP CLA	/YES
	JMP UKRD1	/NO - BACK FOR MORE
	DCA L2SA	/YES - CLEAR HIS AC
	ISZ UKREAD
	JMP I UKREAD	/ AND SKIP ON RETURN

	IFNZRO DDBBRK-2	<GLITCH; *.-1>
UKEYBA=	C0002	/DDBBRK
UKEYWT,	JSDEL+JSERR
UKL2SA,	L2SA
UKEY1A,	UKT1
UKEY0A,	UKT0
UKLOOP,	IOWAIT
UKXON,	221	/XON

/FIELD 0 DISPATCH FOR THE RK05 & DECTAPE HANDLERS IN FIELD 1.

URK050,	TAD C0005
UDTXA0,	TAD C0002
	CLL RAR		/AC=1, L=0 FOR DT; AC=3, L=1 FOR RK
	CIF DATFLD-1
	JMP I .+1	/OFF TO FIELD 1 UUO SERVICE
	 UUDTRK


/HANDLER FOR THE 'DUP' AND 'UND' IOTS.

	IFNZRO DUPL-200	<GLITCH; *.-1>

UUND,	TAD C0200
UDUP,	DCA WS0		/SAVE THE BIT TO SET
	TAD JOB
	TTYUSE
	DCA WS1		/SET POINTER TO INPUT DDB
	DATFLD
	TAD I WS1
	AND CMDUPL	/CLEAR THE DUPLEX BIT
	TAD WS0		/ AND SET IT AS CALLED FOR
	DCA I WS1
	UUOEXT

CMDUPL,	-DUPL-1
	PAGE
/
/SINGLE INSTRUCTION NULL-JOB - AC INCREMENTED WHEN SCHEDULED.
NULJOB,	JMP .

/KEYBOARD SERVICE
/ENTERED WHENEVER CHARACTER IS RECEIVED --- HIGHEST PRIORTY ON LEVEL 2

KLOST,	0	/NUMBER OF CHARACTERS LOST BECAUSE OF OVERFLOW SINCE THE SYSTEM WAS LAST STARTED
CONDVE,	-DEVTBE
CONNSF,	JSTIME+JSPTR	/USED FOR NONSTANDARD DEVICES
KEYA,	KEYC
KEYB,	RINGIN		/POINTER TO INPUT RING BUFFER
KEYCNT,	-INPUTS
KEYSIZ,	-INPUTS		/SIZE OF KEYBOARD INPUT RING BUFFER
TYPEA,	TYPE

CONIN,	DCA I SETFLG	/CLEAR THE SCHEDULER REQUEST FLAG
CONIN3,	STA
	CDF
	IOF
	TAD I KEYA
	SMA		/ARE WE FINISHED
	JMP CONIN4	/NO
CONEXT,	CDF
	AND I SETFLG	/DID WE AROUSE ANYONE?
	SZA CLA
	RSCHED		/IF NULL JOB IS RUNNING WE MAY TERMINATE IT
	EXIT

CONIN4,	DCA I KEYA	/DECREMENT COUNT
	TAD I KEYA	/CHECK FOR OVERFLOW
	TAD KEYSIZ
	SMA SZA CLA
	JMP CONIN0	/OVERFLOW  - SKIP AROUND TO THE FIRST ENTRY
	DATFLD
	TAD I KEYB	/GRAB A CHARACTER FROM THE RING BUFFER
	DCA TTCHAR
	ISZ KEYB
	ION
	TAD I KEYB	/LINE NUMBER
	CLL RAL		/TIMES 2
	TAD DEVTBA
	DCA CONINA	/POSITION IN DEVICE TABLE
	TAD CONINA
	TAD CONDVE
	SMA		/IS THIS A KEYBOARD?
	JMP CONASD	/NO - AN ASSIGNABLE DEVICE (HSR, R2, X0, ETC)
	AND I CONINA
	SZA CLA		/ANY INPUT DDB HERE?
	JMP CONIN1
	TAD CONINA	/NO DDB SETUP YET
	CDF
	GETBLK		/ESTABLISH A PSUEDO DDB FOR THE TIME BEING
	 JMP CONIN2	/NONE AVAILABLE - DON'T BOTHER WITH BELLS
	DATFLD
	TAD I CONINA
	IOR
	 DSI		/SET NEW CONSOLE IN SI MODE

CONIN1,	CDF
	GIR		/PROCESS THIS CHARACTER
CONINA,	 .-.
	SKP		/NO ROOM - RING THE BELL
	JMP CONIN2
	DATFLD
	TAD I CONDBA	/POINTS TO THE OUTPUT SIDE
	SNA
	JMP CONIN2	/NO DDB DON'T BOTHER WITH BELLS
	IOR
	 DBELL		/RING-A-DING TOO BAD!!
	JMS I TYPEA	/REMEMBER WE WANT TO RING HIS CHIME
	JMP CONIN2
CONIN0,	ISZ KLOST	/COUNT A LOST CHARACTER
KEYBA,	RINGIN		/NOP
	ISZ KEYB
CONIN2,	ISZ KEYB
	ISZ KEYCNT	/END OF RING BUFFER?
	JMP CONIN3	/NO
	TAD KEYBA
	DCA KEYB	/RESET POINTER
	TAD KEYSIZ
	DCA KEYCNT	/AND THE COUNT
	JMP CONIN3

CONASD,	SZA CLA		/IS THIS THE HSR?
	JMP CONAS2	/NO
	TAD I CONINA
	SNA
	JMP CONAS1	/OOPS - HE RELEASED IT
	STORE		/STASH IT'S CHARACTER AWAY
	 PTRSIZ		/SIZE CHECK ROUTINE
	SKP
	JMP CONIN2	/ALL IS WELL
	CDF		/OOPS  - RAN OUT OF FREE CORE
	IOF
	ISZ I KEYA	/UN-COUNT THE CHARACTER
	CLA CMA
	TAD KEYB
	DCA KEYB	/BACK UP THE RING BUFFER POINTER
	JMP I .+1	/AND BACK TO THE REMAINDER OF L2 SERVICE
	L2EX0		/JUST PAST THE HI-PRIORITY CHECK POINT

CONAS1,	CLA CMA
	DCA HSRCNT	/STOP THE READER
	JMP CONIN2

CONAS2,	TAD CONINA
	DCA CONDBA	/SET 'CONDBA' FOR 'OUTSIZ' & 'SETFLG'
	TAD I CONINA
	SNA		/ANY INPUT DDB?
	JMP CONIN2	/NO - IT MUST NOT BE ASSIGNED - JUST IGNORE IT
	STORE		/YES - STORE THE CHARACTER
	 OUTSIZ
	JMP CONIN2	/NO ROOM - JUST FORGET IT
	TAD CONNSF
	JMS I SETFLG	/ AND SET THE 'STR1' FLAG
	JMP CONIN2
/CLEAR BUFFER
/CALL	TAD DDB ADDRESS
/	CLRBUF
/	RETURN	('DATFLD' SET)

	IFNZRO DDBINP-4	<GLITCH; *.-1>
CLRINP=	C0004	/DDBINP
	IFNZRO DDBOUP-7	<GLITCH; *.-1>

CLRBF0,	0		/ENTER WITH DDB ADDRESS
	SNA		/LEGAL ADDRESS?
	JMP I CLRBF0	/NO - JUST RETURN
	TAD CLRINP	/...+4
	DCA CLRBU1	/POINTS TO FILL POINTER
	DATFLD
	TAD I CLRBU1
	SNA CLA		/BUFFER ALREADY EMPTY?
	JMP I CLRBF0	/YES
	DCA I CLRBU1	/FILL POINTER = 0
	ISZ CLRBU1
	DCA I CLRBU1	/CLEAR THE CHARACTER COUNT
	ISZ CLRBU1
	ISZ CLRBU1
	TAD I CLRBU1
	CDF
	RETBLK		/NO - RETURN THE BUFFER
	SZA		/AT THE END OF THE CHAIN?
	JMP .-2		/NO
	DATFLD
	DCA I CLRBU1	/CLEAR EMPTY POINTER
	JMP I CLRBF0	/ AND RETURN

CLRBU1,	0
	PAGE

/HANDLER FOR NONSTANDARD CHARACTER OUTPUT DEVICES.
/FOR LACK OF ANY OTHER CONTROL BIT, THESE SHARE THE
/LINE PRINTER SCHEDULING BIT.

UNSCO2,	TAD C0002	/REFERENCE DEVICE 4013
UNSCO1,	TAD C0006	/ AND DEVICE 4011

/LINE PRINTER 'UUO' HANDLER

ULPT,	TAD ULPTDV
	DCA .+2		/SET THE DEVTBL ENTRY POINTER
	JMS I UPTLPA	/CHECK FOR HIS OWNERSHIP
	 DEVTBE+3
	TAD .-1
	DCA CONDBA	/HE OWNS IT - SET THE DEVTBL POINTER
	TAD UJSTEL
	JMP ULPT1	/JSLPT = 40 = 20 + 20 (JSTEL)

ULPTDV,	DEVTBE+3

/HANDLER FOR THE PAPERTAPE PUNCH

UPTP,	JMS I UPTLPA	/CHECK FOR OWNERSHIP
	 DEVTBE+1
	TAD .-1
	DCA CONDBA	/HE OWNS IT - SET THE DEVTBL POINTER
	TAD UJSPTP
	JMP UPTP1	/SHARE THE 'UTEL' CODE

/TELEPRINTER IOTS

UTEL,	JMS UKT0	/CHECK FOR 'SI' & GET THE DDB
	ISZ CONDBA	/ (NOW POINTS TO OUTPUT SIDE)
ULPT1,	TAD UJSTEL
UPTP1,	DCA UTELFL	/SET THE FLAG-BIT
	JMS UKT1	/WHAT IS REQUESTED BY USER?
	 JMP UTELS	/SEND A STRING (6XX0)
UTELFL,	 JSTEL		/DELIMITER FLAG
	 JMP I UTELSK	/FLAG TEST & NO ROOM - JUST SKIP FOR NOW
	SNA CLA		/IS IT A 6044?
	UUOEXT		/NO - IGNORE 6XX2 IOTS
	TAD L2SA	/6044 (POSSIBLY MICRO CODED)
	CLL RAL
	CLL CML RAR	/FORCE THE CHARACTER (-) NONZERO
	PRINT		/BUFFER UP THE CHARACTER
	 SKP		/NO ROOM
	UUOEXT
	CLA CMA
	TAD L2SV0
	DCA L2SV0	/BACK UP THE PC TO TRY LATER
	JMP UTEL2

UTEL1,	DCA L2SA	/CLEAR HIS AC
	TAD UTELSW
	SNA CLA		/COULD WE FEED HIM ANYTHING AT ALL?
UTEL2,	TAD UTELFL	/NO - PUT HIM TO SLEEP
	UUOEXT

	IFNZRO JSPTP-4		<GLITCH; *.-1>
UJSPTP=	C0004
	IFNZRO JSTEL^2-JSLPT	<GLITCH; *.-1>
UJSTEL,	JSTEL
UPTLPA,	DEVCHK
UTELC=	WS0

/STRING-OUTPUT HANDLER

UTELS,	UDF
	TAD I L2SA
	SNA CLA		/ANY WORD-COUNT LEFT?
	JMP UTELS2	/NO - JUST EXIT
	DCA UTELSW	/CLEAR THE "SOMETHING FED" SWITCH
	TAD L2SA
	IAC
	DCA UTELC	/POINTS TO ADDRESS OF STRING IN USER AREA
	TAD I UTELC	/GET ADDRESS-1 OF STRING
	DCA AXS2	/SAVE POINTER TO STRING
UTELS1,	TAD I AXS2	/GET CHARACTER FROM USER
	CLL RAL
	CLL CML RAR	/ FORCE IT (-) NONZERO
	CDF
	PRINT		/BUFFER THE CHARACTER
	 JMP UTEL1	/NO ROOM - TRY AGAIN LATER
	UDF
	ISZ I UTELC	/INCREMENT THE USER'S BUFFER ADDRESS
	ISZ UTELSW	/ AND SET THE 'FED' SWITCH (MAY GET SKIPPED)
	ISZ I L2SA	/BUMP USER'S WORD COUNT
	JMP UTELS1	/KEEP GOING
UTELS2,	DCA L2SA	/ALL DONE - CLEAR HIS AC
	JMP I .+1	/ AND SKIP ON EXIT
UTELSK,	UUOEX2

/ROUTINE TO CHECK FOR 'SI' AND GET THE DDB POINTER

	IFNZRO DSI-1000	<GLITCH; *.-1>
UKTSI=	C1000	/DSI
UTELSW,
UKT0,	0
	TAD JOB
	TTYUSE		/GET THE INPUT DDB POINTER
	DCA CONDDB
	DATFLD
	TAD I CONDDB
	CDF
	AND UKTSI
	SNA CLA		/IS HE IN 'SI' INPUT MODE?
	JMP I UKT0	/NO - JUST CONTINUE
	GETJTW		/YES - GET HIS WAIT-MASK
	 JOBWMK
	CLA
	DATFLD
	DCA I JOBSWA	/ AND PUT HIM TO SLEEP; SI WILL WAKE HIM LATER
	REDO

/ROUTINE TO ANALYZE IOT'S
/CALLING SEQUENCE
/	IOT IN UUOCAL
/	JMS UKT1
/	RETURN FOR STRING IOT
/	FLAG TO CHECK IN STR1
/	RETURN FOR NON SKIPPING FLAG TESTS
/	RETURN FOR SKIPPING FLAG TEST OR EVENT TIMESS 2 AND 4
/		(AC=BIT 9 OF IOT; LINK=BIT 10)
UKT1,	0
	TAD UUOCAL
	AND C0007
	SNA		/STRING?
	JMP I UKT1	/YES
	ISZ UKT1
	CLL RAR		/NO
	SNL		/SKIP TEST?
	JMP UKT12	/NO
	SZA CLA		/YES - ANYTHING ELSE SET?
	UUOEXT		/YES - BAD MICRO-CODING (TREAT AS NOP)
	GETJTW		/YES, IS IT POSITIVE OR NEGATIVE
	 JOBSTS+1
	AND I UKT1	/FLAG TO CHECK
	CLL RTR		/ (IGNORE THE 'JSERR' FLAG)
	ISZ UKT1	/INDEX PAST ARGUMENT
	SNA CLA		/FLAG SET?
	JMP I UKT1	/NO - DON'T SKIP
	JMP I UTELSK	/YES - SKIP ON RETURN
UKT12,	ISZ UKT1
	ISZ UKT1
	CLL RAR
	JMP I UKT1	/INDEX RETURN
/*SLEEP		/PUT THE JOB TO SLEEP
/WE GOT A 'DRL' ERROR ON THE DISC - ASSUME IT WAS THE
/ACTIVE JOB DOING 'EAE' STUFF AND PUT IT TO SLEEP.

SLEEP1,	STA
	TAD DSKPTR	/BACK UP DSKPTR
	DCA DSKPTR
SLEEP2,	JMS I FIUSER	/NOW START UP THE I/O AGAIN
SLEEP,	TAD JOB
	SNA CLA		/WAS ANY JOB ACTIVE?
	EXIT		/NO - JUST EXIT & HOPE IT WORKS
	JMP I .+1	/YES - GO PUT IT TO SLEEP FOR 2 SECONDS
	DOXSTM

/*OVERLA	/DISC TERMINATION FOR OVERLAYS
OVERLA,	JMP SLEEP1	/PUT EAE TO SLEEP
	JMP I .+1	/OK, FINISH IT UP
	OVERL1

	IFNZRO .+16&100	<*.+177&7600-16>	/MAGIC!

/LEVEL-1 INTERRUPT CODE TO HANDLE USER IOT INTERRUPTS.
/WE MUST CHECK THE USER IOT FLAG BEFORE ANYTHING ELSE,
/EVEN THE CLOCK FLAG.  OTHERWISE, WE COULD TRIP ON
/SOMETHING ELSE FIRST AND LOSE THE USER'S IOT LOCATION.

UUOCAL=	WS1

UUO0,	DCA L2SA	/SAVE USER'S AC
	RTR
	DCA L2SVLK	/ AND LINK
	TAD 0
	DCA L2SV0	/ AND THE PC
	RIB
	DCA L2SF	/ AND FIELDS & MODE
	CINT		/CLEAR THE USER-INTERRUPT FLAG
	ION		/ AND ENABLE INTERRUPT - ZAP!! WE'RE IN LEVEL-2
	STA
	TAD L2SV0	/BACK UP USER PC TO POINT TO IOT IN QUESTION
	DCA UUOCAL
	STA		/GET POINTER TO USER PARAMETERS-1
	TAD L2SA
	DCA UUSRC	/SAVE FOR POSSIBLE BLT CALL
	JMS I UUOUDF	/SET USER DATA FIELD SELECT
	UDF		/SELECT USER DATA FIELD
	TAD I UUOCAL	/GET THE IOT THAT CAUSED ENTRY HERE
	CDF
	DCA UUOCAL	/SAVE IT
	TAD UUOCAL	/IS IT AN IOT OR A GROUP 2 OPERATE
	AND C1000
	SZA CLA
	JMP I UHALTA	/IT'S A HLT, OSR, OR SOME COMBINATION
	TAD UUOTBA	/IT'S AN IOT; NOW FIGURE OUT WHICH ONE
	DCA UUOSRL	/SET LOW END OF TABLE
	TAD UUOT1A
	DCA UUOSRH	/ AND THE ENTRY-LIMIT

/FIRST SEARCH FOR COMBINED RESIDENT IOTS (I.E. DEVICES)
	TAD UUOCAL	/FIRST SEE IF IT MIGHT BE MICRO-CODED
	AND C0770	/ZAP OFF THE MICRO PART AND THE 6000
	JMS UUOSR	/SEARCH FOR THE IOT
	JMP UUO3	/NOT FOUND
UUO1,	TAD I UUOPTR
	CLL RAL
	SPA CLA		/IS THIS A 'LONG' FIP IOT
	JMP .+4		/YES
	TAD UUOCAL
	AND C0377	/NO - ZAP BITS 0-3 SO FIP FREES PARAMETER BLOCK
	DCA UUOCAL
	SNL CLA		/IS 'PRIVILEGE' REQUIRED FOR THIS?
	JMP UUO2	/NO
	GETJTW		/YES - GET HIS STATUS WORD
	 JOBSTS
	AND UUOPRV
	SNA CLA		/DOES THIS USER HAVE PRIVILEGE NOW?
	JMP I UUOERA	/NO - "ILLEGAL IOT"
UUO2,	TAD UUOPTR
	TAD UUOTLL
	DCA UUOPTR	/NOW POINTS TO DISPATCH ADDRESS OR PARAMETER COUNT
	TAD I UUOPTR
	DCA UUOLNK
	TAD UUOLNK
	TAD C0100
	AND UU7600
	SZA CLA		/IS THIS ZERO OR A PARAMETER COUNT?
	JMP I UUOLNK	/NO - MUST BE RESIDENT ADDRESS; DISPATCH TO IT
	TAD UUOPTR
	JMS GETUSP	/YES - BUILD THE PARAMETER BLOCK FOR 'FIP'
	JMP I .+1	/THEN SHARE SOME 'UFILE' CODE TO CALL 'FIP'
	UUOFIP

UUO3,	TAD UUOT2A
	DCA UUOSRH	/SET THE ENTRY LIMIT
	TAD UUOCAL
	AND C0777
	JMS UUOSR	/SEARCH FOR THE WHOLE THING
	JMP I UUOERA	/NOT FOUND - "ILLEGAL IOT"
	JMP UUO1	/YES - FIND THE DISPATCH ADDRESS

/ROUTINE TO PEFORM A BINARY SEARCH ON THE TABLE OF IOTS.

UUOSR,	0
	CIA
	DCA UUOLNK
UUOSR1,	TAD UUOSRL
	CIA
	IAC
	TAD UUOSRH
	SNA SPA		/HAVE THE LIMITS BEEN REVERSED?
	JMP UUOSR4	/YES - ENTRY NOT FOUND
	CLL RAR
	TAD UUOSRL
	DCA UUOPTR	/NO - SET NEW BISECTING POINTER
	TAD I UUOPTR
	AND C0777
	TAD UUOLNK
	SNA		/IS THIS THE ONE WE WANT?
	JMP UUOSR3	/YES
	SPA CLA		/NO - ARE WE TOO HIGH?
	JMP UUOSR2	/NO - MUST BE TOO LOW
	CLA CMA
	TAD UUOPTR
	DCA UUOSRH	/YES - BACK DOWN THE TOP LIMIT
	JMP UUOSR1
UUOSR2,	CLA IAC
	TAD UUOPTR
	DCA UUOSRL	/BRING UP THE BOTTOM LIMIT
	JMP UUOSR1
UUOSR3,	ISZ UUOSR	/FOUND THE ENTRY - SKIP ON RETURN
UU7600,
UUOSR4,	7600		/'CLA' AND -200
	JMP I UUOSR

UHALTA,	UHALT
	IFNZRO JSPRIV-400	<GLITCH; *.-1>
UUOPRV=	C0400	/JSPRIV
UUOTBA,	UUOTBL
UUOTLL,	UUODTB-UUOTBL
UUOT1A,	UUOT1E
UUOT2A,	UUOT2E
UUOUDF,	UDFSET
/THIS ROUTINE COPIES THE PARAMETERS SUPPLIED BY THE
/USER PROGRAM INTO *BLOCK IN FREE CORE, WHICH IS POINTED
/TO BY JOBLNK.
/THE IOT ITSELF IS SAVED IN THE FIRST WORD OF THE PARAMETER BLOCK
/IF NO ARGUMENTS ARE REQUIRED, JOBLNK CONTAINS THE IOT,
/RATHER THAN A POINTER TO THE IOT PARAMETER BLOCK.
/FIP CAN TELL BY EXAMING BITS 0-3 OF JOBLNK: IF THEY ARE
/NON-ZERO; JOBLNK IS AN ADDRESS. IF ZERO; JOBLNK IS THE IOT ITSELF
/NOW YOU KNOW WHY THE START OF THE  FREE CORE LIST MUST ALWAYS BE
/ON OR AFTER 400 OCTAL IN FIELD ONE?


UUOSRH,
GETUSP,	0		/ENTER WITH PTR -# ARGUMENTS TO GET
	DCA UUOPTR	/SAVE IT
	CLL CLA CMA RAL
	TAD FRECNT
	SPA SNA CLA	/CAN WE GET PARAMETER BLOCKS?
	REDO		/NO-TRY LATER
	TAD JOBDAT	/OK-NOW  GET PTR TO JOBLNK
	GETJTA
	 JOBLNK
	DCA UUOLNK	/AND SAVE IT
	TAD I UUOPTR
	SNA		/ANY ARGUMENTS?
	JMP GETUS1	/NO-JUST SAVE IOT IN JOBLNK
	DCA UUOPTR	/YES. SAVE # ARGUMENTS
	TAD UUOLNK	/PUT ADDRESS OF LINKAGE BLOCK IN UUOLNK
	GETBLK		/GET A FREE BLOCK
	REDO		/NONE AVAILABLE. TRY AGAIN LATER
	DATFLD
	TAD I UUOLNK	/GET ADDRESS OF PARAMETER BLOCK
	CDF
	DCA UUOLNK	/SAVE IT IN BLT CALLING SEQUENCE
	TAD UUDF	/MOVE USER PARAMETERS TO LINKAGE AREA IN DATFLD
	DCA .+2
	BLT
UUOSRL,	 0		/SOURCE FIELD SELECT
UUSRC,	 0		/SOURCE ADDRESS
	 DATFLD		/DESTINATION FIELD SELECT
UUOLNK,	 0		/DESTINATION ADDRESS
UUOPTR,	 0		/-# WORDS
GETUS1,	TAD UUOCAL	/NOW GET IOT
	DATFLD
	DCA I UUOLNK	/AND SAVE IT IN APPROPRIATE PLACE
	CDF
	JMP I GETUSP	/RETURN
	PAGE

/LEVEL-2 CLOCK HANDLER:
/	INCREMENT OUR DAY-CLOCK
/	RUN THE JOB WAIT-TIMERS
/	CHECK FOR HUNG DEVICES
/	DECREMENT JOB'S QUANTUM & RESCHEDULE IF NECESSARY
/
/*L2TIM3	/RETURN FROM 'TIMER' ROUTINE
/*TIMCDR	/CARD READ TIMER
/
SCHNJN=	WS0
ICLK2,	-INCLK2-1
ICLK1,	-INCLK1

L2TIME,	ISZ CLK1	/UPDATE LOW ORDER DAY CLOCK
	JMP L2TIM1
	ISZ CLK2	/UPDATE HIGH ORDER TIME. WOW!
	JMP L2TIM1
	ISZ DATE	/MIDNIGHT - INCREMENT THE DATE
	TAD ICLK2	/REINITIALIZE THE CLOCK FOR ANOTHER
	DCA CLK2	/ 24 HOURS WORTH OF TICKS
	TAD ICLK1
	DCA CLK1

/NOW WE DECREMENT ALL THE JOB WAIT-TIMERS (FROM 'STM').
L2TIM1,	CIF DATFLD
	JMS I TIMERA	/FIELD 1 ROUTINE TO RUN TIMERS
TIMCON,	 -5
	 L2OUT		/BUFFER-DRAIN CHECK
TIMPTR,	 0
	 L2PTR		/HUNG PTR CODE
TIMCDR,	 0
	 L2CDR		/HUNG CDR CODE
TIMSI,	 0
	 L2SI		/'SI' TIMEOUT CODE
TIMFIP,	 0
	 L2FIP		/'FIP' TIMEOUT CODE
TIM689,	 0		/CARRIER STATUS CHECK
	 L2689
L2TIM3,	ISZ JOBTIM	/BUMP THE USER'S QUANTUM
	NOP
	CIF		/DISABLE INTERRUPTS MOMENTARILY
	CLA CLL CMA
	TAD CLOCK
	DCA CLOCK
	SZL		/ANY MORE SYSTEM TICKS WAITING?
	JMP L2TIME	/YES - RUN THROUGH AGAIN

	IFDEF CLKMIS <
	TAD C7400
	DCA I CLKTMR	/RESET OUR CRASH-DETECTOR
	>
	RSCHED		/NOW RESCHEDULE

L2SI=	L2EXIT	/*****  TEMPORARY (MAYBE)  *****
L2FIP=	L2EXIT
L2689=	L2EXIT

	IFDEF CLKMIS <
CLKTMR,	CLKMIS
	>
TIMERA,	TIMER0
/SCHEDULE NEXT RESIDENT JOB
/THIS IS THE ENTRY FOR "SCHED"
/WE ONLY COME HERE AFTER FINDING THE JOB WE REALLY
/WANT TO RUN IS CURRENTLY INDISPOSED TO RUNNING. SCHED
/WILL FIND SOME RESIDENT JOB TO RUN. IF NO JOB IS
/RUNNABLE OR RESIDENT, JOB 0 (THE NULL JOB) IS RUN.

SCHEDI,	TAD I SCHMUC
	CLL RAL		/ *2  (WE MIGHT FIND A COMPUT-BOUND JOB)
	DCA NXTCNT	/NUMBER OF FIELDS *2
	TAD FANCOR
	DCA WS0		/START SEARCH WITH THE PHANTOM-FIELD
	TAD I SCHMUC
	DCA WS1
SCHEI1,	TAD I WS0
	AND SCHNTR
	SZA		/IS "NOTRUN" SET?
	JMP SCHEI3	/YES
SCHEI2,	ISZ WS0		/NO - INCREMENT THE POINTER
	ISZ WS1
	JMP SCHEI1	/ AND TRY AGAIN
	JMP SCHEI8	/SEARCH FOR RUNNABLE JOB

SCHEI3,	CMA
	AND I WS0	/CLEAR "NOTRUN"
	DCA I WS0
	TAD I WS0
	AND C0600
	SZA CLA		/IS IT A PHANTOM?
	JMP SCHEI4	/YES - THEN IT MUST BE READY TO RUN
	TAD I WS0
	RUNABL		/NO - IS THE JOB RUNNABLE?
	JMP SCHEI2	/NO
SCHEI4,	TAD I WS0	/YES
SCHEI5,	DCA SCHNJN
SCHEI6,	TAD SCHNJN
	AND C3777	/CAN'T ALLOW ANYTHING IF HE'S SWAPPING
	CORE		/SEARCH 'CORTBL' FOR HIM
	 FSWP+LOCK+FIP+SI+37
	SCHED		/NOT THERE - TRY IT ALL AGAIN
	DCA L2SF	/SET UP THE SAVE-FIELD
	TAD SCHNJN
	RESJOB		/RESTORE THE REST OF LEVEL-2 STUFF
	START		/ AND START HIM UP

SCHEI7,	DCA SCHNJN	/SET THE JOB NUMBER
	DCA CURJOB	/ AND CLEAR THE "REMEMBRANCE"
	JMP SCHEI6

/NO SIMPLE 'NOTRUN' FLAG FOUND - SEARCH FOR ANY RUNNABLE JOB.
SCHEI8,	DCA SCHNEW	/ANY JOB STARTED HERE CAN BE INTERRUPTED
NXTCOR,	ISZ NXTCNT
	SKP
	JMP I SCHNUA	/NOTHING TO RUN - JUST NULL-JOB AVAILABLE
NXTCO2,	ISZ NXTCOP	/BUMP THE CORTBL POINTER
	TAD NXTCOP
	TAD I NXTEND
	SZA CLA		/HIT THE END OF THE TABLE?
	JMP .+3		/NO
	TAD FANCOR
	DCA NXTCOP	/YES - RESET TO THE START
	TAD I NXTCOP	/GET THE NEXT ENTRY
	SNA		/IS THERE ANYONE THERE?
	JMP NXTCO4	/NO - CLEAR THE 'DEAD' FLAG
	AND NXTMSK
	SZA CLA		/IS IT FREE TO RUN NOW?
	JMP NXTCOR	/NO - IT'S SWAPPING OR SOMETHING
	TAD I NXTCOP
	RUNABL		/YES - IS IT ACTUALLY RUNNABLE?
	JMP NXTCO3	/NO, BUT IT WAS A GOOD TRY
	TAD I NXTCOP
	AND C0037
	TAD JOBTBA	/YES - GET THE 'JOBTBL' POINTER
	GETJTI		/ AND PICK UP 'STR0'
	 JOBSTS
	AND NXTFAN
	SZA CLA		/IS HE IN NEED OF A PHANTOM?
	JMP NXTCOR	/YES - CAN'T GO NO FURTHER
	TAD I NXTCOP	/NO - REGET THE JOB NUMBER
	JMP SCHEI5	/ AND LET HIM FLY
/
NXTCO3,	CLA CMA
	TAD NXTCOP	/SAVE THE POINTER-1 BECAUSE
	DCA DEAD	/ IT POINTS TO A DEAD JOB
	TAD NXTCOP
	TAD NXTFLD	/FIGURE THE FIELD NUMBER
	JMS I NXTDSK	/IS THE DISC ACTIVE THERE?
NXTCO4,	DCA DEAD	/YES - SO IT'S NOT DEAD AFTERALL
	JMP NXTCOR
/
SCHNUA,	SCHNUL
SCHMUC,	CORCNT	/POINTER TO NUMBER OF USER FIELDS
	IFNZRO NOTRUN-1000	<GLITCH; *.-1>
SCHNTR=	C1000	/NOTRUN
	IFNZRO SI-200	<GLITCH; *.-1>
SCHSI=	C0200	/SI
NXTCNT,	0		/NUMBER OF FIELDS TO CHECK
NXTCOP,	CORTBL+1	/ROUND-ROBIN CORTBL POINTER
NXTDSK,	DSKACT
NXTEND,	CORTBE		/END OF CORTBL
NXTFAN,	JSIOT+7
NXTFLD,	-CORTBL+1
NXTMSK,	FSWP+LOCK+FIP+SI
	PAGE

	IFNZRO JSIOT-100	<GLITCH; *.-1>
SCJIOT=	C0100	/JSIOT
	IFNZRO FIP-400	<GLITCH; *.-1>
SCFIP=	C0400	/FIP
	IFNZRO SI-200	<GLITCH; *.-1>
SCSI=	C0200	/SI
	IFNZRO LOCK-2000	<GLITCH; *.-1>
SCLOCK=	CLA CLL CML RTR	/LOCK BIT  AC = 2000
	IFNZRO JSEREN-2000	<GLITCH; *.-1>
SCHERN=	CLA CLL CML RTR	/JSEREN BIT    AC = 2000
FANFLD=	C0002		/PHANTOMS ALWAYS RUN IN FIELD 2

	IFNZRO FSWP-4000	<GLITCH; *.-1>
C4037,	4037	/FSWP + JOB # MASK
SCDACT,	DSKACT
SCHE7A,	SCHEI7
SCHMAX,	-JOBMAX-JOBMAX-1
SCHNCT,	NXTJCT
SCHNXA,	NXTJOB
/
/*WSCHED	/'WAIT' ENTRY
WSCHED,	ION
	SAVJOB		/SAVE IT'S STATE. JOB:=0 ('WAIT' ENTRY)
	CLA CMA
	DCA SCHNEW	/SET FLAG FOR FULL TIME-SLICE
	TAD CURJOB
	SZA		/DID WE INTERRUPT SOMETHING BEFORE?
	JMP I SCHE7A	/YES - RESTART IT
	TAD SQREQ
	SZA CLA		/SWAP REQUEST IN PROGRESS?
	SCHED		/YES - NO POINT IN TRYING; TRY A RESIDENT JOB
	TAD SCHMAX
	DCA I SCHNCT	/SET THE COUNTER IN THE 'NEXT JOB' ROUTINE
	TAD FIT
	SZA		/HAVE WE ALREADY DECIDED ON THE NEXT JOB?
	JMP SCHED3	/YES, SO SKIP AS MUCH CODE AS POSSIBLE
	TAD COMCNT	/NO. S.I. REQUEST?
	SZA CLA
	JMP SCHED6	/YES, SCHEDULE SI
	TAD FIPJOB
	SZA		/ANYTHING WAITING FOR 'FIP'?
	JMP SCHED7	/YES
SCHED1,	JMS I SCHNXA	/NO - GET NEXT RUNABLE JOB
	DCA FIT		/SAVE JOB #
	DCA BONUS	/BONUS JOB ALREADY PICKED UP
	TAD FIT
	TAD JOBTBA
	GETJTI		/GET CONTENTS OF STR0
	 JOBSTS
	DATFLD
	AND SCJIOT
	SZA CLA		/FIP REQUIRED?
	JMP SCHED7	/YES
	TAD I JOBSWA	/NO
	AND C0007
	SNA CLA		/ANY ERROR BITS SET?
	JMP SCHED9	/NO
	SCHERN		/YES
	AND I JOBSWA
	SNA CLA		/CAN HE HANDLE THE ERROR?
SCHED6,	TAD SCSI	/NO - CALL FOR SI
	SKP
SCHED7,	TAD SCFIP
	TAD FIT
	DCA FIT
SCHED9,	CDF
	TAD FIT
SCHED3,	AND C0600
	SNA		/IS THE 'FIT' JOB FIP OR SI?
	JMP SCHE11	/NO
	AND I FANCOR
	SNA CLA		/IS IT THE PROPER PHANTOM?
	JMP SCHE15	/NO- SCHEDULE THEIR SWAP IN
	TAD I FANCOR	/YES-IS THE PHANTOM ABOUT TO BE SWAPPED OR IN USE?
	AND C4037	/SWAP + JOB #
	SZA CLA
	JMP .+4		/YES-NOT MUCH TO DO NOW
	SCLOCK		/LOCK PHANTOM FOR THIS JOB
	TAD FIT		/NO-LOCK PHANTOM FOR THIS USER
	DCA I FANCOR	/INDICATE THAT THIS FIELD IS NOW LOCKED
	DCA FIT		/CLEAR FIT
	TAD I FANCOR	/IS THE SWAP COMPLETE?
	SPA CLA
	SCHED		/NO-FIND SOMETHING ELSE TO DO
	TAD FANFLD	/YES-DISC ACTIVITY HERE?
	JMS I SCDACT
	JMP SCHED1	/YES-FORGET ABOUT PHANTOM FOR NOW
	TAD I FANCOR	/NO
	JMP I .+1	/NOW GO FINISH BOOKKEEPING
	SCHEI5

SCHE11,	TAD FIT		/IS FIT JOB IN CORE?
	CORE
	 FSWP+LOCK+FIP+SI+37
	JMP SCHE10	/NO-HE HAS TO BE SWAPPED IN
	DCA L2SF	/SAVE FIELD
	TAD FIT		/RESTORE LEVEL 2 REGISTERS
	RESJOB
	DCA FIT		/CLEAR FIT
	START		/START JOB

SCHBSY,	FSWP+LOCK	/CAN'T CHECK 'NOTRUN' UNLESS NXTJOB CLEARS IT

SCHE15,	TAD I FANCOR	/FANFLD LOCKED, SWAPPED, OR NOTRUN?
	AND SCHBSY
	SZA CLA
	JMP SCHED1	/YES- GO FIND SOMETHING ELSE TO DO NOW
	TAD I FANCOR	/IS THERE CURRENTLY A USER JOB IN FANFLD?
	AND C0037
	SZA CLA
	JMP SCHE16	/YES, FORCE IT OUT
	TAD FANFLD	/NO; FINISH:=FANFLD
	JMP SCHE14

SCHE16,	TAD I FANCOR	/IS A PHANTOM IN HERE?
	AND C0600
	SZA CLA
	JMP SCHED1	/YES, GO FIND ANOTHER JOB TO RUN
	TAD FANFLD	/FORCE JOB OUT OF FANFLD
	DCA FORCE
	JMP SCHFR1

SCHE10,	CORE		/HAVE A TOTALLY EMPTY FIELD?
	 7777
	JMP SCHFR1	/NO - SOMETHING HAS TO GO
SCHE12,	AND C0007	/YES - GET THE FIELD NUMBER
SCHE14,	DCA FINISH	/FINISH:=FIELD #
	TAD FINISH	/SET SWAP BIT IN CORTBL ENTRY
	TAD CORTBA
	DCA SUJT2	/POINTS TO CORTBL ENTRY
	SCHSWP
	TAD FIT		/SET 'FSWP' BIT AND THE JOB NUMBER
	DCA I SUJT2	/ AND SAVE IT IN CORTBL
	JMP I SCSWAP	/SWAP IN
SCHFR1,	TAD FORCE
	SNA		/DO WE ALREADY KNOW WHAT TO SWAP?
	JMP I SCHSCN	/NO - SCAN EVERYTHING FOR THE BEST FIELD TO GO
	JMS I SCDACT	/YES - BUT IS DISC I/O ACTIVE THERE?
	SCHED		/YES - CAN'T FORCE IT OUT OR TRANSFER WILL BE MESSED UP
	TAD FORCE
	TAD CORTBA
	DCA SUJT2	/CORTBL POINTER TO FORCED FIELD
	JMP I .+1	/NOW GO SET UP THE OUTSWAP
	SWPOUT

SCHSCN,	SCNSWP
	IFNZRO FSWP-4000	<GLITCH; *.-1>
SCHSWP=	CLA CLL CML RAR	/AC=4000
SCSWAP,	SWAPIN
SUJT2=	WS0
	PAGE
/ROUTINE TO RECOGNIZE AND REPLY TO ^C
/CALLED ONLY FROM 'GIR':
/	JMS GIRCT0
/	IN SI
/	PROGRAM RESTART HANDLED

GIRCT0,	0
	DATFLD
	JMS I GIRFB	/IS IT IN 'SI' MODE?
	JMP I GIRCT0	/YES - JUST RETURN
	TAD CONDDB
	JMS I GIRJBA	/FETCH THE JOB NUMBER AGAIN
	CDF
	CIF 10
	JMS I GIRDTS	/STOP ANY DECTAPE
	TAD CONDDB
	JMS I GIRJBA	/NO - GET USER'S JOB #
	TAD JOBTBA	/WE GET HIS JOB # BACK AGAIN
	GETJTI		/PICK UP HIS STR0
	 JOBSTS
	RAL		/CLEAR RUN BIT
	CLL CML RAR	/ & FORCE IT BACK ON
	DATFLD
	DCA I JOBSWA
	ISZ JOBSWA	/POINTS TO STR1
	TAD I JOBSWA
	AND GIRFC1	/CLEAR HIS COMPLETION BITS & JSWAIT
	DCA I JOBSWA
	CLA CLL CML RTL	/AC = 2
	TAD JOBSWA
	DCA WS1		/POINTS TO WAIT-MASK 1
	TAD I WS1
	AND GIRFC2	/CLEAR ALL NON-CRITICAL WAIT-BITS
	ISZ WS1
	TAD I WS1	/ AND GET THE RK05 & TC08 BITS
	SNA CLA		/IS HE STILL WAITING FOR SOMETHING?
	ISZ I JOBSWA	/NO - INDICATE NO WAIT IN STR1
	ISZ GIRCT0	/INDICATE THIS WAS A PROGRAMMATIC RESTART
	JMP I GIRCT0	/ & RETURN

GIRDTS,	F1DTST		/FIELD 1 ROUTINE TO STOP DECTAPES
GIRFB,	CHKSI
GIRFC1,	-JSTIME-JSDEL-JSWAIT-1	/ (ZAP '-JSTEL'?)
GIRFC2,	JSF0+JSF1+JSF2+JSF3
GIRJBA,	DEVJOB

/ROUTINE TO CHECK FOR AND HANDLE LINE-FEED & RUBOUT.
GIRLRB,	0
	TAD GIRRUB
	TAD TTCHAR
	SNA		/RUBOUT?
	JMP GIRLR4	/YES
	TAD GIRLF
	SZA		/LINE-FEED?
	JMP GIRLR2	/NO - CHECK FOR SI BREAK
GIRLR1,	TAD GIRECH
	JMP GIRLR3	/SET 'ECHO' FLAG IN THE DDB
/
/WE SHOULD REALLY CHECK THE 'FULL' FLAG AND SKIP THE BREAK
/CHECK IF WE CAN'T STORE THE BREAK ANYWAY.
GIRLR2,	ISZ GIRLRB
	AND GIRMSK	/FILTER OUT SIGNIFICANT BITS
	SZA CLA		/IS THIS A BREAK CHARACTER FOR SI?
	JMP I GIRLRB	/NO - STORE & ECHO
GIRLR3,	TAD GIRSCM
	DCA .+3
	TAD CONDDB
	IOR		/SET 'SICOM' AND MAYBE 'DECHO'
	 .-.
	ISZ COMCNT	/ AND INDICATE A COMMAND IS WAITING
	JMP I GIRLRB	/THEN RETURN (TO ECHO & STORE, IF DECHO)
/
GIRLR4,	TAD I CONDDB
	AND GIRSCM
	SZA CLA		/IS 'SI' ALREADY PROCESSING THE BUFFER?
	JMP I GIRLRB	/YES - CAN'T RUBOUT ANYTHING NOW
	TAD CONDDB
	TAD GIRCHR
	DCA GIRCNT	/SET POINTER TO THE CHARACTER COUNT
	TAD I GIRCNT
	CIA
	DCA GIRCNT	/NUMBER OF CHARACTERS TO SPIN THROUGH
	DCA WS0		/FAKE THE BREAK-MASK TO ZERO
GIRLR5,	TAD CONDDB
	FETCH		/FETCH A CHARACTER
	JMP GIRLR1	/BUFFER EMPTY
	DCA TTCHAR
	ISZ GIRCNT	/IS THIS THE LAST CHARACTER?
	SKP
	JMP I GIRLRB	/YES - RETURN TO ECHO IT
	TAD CONDDB
	STORE		/NO - RESTORE IT
	 ALLOK
	REBOOT		/SHOULD NEVER FAIL
	JMP GIRLR5
/
	IFNZRO DDBINC-5	<GLITCH; *.-1>
GIRCHR=	C0005	/DDBINC
GIRCNT,	0
GIRLF,	377-212
GIRMSK,	1374
GIRRUB,	-377
GIRECH,	DECHO
	IFNZRO SICOM-100	<GLITCH; *.-1>
GIRSCM=	C0100
/COMBINED RESIDENT IOTS

P=	4000	/PRIVILEGE REQUIRED
L=	2000	/LONG 'FIP' IOT (PARAMETER PACKET RETURNED)

UUOTBL,	010	/READER
	020	/PUNCH
	030	/KEYBOARD
	040	/TELEPRINTER
	050	/NSCI1 (NONSTANDARD CHARACTER INPUT DEVICE)
	060	/NSCO1 (NONSTANDARD CHARACTER OUTPUT DEVICE)
	070	/NSCI2
	100	/NSCO2
	500	/RESERVED FOR FUTURE USE
UUOT1E,	660	/PRINTER

/NON MICRO-CODED IOTS

	004	/UGTF - GET FLAGS
	005	/URTF - RESTORE FLAGS (LINK & GT ONLY)
	006	/SGT - SKIP IF 'GT' FLAG IS SET
	200	/CKS - CHECK STATUS
	400	/KSB - SET KEYBOARD BREAK
/
	401	/SBC - SET BUFFER CONTROL FLAGS
	402	/DUP - DUPLEX TELETYPE CONSOLE
	403	/UND - UNDUPLEX TTY
	405	/CLS - CLEAR STATUS
	406	/SEGS - RETURN # FREE DISC SEGMENTS
/
	411	/URT - USER RUN TIME
	412	/TOD - TIME OF DAY
	413	/RCR - RETURN CLOCK RATE
	414	/DATE
	415	/SYN - QUANTUM SYNCHRONIZATION
/
	416	/STM - SET TIMER
	417	/SRA - SET RESTART ADDRESS
	420	/TSS - SKIP ON TS8
	421	/USE - USER
	422	/CON - USER CONSOL
/
	423+P	/PEEK - LOOK IN MONITOR CORE
	430	/SSW - SET SWITCH REGISTER
	431	/SEA - SET ERROR ADDRESS
	440	/ASD - ASSIGN DEVICE
	442	/REL - RELEASE
/
	600	/REN - RENAME FILE
	601+L	/OPEN - OPEN FILE
	602	/CLOS - CLOSE FILE
	603+L	/RFILE
	604	/PROT - PROTECT FILE
/
	605+L	/WFILE
	606+L	/XOPEN - OPEN WITH EXCLUSIVE USE
	607+P	/CPASS - CHANGE USER'S PASSWORD
	610	/CRF - CREATE FILE
	611	/EXT - EXTEND FILE
/
	612	/RED - REDUCE FILE
	613+L	/FINF
	614	/SIZE
	615+P	/LOGOUT
	617	/ACT - ACCOUNT NUMBER
/
	620	/BCLR - CLEAR MFD BILLING FIELDS
		IFNZRO CDR <
	632	/RCRA - READ CARD ALPHA
	634	/RCRB - READ CARD BINARY
		IFNZRO CPU&7776 <
	636	/RCRC - READ CARD COMPRESSED (8/E ONLY)
		>>
		IFNZRO RK05+RK8E <
	743+P	/DLAG - RK05 READ & WRITE
		>
/
		IFZERO TC01-1 <
	764	/DTXA - LOAD STATUS REGISTER A
		>
	771	/DTSF - SKIP ON DT FLAGS
	772	/DTRB - ALSO 'RDS' FOR RK05 AND CDR
UUOT2E,	773	/DTSF DTRB - MICROCODED


/COMBINED RESIDENT IOT DISPATCH

UUODTB,	UPTR	/READER
	UPTP	/PUNCH
	UKEY	/KEYBOARD
	UTEL	/TELEPRINTER
	UNSCI1
	UNSCO1
	UNSCI2
	UNSCO2
	UUOERR	/RESERVED FOR FUTURE USE
	ULPT	/LPT SERVICE

/DISPATCH OR PARAMETER COUNTS FOR THE REMAINING IOTS.

		IFNZRO CPU&7776 <
	UGTF
	URTF
		>
		IFZERO CPU&7776 <
	UUOERR
	UUOERR
		>
		IFZERO CPU-2 <
	USGT
		>
		IFNZRO CPU-2 <
	UUOERR
		>
	UCKS
	UKSB
/
	USBC
	UDUP
	UUND
	UCLS
	USEGS
/
	UURT
	UTOD
	URCR
	UDATE
	USYN
/
	USTM
	USRA
	UTSS
	UUSE
	UCON
/
	UPEEK
	USSW
	USEA
	0	/ASD
	0	/REL
/
	-6	/REN
UFILWC,	-6	/OPEN
	0	/CLOS
	UFILE
	0	/PROT
/
	UFILE
	-6	/XOPEN
	-6	/CPASS
	-4	/CRF
	-4	/EXT
/
	-4	/RED
	-2	/FINF
	USIZE
	0	/LOGOUT
	UACT
/
	0	/BCLR
		IFNZRO CDR <
	UUCDR0+2
	UUCRD0+1
		IFNZRO CPU&7776 <
	UUCDR0
		>>
		IFNZRO RK05+RK8E <
	URK050
		>
/
		IFZERO TC01-1 <
	UDTXA0
		>
	UUOEX2
	UDTRB
	UDTRBS	

/START USER DISC REQUEST FROM QUEUE.  WHEN THIS ROUTINE IS
/CALLED, THERE MUST BE SOMETHING IN SQREQ OR DSUTBL,
/IT WON'T STOP LOOKING!
/CALL	JMS DSUSER
/	RETURN

DSUSER,	0
	TAD SQREQ	/IS A SWAP REQUESTED?
	SZA CLA
	JMP DSUSR2	/YES, DO IT FIRST
	DATFLD
DSUSR1,	TAD I DSKPTR	/GET ENTRY FROM DSUTBL
	SNA		/ANYTHING HERE?
	JMP DSUSR1	/NO - CHECK NEXT POSITION
	CMA
	SNA		/REACHED END OF LIST (-1)?
	JMP DSUSR3	/YES - RESET THE POINTER
	CMA
	CDF
	DSGO		/YES, START IT UP
	JMP I DSUSER	/AND BACK
DSUSR2,	JMS I SWPIOA	/START A SWAP DISC IO
	JMP I DSUSER	/RETURN BACK

DSUSR3,	TAD DSUSTB	/START OF 'DSUTBL'
	DCA DSKPTR
	JMP DSUSR1

DSUSTB,	DSUTBL-1+7

/ROUTINE TO HANDLE THE CLEAR-STATUS (CLS) IOT.
/IOT CALL:
/	TAD (PKT
/	CLS		/CLEAR ERROR FLAGS & SUCH
/	 :
/PKT,	0007		/BITS TO CLEAR IN STR0
/	0002		/ STR1
/	0000		/ AND THE DEVICE STATUS WORD

UCLS,	GETJTW		/GET THE POINTER TO STR0
	 JOBSTS
	CLA CLL CMA RTL	/AC = -3
	DCA UCLSCT	/SET THE WORD COUNT
	TAD UCLSMK
	SKP		/DON'T LET HIM MESS UP STR0
UCLS1,	CLA CMA
	UDF
	AND I L2SA	/GET HIS CLEARING MASK
	CMA
	DATFLD
	AND I JOBSWA	/CLEAR THE BITS FROM STR0, STR1, & D.S.R.
	DCA I JOBSWA	/ AND PUT THEM BACK
	ISZ L2SA	/INCREMENT HIS POINTER
	NOP
	ISZ JOBSWA	/ OUR POINTER
	ISZ UCLSCT	/ AND THE COUNTER
	JMP UCLS1
	DCA L2SA	/CLEAR HIS AC
	UUOEXT		/ AND EXIT
/
UCLSCT=	WS0
UCLSMK,	JSEREN+JSPRIV+JSRSEN+7	/ONLY ALLOW EXTERNAL STUFF TO CLEAR


/ROUTINE TO DECREMENT THE DISC ACTIVITY-COUNT &
/START UP THE NEXT TRANSFER IF THERE IS ONE.
DSKCON,	0
	CLA CLL CMA
	TAD DSBUSY
	DCA DSBUSY	/DECREMENT COUNT
	SZL CLA		/IS IT NOW -1?
	JMS I FIUSER	/NO - START THE NEXT TRANSFER
	JMP I DSKCON	/YES - THEN THERE IS NO MORE
	IFZERO CPU-3 <
DC02EN,	0			/THIS SUBROUTINE ENABLES ALL STATIONS AND ALL GROUPS
	CLA CMA
	MTON
	CLA			/THEY'RE ENABLED NOW
	JMP I	DC02EN		/BYE BYE


DC02SL,	0			/THIS ROUTINE SELECTS A GIVEN STATION AND GROUP
	TAD	DC7777		/ENTERED WITH LINE NUMBER IN AC.
	DCA	DC02EN		/SAVE FOR A SECOND
	TAD	DC17
	MTON			/DISABLE ALL GROUPS
	CLA
	TAD	DC02EN		/REGET THE LINE NUMBER
	RTR
	RAR
	AND	C0003		/JUST MAJOR GROUP NUMBER
	CMA			/ONE'S COMP NEGATE
	DCA	DCTEMP		/NOW PREPARE TO SET UP THE GROUP BITS.
	TAD	DC0220		/GROUP 1 BIT OFFSET ONE.
	CLL RAR			/NOW SHIFT THE GROUP BIT ACCROSS
	ISZ	DCTEMP		/DONE?
	JMP	.-2		/NOPE
	DCA	DCTEMP		/SAVE GROUP BIT NOW IN DCTEMP
	TAD	DC02EN		/REGET THE LINE NUMBER
	AND	C0007		/JUST THE STATION BITS NOW
	CMA CLL CML		/SET THE LINC TO 1 WHILE NEGATING IT
	DCA	DC02EN
	RAR			/ROTATE STATION BIT
	ISZ	DC02EN		/DONE
	JMP	.-2		/NOPE. LOOP
	TAD	DCTEMP		/ADD IN THE GROUP BIT
	MTON			/SELECT IT, BABY
	CLA
	JMP I	DC02SL		/AND RETURN NOW

DCTEMP,	0
DC17,	17
DC7777,	-1

TSER,	TAD	DC02LN		/GET THE LINE NUMBER NOW
	TAD	TBUFF		/GET THE TTY BUFFER NOW
	DCA	KTBUF		/SAVE FOR A SECOND NOW
	TAD I	KTBUF		/DOES HE HAVE A CHARACTER THERE?
	SPA CLA
	JMP	TSERX		/NOPE. JUST CLEAR THE FLAG
	TAD I	KTBUF		/GET THE CHARACTER NOW
	JMS I	TSERPP		/OUTPUT IT USING THE SPECIAL LITTLE ROUTINE NOW
DC02LN,	0			/LINE NUMBER
	CLL CML RAR		/SET THE HIGH ORDER BIT ON[I HOPE THIS WORKS]
	DCA I	KTBUF		/STASH AWAY
	JMS	DC02EN		/ENABLE THE TTY'S NOW
	DISMIS			/DISMIS IT.

TSERPP,	JBDC02			/POINTER TO THE CHARACTER PUTTER

TSERX,	TAD	DC02LN		/GET THE LINE NUMBER NOW
	SZA
	JMP	TSERX1		/IT'S THE DAMN DC02. WHAT A PAIN
	TCF
	JMP	TSERC		/CLEAN UP AND EXIT

TSERX1,	JMS	DC02SL		/SELECT THE RIGHT TTY
	MTCF
	JMP	TSERC		/CLEAN UP AND EXIT

KSER,	TAD	DC02LN		/GET THE LINE NUMBER NOW
	TAD	KBUFF
	DCA	KTBUF		/PLAY AROUND WITH THE BUFFER POINTERS
	TAD	DC02LN		/REGET THE LINE NUMBER NOW
	SZA
	JMP	KSSER1		/DC02 INPUT
	KRB			/READ IN THE CHARACTER NOW
	JMP	KSSER2		/COMMON FIXER

KSSER1,	JMS	DC02SL		/SELECT THE LINE NOW
	MKRB			/READ IN THE CHARACTER NOW

KSSER2,	TAD	C1000		/FORCE THE CHARACTER NON-ZERO
TSERC,	DCA I	KTBUF
	JMS	DC02EN
	ISZ	ECHOFL
	DISMIS			/NOT ECHOING
	TAD	.+2
	DISMIS			/RETURN NOW
	ECHO			/WITH ECHO POINTER IN THE AC.
ECHOFL,	-1

KTBUF,	0
DC0220,	20			/GROUP STARTER UPPER
	>
	PAGE
/TSS/8 CRASH-RECOVERY BOOTSTRAP
/WE JUST LOAD 'INIT' AND START IT.
/
/IN THE (VERY RARE) EVENT THE SYSTEM SHOULD CRASH OR (MORE LIKELY)
/A POWER OR HARDWARE FAILURE OCCURS, THIS ROUTINE MAY BE STARTED
/AT LOCATION 4200 IN FIELD 0.
/*RELOAD	/AUTO-RESTART STARTUP
RELOAD,	DCA RBOOT	/SAVE THE CRASH-ADDRESS
	SKP
RBOOT,	0		/ENTRY FOR AUTOMATIC RESTART
	IOF
	NOP		/ (ROOM FOR POSSIBLE HLT)
	IFZERO DEBUG&7-2&4000	<*.-1; JMP .>

BOOT,	CDF
	CLA CLL CMA
	DCA I B7751	/SET THE CORE ADDRESS -1
	DCA I B7750	/ & THE WORD-COUNT
	TAD BTFLD	/GET THE 'INIT' FIELD

	IFZERO RF08 <
	DIML
	CLA STL RTL
	DXAL		/'INIT' IS ON TRACK 2
	>
	IFZERO RF08-40 <
	DEAL
	CLA
	NOP		/FOR SIZE ONLY
	>
	DMAR		/READ THE TRACK
	DFSC		/ & WAIT
	JMP .-1
	TAD RBOOT
	CIF CDF INFLD
	JMP I .+1	/NOW START 'INIT'
	AUTOST

B7751,	7751
B7750,	7750
	IFZERO RF08 <
BTFLD,	INFLD
	>
	IFZERO RF08-40 <
BTFLD,	200+INFLD	/FIELD & TRACK
	>
/THIS CODE RE-STARTS THE CLOCK & ALLOWS THE CONTINUATION
/OF A SYSTEM THAT WAS STOPPED IN 'NULJOB'.

CONTIN,
	IFZERO DC08A <
		IFZERO CPU-1 <
	CLA CLL CMA
	CCF CLB		/SET PDP-8 CLOCK COUNT
		>
		IFNZRO CPU-3 <
	CECI		/RE-ENABLE THE PDP-8 CLOCK
		>
		IFZERO CPU-3 <
	TAD PT12TM	/GET THE NUMBER OF TICKS PER OVERFLOW
	CLAB		/SEND TO THE CLOCK CONTROLLER
	CLA
	TAD PT12CM	/GET THE MAJOR CLOCK COUNT RATE
	CLLR		/AND SEND IT TO THE CONTROLLER
	CLA
	TAD PT12IN	/SET UP INTERRUPTS AND SO ON.
	CLEN
	CLSA		/ & START THE CLOCK GOING
	CLA CMA		/SET TO ENABLE ALL SETS
	MTON
	CLA IAC		/ AND ALSO THE INTERRUPTS
	MINT		/ FOR THE FANTASTIC DC02
	CLA
		>
	>
	IFNZRO DC08A <
	TT8ON		/TURN ON THE DC08 CLOCK
	>
	IFZERO D689-4 <
	EDF		/RE-ENABLE THE DATA PHONES
	>

SCHNUL,	TAD C0100	/RUN NULL JOB IN USER MODE.
	DCA L2SF	/FIELD 0; USER MODE
	TAD SCHNJA
	DCA L2SV0
	ISZ L2SA	/BUMP THE SAVED AC
	NOP
	EXIT		/OFF TO NULL JOB

SCHNJA,	NULJOB

	IFZERO CPU-3 <
	DECIMAL
PT12TM,	-50		/50 MILLISECONDS PER INTERUPT
	OCTAL
PT12CM,	4100		/1 M.S. PER CLOCK TIC.
PT12IN,	300
	>

/"RSCHED" IS ENTERED AT THIS POINT
/RSCHED'S FUNCTION IS TO FIND JOBS TO RUN, REGARDLESS
/OF WHERE THEY MAY CURRENTLY RESIDE. IF THEY ARE IN CORE,
/GOOD; IF NOT THE NECESSARY STEPS WILL BE TAKEN TO
/BRING THEM INTO CORE. IN THE LATTER CASE, WE WILL THEN
/GO OFF AND FIND SOMETHING TO DO WHILE THE NON-RESIDENT
/JOB IS MADE RESIDENT

/*SCHED0	/'RSCHED' ENTRY
SCHED0,	TAD JOB
	AND C0600
	SZA CLA		/IS THIS A PHANTOM?
	EXIT		/YES - CAN'T BUMP IT OFF
	TAD SCHNEW
	SZA CLA		/DOES THIS JOB GET A FULL SLICE?
	TAD JOBTIM	/YES - IS IT RUNNING ON BORROWED TIME?
	SPA CLA
	EXIT		/NO, GO BACK TO IT
	WAIT		/YES - START THE SCHEDULER


/CODE TO BEGIN A FILE LOAD INITIATED BY 'SI'; ALSO USED TO
/CONTINUE A LONG TRANSFER BY ANYONE ELSE.
/*READFI	/SI FILE-LOADER

READFI,	TAD SIREG
DSUEXT,	DCA RDFJOB
	JMS REMJOB	/REMEMBER WHO WE'RE KICKING OFF
	TAD RDFJOB	/FIND RESIDENT FIELD FOR THIS JOB
	CORE
	 FSWP+FIP+SI+37	/ANY FIELD WITH THIS JOB IN IT IS OK
	REBOOT		/IF IT'S NOT THERE WE'RE SCREWED
	DCA L2SF	/RESTORE FOR THIS JOB
	TAD RDFJOB
	RESJOB		/RESTORE LEVEL TWO FOR THIS JOB
	GETJTW		/GET ADDRESS OF FILE PARAMETER BLOCK
	 JOBLNK
	DATFLD
	JMP I .+1	/ AND OFF TO FILE HANDLER
	SIFILE
/
RDFJOB=	WS0


/ROUTINE TO SET THE ERROR CODE FOR HUNG RK05 OR DECTAPE
/DETECTED IN FIELD 1 HANDLERS.

/*DTRKHG	/ERROR SETTING FROM FIELD 1
DTRKHG,	0
	ERROR		/JOB NUMBER IS PASSED IN THE AC
	 HUNGDV
	CIF DATFLD
	JMP I DTRKHG	/ AND BACK TO FIELD 1

/*RKL20		/LEVEL-2 DISPATCH FOR RK05
RKL20,	CIF DATFLD-1
	JMP I .+1
	RKL21

/ROUTINE TO SAVE THE CURRENT JOB AND REMEMBER WHO WE BUMPED
/SO WE CAN CONTINUE HIM AFTER RESTARTING A DISC TRANSFER.

IOR1,
REMJOB,	0
	TAD SCHNEW
	AND JOB		/ONLY REMEMBER HIM IF HE'S STILL USING 
	DCA CURJOB	/ HIS ORIGINAL QUANTUM SLICE
	SAVJOB		/NOW SAVE HIS REGISTERS
	CLA CMA
	DCA SCHNEW	/ AND SET THE FLAG FOR A FULL RESCHEDULE
	JMP I REMJOB


/ROUTINE TO SET 'JSDEL' FOR THE JOB OWNING 'CONDDB'.
/ALSO GIVES HIM PRIORITY BY SETTING 'BONUS'.

GIRBRK,	0
	TAD CONDDB
	JMS I GIRJBB	/GET HIS JOB NUMBER
	DCA BONUS	/ TO UP HIS PRIORITY
	TAD GIRDLM
	JMS I SETFLG	/ AND SET THE DELIMITER BIT
	JMP I GIRBRK
/
GIRDLM,	JSDEL+JSTIME
GIRJBB,	DEVJOB


/INCLUSIVE OR
/CALL	TAD ADDRESS OF WORD TO SET
/	CDF+(FIELD)	/FIELD WHERE DATA-WORD RESIDES
/	IOR
/	 BITS TO SET
/	RETURN

IOR0,	0
	DCA IOR1
	TAD IOR1
	AND C7770
	SNA CLA		/IS THIS A RATIONAL ADDRESS?
		IFNZRO DEBUG <
	REBOOT		/NO - ERROR *****
		>
		IFZERO DEBUG <
	JMP IOREXT	/IN A PRODUCTION SYSTEM, JUST RETURN
		>
	RDF		/FIELD TO SET IT IN
	TAD .+2		/COMPUTE FIELD SELECT - FOR THAT FIELD
	DCA .+3		/SAVE IT
UDFCDF,	CDF
	TAD I IOR0	/GET BITS TO SET
	0		/SET FIELD AGAIN
	DCA IOR2	/SAVE THEM
	TAD IOR2
	CMA
	AND I IOR1	/CLEAR THE BITS IF ALREADY SET
	TAD IOR2	/NOW SET THEM
	DCA I IOR1	/SAVE NEW VALUE
IOREXT,	ISZ IOR0	/SKIP ARGUMENT IN CALL
	JMP I IOR0	/RETURN

/ROUTINE TO HANDLE THE 'ACT' IOT - RETURN ANY JOB'S ACCT #
UACT,	TAD L2SA	/GET THE DESIRED JOB #
	SNA		/HIS OWN JOB?
	TAD JOB		/YES
	AND C0037
	TAD JOBTBA
	GETJTI		/GET THE ACCOUNT #
	 JOBACT
	JMP UUSAC1	/ AND RETURN IT IN HIS AC

/RETURN SEVERAL SIMPLE VALUES TO THE USER.
	TICSPS
URCR,	TAD .-1		/RETURN THE REAL-TIME CLOCK-RATE
	JMP UUSAC1

UDATE,	TAD DATE	/RETURN TODAY'S DATE
UUSAC1,	DCA L2SA
	UUOEXT

/CODE TO HANDLE THE 'TSS' IOT.
	VERNUM
UTSS,	TAD .-1
	DCA L2SA	/RETURN THE MONITOR VERSION #
	JMP I .+1	/ AND SIMULATE SKIP
	UUOEX2

/ROUTINE TO SET UP SUBROUTINE 'UDF'.
IOR2,
UDFSET,	0
	TAD L2SF	/GET THE USER'S FIELD
	AND C0070
	TAD UDFCDF	/ & FORM A CDF INSTR.
	DCA UUDF
	JMP I UDFSET
	PAGE
/QUEUE DISC REQUEST
/CALL	TAD ADDRESS OF TRANSFER BLOCK
/	JMS DSQUE
/	RETURN

	IFNZRO FILPIF-2	<GLITCH; *.-1>
DSQFLD=	C0002	/FILPIF

DSQUE,	0
	DCA DSQUE1	/SAVE ADDRESS OF PARAMETER BLOCK
	TAD DSQUE1	/NOW GET POINTER TO WORD WITH FIELD & FILE DATA
	TAD DSQFLD
	DCA DSQUE2	/SAVE POINTER
	DATFLD
	TAD I DSQUE2	/GET FIELD # (BITS 7-9) AND FILE # (BITS 10-11)
	AND C0037	/USE THIS VALUE AS DSUTBL INDEX
	TAD DSUTBA
	DCA DSQUE2	/SAVE POINTER TO DSUTBL
	TAD DSQUE1	/GET PARAMETER ADDRESS
	DCA I DSQUE2	/SAVE IN DSUTBL
	CDF		/AND EXIT
	JMP I DSQUE

	IFNZRO JCOMBD-1000	<GLITCH; *.-1>
DSQUE1,
COMBND,	0
	TAD JOBTIM
	SZA CLA		/ANY PART OF HIS TIME-SLICE LEFT?
	JMP I COMBND	/YES - SO HE'S NOT COMPUTE-BOUND NOW
	GETJTW		/NO - GET HIS JOB STATUS-WORD
	 JOBSTS
	TAD C1000	/ AND SET THE 'JCOMBD' BIT
	DATFLD
	DCA I JOBSWA
	JMP I COMBND	/THEN RETURN
/RETURN CONTENT OF JOB STATUS FOR CURRENT JOB
/CALL:	GETJTW
/	 RELATIVE ADDRESS OF WORD
/	RETURN (VALUE IN AC, ADDRESS IN 'JOBSWA')

DSQUE2,
GETJW0,	0
	CDF
	TAD I GETJW0	/GET THE RELATIVE ADDRESS
	DCA .+3		/ AND SAVE IT
	TAD JOBDAT
	GETJTI		/NOW PICK UP THE WORD
	 0
	ISZ GETJW0	/SKIP PAST THE PARAMETER
	JMP I GETJW0	/ AND RETURN
/*L2EXIT	/LEVEL-2 EXIT ROUTINE
/LEVEL-2 EXIT ROUTINE -- WE CHECK THE KEYBOARD INPUTS,
/THEY HAVE TO BE HIGHEST PRIORITY; THEN WE CHECK FOR
/ANYTHING ELSE ON THE LEVEL-2 QUEUE.  IF WE'RE ALL CAUGHT
/UP, WE MAKE ONE LAST CHECK FOR TERMINAL OUTPUT NEEDS.
/THEN WE RESTORE WHATEVER USER WAS ACTIVE WHEN IT ALL STARTED.

CONINP,	CONIN
CONOUA,	CONOUT
L2KEY,	KEYC
L2QTA,	L2QTB-1
L2SFA,	L2SF
L2TFLG,	TTOFLG
	IFNZRO DSI-1000	<GLITCH; *.-1>
L2XCT1=	C1000	/DSI
L2XCT2,	CTRLC
L2XUFN,	SUF	/USER MODE

L2EXIT,	CDF
	CLA
	IOF
	TAD I L2KEY
	SZA CLA		/ANY KEYBOARD INPUT WAITING?
	JMP I CONINP	/YES - GRAB IT QUICK!
L2EX0,	TAD L2Q
	CIA
	TAD L2QE
	SNA CLA		/LEVEL-2 QUEUE DRAINED?
	JMP L2EX1	/YES
	TAD I L2QE	/NO - FETCH THE NEXT TASK
	DCA JOBSWA
	ION
	JMP I JOBSWA	/ AND OFF TO IT

L2EX1,	TAD L2QTA	/RESET EMPTY POINTER TO L2QUE
	DCA L2QE
	TAD L2QTA	/RESET FILL POINTER TO L2QUE
	DCA L2Q
	TAD I L2TFLG
	SNA CLA		/ANY OUTPUTTERS NEED SERVICE?
	JMP I CONOUA	/YES
	TAD L2SFA
RESTOR,	DCA WS0		/POINTER TO SAVED INFO
	TAD I WS0	/SAVED FIELDS AND STATE
	DCA 0		/RESTORE FIELDS AND MODE
	TAD 0
	AND C0070	/GET INSTRUCTION FIELD
	TAD C6203
	DCA RCIF	/CIF FOR PROPER FIELD
	TAD 0
	CLL RTL
	RAL
	AND C0070	/CDF FOR RETURN
	TAD C6201	/NOT NECESSARY EQUAL TO INSTRUCTION FIELD
	DCA RCDF
	TAD 0
	AND C0100	/USER PROGRAM, FIP OR SI?
	SNA CLA		/USER MODE OR EXEC MODE?
	JMP L2EX2	/EXEC MODE
	TAD L2XUFN
	DCA RUFF	/SET USER-MODE FLAG UPON EXIT
	TAD JOB
	SNA		/IS THIS A REAL JOB?
	JMP L2EX3	/NO - MUST BE NULJOB
	TTYUSE		/YES - GET HIS INPUT DDB
	DCA WS1
	DATFLD
	TAD I WS1	/PICK UP HIS DDB STATUS-BITS
	AND L2XCT1
	SZA CLA		/IS HE IN 'SI' MODE?
	JMP L2EX3	/YES - THEN ANY CTRL/C WOULD BE 'SI'S
	TAD I WS1
	AND L2XCT2
	SNA		/NO - WAS CTRL/C TYPED?
	JMP L2EX3	/NO
	CMA
	AND I WS1	/YES - CLEAR THE FLAG
	DCA I WS1
	GETJTW		/GET HIS PROGRAM-RESTART ADDRESS
	 JOBSRA
	DCA 0
	CLA CLL		/HIS AC & LINK GET CLEARED
	JMP RCIF	/ & HE'S RESTARTED
L2EX2,	TAD RCDF
	DCA RUFF	/LEAVE USER-MODE FLAG CLEARED FOR EXEC STUFF
L2EX3,
C6201,	CDF
	ISZ WS0
	TAD I WS0	/PC
	DCA 0
	ISZ WS0
	TAD I WS0	/LINK
	CLL RTL
	ISZ WS0
	CLA
	TAD I WS0	/AC
RCIF,	0
RCDF,	0
RUFF,	0		/'SUF' IF USER MODE, 'NOP' IF EXEC MODE
	ION
	JMP I 0		/BACK TO INTERRUPTED PROGRAM


/IF WE CAN'T FINISH AN IOT FOR LACK OF SYSTEM FACILITIES,
/WE BACK UP THE USER'S PC TO POINT TO THE SAME IOT AND
/HOPE THAT THINGS WILL LOOSEN UP SHORTLY.

/*REDO0		/'REDO' AND IOT
REDO0,	CLA CLL CMA
	TAD L2SV0	/BACK UP HIS PC
	DCA L2SV0
	WAIT		/ AND RESCHEDULE
	PAGE
	IFNZRO .-4200	<GLITCH; *.-1>

/STANDARD BOOTSTRAP AND RESTART ADDRESSES.

	JMP I .+2	/INIT BOOTSTRAP
	JMP I .+2	/RESTART ADDRESS
	BOOT
	CONTIN

/ROUTINE TO SET A FLAG IN THE USER STATUS REGISTER
/CALL:	 (CONDBA POINTS TO DEVTBL ENTRY)
/	TAD (FLAGS)
/	JMS PTSTAR
/
PTSTAR,	0
	DCA PTFLAG	/SAVE THE FLAGS
	TAD I CONDBA
	JMS I PTJOB	/GET THE OWNER'S JOB NUMBER
	SNA		/IS IT OWNED?
	JMP I PTSTAR	/NO - JUST RETURN
	TAD JOBTBA
	DCA PTSTRP	/YES - SET A POINTER TO HIS REGISTER
	CLA CLL CML RTL
	TAD I PTSTRP
	IOR		/NOW 'OR' THE FLAGS INTO HIS 'STR1'
PTFLAG,	 0
	JMP I PTSTAR	/THEN RETURN
/
PTJOB,	DEVJOB

	IFZERO CPU-2 <
USGT,	SGT		/SKIP ON EAE GREATER-THAN FLAG
	UUOEXT
	JMP I .+1	/SKIP ON RETURN
	UUOEX2
	>
	IFNZRO CPU&7776 <
UGTF,	TAD L2SVLK
	CLL RTL
	CLA RAL
	SGT		/SKIP ON THE GREATER-THAN FLAG
	SKP
	CLL CML RTR	/LINK = AC0, GT FLAG = AC1
	DCA L2SA
	UUOEXT

URTF,	CLA CLL CML IAC RTR	/AC=6000
	AND L2SA	/MASK OFF THE NEW LINK & GT FLAG
	RTF		/RESTORE THE GT FLAG & LINK
	CLA RTR
	DCA L2SVLK	/ AND SAVE HIS LINK
	UUOEXT
	>
/HANDLER FOR THE 'HLT' AND 'OSR' INSTRUCTIONS
/
UHALSA,	L2SA

UHALT,	TAD UUOCAL	/IS IT A 7404?
	AND C0004
	SNA CLA		/OSR?
	JMP UHALT1	/NO
	GETJTW		/YES, GET CURRENT VALUE OF SWITCHES
	 JOBSWR
	DCA UHALT2	/OR IT INTO AC
	TAD UHALSA	/WHICH IS RIDICULOUS, SINCE OSR
	IOR		/IS UNIVERSALLY CODED AS LAS, AND
PTSTRP,
UHALT2,	 0		/A SIMPLE "DCA L2SA" WOULD DO
UHALT1,	TAD UUOCAL	/NOW SEE IF IT WAS MICROCODED
	AND C0002	/HALT?
	SNA CLA
	UUOEXT		/NO
	GETJTW		/YES, CLEAR HIS RUN BIT
	 JOBSTS
	AND UHBITS
	TAD UJSHLT	/ & SET THE 'HLT' BIT
	DATFLD
	DCA I JOBSWA
	ISZ COMCNT	/INDICATE THAT 'SI' HAS WORK TO DO
	TAD JOB
	TTYUSE		/NOW GET HIS KEYBOARD NUMBER
	DCA CONDDB
	DATFLD
	JMS I USBCSI	/IS HE ALREADY IN SI MODE?
	WAIT		/YES
/?	TAD CONDDB
/?	CLRBUF		/NO - CLEAR HIS INPUT BUFFER
	TAD CONDDB
	IOR		/NOW SET THE 'SI' BIT
/?	 DSI		/ (MUST CLEAR 'DFULL' IF CLEARING INPUT)
	 DSI+SICOM
	ISZ CONDBA	/NOW POINTS TO OUTPUT ENTRY
	CDF
	TAD UH215
	PRINT		/PRINT THE 'CR-LF-DOT'
UH215,	215
	TAD UH212
	PRINT
UH212,	212
	TAD UHDOT
	PRINT
UHDOT,	".
/?	TAD USBDEL
/?	UUOEXT		/CLEAR 'JSDEL' (SINCE INPUT WAS CLEARED) AND RESCHEDULE
	WAIT

UHBITS,	-JSRUN-JSHLT-JSINER-1
UJSHLT,	JSHLT
/SET BUFFER CONTROL FLAGS

USBCSI,	CHKSI
	IFNZRO DFULL-400	<GLITCH; *.-1>
USBFFC=	C7377	/-DFULL-1
USBFLG,	CLSTR1
USBTEL,	JSTEL
	IFNZRO JSDEL-100	<GLITCH; *.-1>
USBDEL=	C0100	/JSDEL

USBC,	TAD JOB
	TTYUSE		/GET THE INPUT-DDB POINTER
	DCA CONDDB
	TAD L2SA
	CLL RAL
	SMA CLA		/CLEAR INPUT DDB?
	JMP USBC1	/NO
	DATFLD
	JMS I USBCSI	/YES - IS HE IN 'SI' MODE?
	JMP USBC1	/YES - CAN'T CLEAR INPUT NOW
	TAD CONDDB
	CLRBUF		/NO - CLEAR THE BUFFER
	TAD I CONDDB
	AND USBFFC	/CLEAR ANY 'FULL' FLAG
	DCA I CONDDB
	TAD USBDEL
	JMS I USBFLG	/ AND THE 'JSDEL' FLAG
USBC1,	TAD L2SA
	SMA CLA		/CLEAR THE OUTPUT SIDE?
	JMP USBC2	/NO
	ISZ CONDBA	/YES - NOW POINTS TO OUTPUT SIDE
	DATFLD
	TAD I CONDBA
	CLRBUF		/CLEAR THE BUFFER
	TAD USBTEL
	JMS I USBFLG	/ AND THE 'JSTEL' FLAG
USBC2,	DCA L2SA	/FINALLY, CLEAR HIS AC
	UUOEXT


/SKIP IF DISC IS NOT ACTIVE (IN A PARTICULAR FIELD)
/CALL:	TAD FIELD #
/	JMS DSKACT
/	 ..DISC ACTIVE
/	 ..DISC NOT ACTIVE

DAUTBL,	DSUTBL-1

DSKACT,	0
	CLL RTL		/FIELD * 4 IS MAJOR INDEX INTO DSUTBL
	TAD DAUTBL
	DCA AXS1
	DATFLD
	TAD I AXS1	/FILE # 0 BUSY?
	TAD I AXS1	/ "	1  "
	TAD I AXS1	/ "	2  "
	TAD I AXS1	/ "	3  "
	CDF
	SNA CLA		/IF ANY ONE WAS BUSY, AC .NE. 0
	ISZ DSKACT	/NOPE - INDEX RETURN
	JMP I DSKACT
	PAGE

/ROUTINE USED BY 'SI' AND 'FIP' TO CLEAR DEVICE BUFFERS.
/'DATFLD' MUST BE SET WHEN CALLED.
/*SICLR		/BUFFER CLEAR ROUTINE

SICLR,	0
	CLRBUF		/CLEAR THE BUFFER
	CDI 20
	JMP I SICLR	/ AND RETURN


/*UUOERR	/USER IOT ERROR
UUOERR,	TAD JOB
	ERROR		/SET 'ILLEGAL IOT' ERROR CODE
	 UUOERF
USYN,	WAIT		/ AND BACK TO SCHEDULER

UUSE,	TAD JOB		/RETURN USER'S JOB # IN AC
	SKP

USIZE,	TAD SEGSIZ	/RETURN DISC SEGMENT SIZE
	DCA L2SA
	UUOEXT

/ROUTINE TO HANDLE THE 'STM' IOT - WE MERELY MAKE
/AN ENTRY IN 'CLKTBL' FOR THIS JOB.
	IFNZRO JSTIME-4000	<GLITCH; *.-1>

USTM,	TAD L2SA
	SNA		/ANY WAIT-TIME REQUESTED?
	WAIT		/NO - JUST TREAT IT LIKE THE 'SYN' IOT
	CIA
	DCA WS0		/SAVE THE NUMBER OF SECONDS
	DCA L2SA	/CLEAR USER'S AC
	JMP .+3

DOXSTM,	TAD C7776	/WAIT 2 SECONDS TO TRY TO FIX I/O ERROR
	DCA WS0		/SAVE - # UNITS OF TIME
	TAD JOB		/SET CLKTBL ENTRY FOR THIS JOB
	TAD CLKTBA
	DCA WS1		/POINTS TO THIS JOB'S ENTRY
	TAD WS0
	DATFLD
	DCA I WS1	/SET TABLE ENTRY
	STL RAR		/SET AC=JSTIME
	UUOEXT		/EXIT AND WAIT

CLKTBA,	CLKTBL	/JOB TIMER TABLE ADDRESS

/ROUTINE TO CHECK THE 'DSI' FLAG IN A KEYBOARD DDB
/AND TAKE THE FIRST RETURN IF IT IS SET.
	IFNZRO DSI-1000	<GLITCH; *.-1>

CHKSI,	0
	TAD I CONDDB
	AND C1000
	SNA CLA		/USER MODE?
	ISZ CHKSI	/YES - TAKE THE SECOND EXIT
	JMP I CHKSI


SCHFAN,	JMS I SCHREM	/REMEMBER THE DISPLACED JOB
	SCHED

SCHREM,	REMJOB
FILERC,	0		/ROUTINE TO RECOVER FROM DISC ERRORS
FILUSA,	0		/AND SET ERROR CODES FOR USER
FILEWC,	0		/ERROR CODES ARE:
FILER1=	WS2		/	1  PARITY
			/	2  END OF FILE
			/	3  FILE NOT OPEN
			/	4  PROTECTION VIOLATION
	IFNZRO FILPCA-4	<GLITCH; *.-1>
FILECA=	C0004	/FILPCA
	IFNZRO FILPCT-7	<GLITCH; *.-1>
FILECT=	C0007	/FILPCT
	IFNZRO FILPIF-2	<GLITCH; *.-1>
FILEIF=	C0002	/FILPIF
	IFNZRO FILWC-6	<GLITCH; *.-1>
FILWCA=	C0006	/FILWC
C6000,	6000
FILERR,	0
	DCA FILERC	/ERROR CODE
	CDF
	CLA CLL CMA RAL	/AC:=-2
	TAD FILERC	/ERROR CODE - GT.2?
	SPA SNA CLA	/PROTECTED OR NOT OPEN?
	JMP FILER2	/NO
	GETJTW		/GET ADDRESS OF PARAMETER BLOCK
	 JOBLNK
	RETBLK		/RETURN IT TO FREE CORE
	CLA
	TAD L2SA	/GET POINTER TO PARAMETERS IN USER AREA
	TAD C0005
	DCA FILERR	/POINTS TO SIXTH USER PARAMETER (ERROR CODE)
	TAD FILERC	/GET ERROR
	UDF		/SELECT USER FIELD
	DCA I FILERR	/PASS ERROR TO USER
	DCA L2SA	/CLEAR HIS AC
	UUOEXT		/AND BACK TO HIM

FILER2,	TAD I FILERR	/END OF FILE OR PARITY ERROR...
	TAD FILEIF	/GET ADDRESS OF FILE PARAMETER BLOCK
	DCA FILER5	/POINTS TO WORD 3 OF BLOCK
	DATFLD
	TAD I FILER5	/WAS FILE CALL ORIGINATED BY SI?
	AND C6000	/BITS 0-1 WILL BE SET IF SO...
	SNA CLA
	JMP FILER4	/NO - IT CAME FROM USER PROGRAM
	TAD I FILER5	/YES - GET FIELD # FOR TRANSFER
	RTR
	AND C0007	/MASK OUT FILE # BITS
	TAD CORTBA	/INDEX INTO CORTBL
	DCA FILUSA	/SAVE POINTER TO CORTBL ENTRY FOR THIS TRANSFER
	CDF
	TAD I FILUSA	/GET CORTBL ENTRY
	AND C0037	/EXTRACT JOB #
	DCA FILUSA	/SAVE JOB #
	TAD FILERC
	SZA		/WAS THERE ANY ERROR AT ALL?
	TAD C7776
	SNA CLA		/YES - WAS IT OTHER THAN AN END-OF-FILE?
	JMP FILER3	/NO - WE'RE ALMOST DONE THEN
	TAD FILUSA	/MUST BE PARITY ERROR - SET THE ERROR CODE
	ERROR
	 DSKERR
FILER3,	ISZ FILERR	/INDEX PAST CALLING ARGUMENT
	CDF
	JMP I FILERR	/AND BACK


FILER4,	TAD I FILER5	/UPDATE USER CONTROL TO INDICATE ERROR CODE
	RAL		/SHIFT FIELD # INTO BITS 6-8
	AND C0070	/SAVE IT
	TAD FILCDF	/GENERATE "UDF"
	DCA FILER5	/USER FIELD SELECT
FILCDF,	CDF
	TAD I FILERR	/PARAMETER BLOCK ADDRESS
	DCA FILEWC	/SAVE IT
	TAD FILEWC
	DATFLD
	TAD FILECA
	DCA FILER1	/POINTS TO CORE ADDRESS IN PARAMETER BLOCK
	TAD I FILER1	/GET CORE ADDRESS
	DCA FILER1	/SAVE IT
	TAD FILEWC	/START OF PARAMETERS
	TAD FILECT	/+7
	DCA FILUSA	/POINTS TO PTR TO FILE CONTROL
	TAD I FILUSA	/GET ADDRESS OF FILE CONTROL
	TAD FILWCA	/POINTS TO WORD COUNT IN FILE CONTROL
	DCA FILEWC	/SAVE IT
	TAD FILEWC
	IAC
	DCA FILUSA	/POINTS TO POINTER TO USER PARAMETERS
	TAD I FILUSA	/GET POINTER TO USER ARGUMENTS
	DCA FILUSA	/SAVE
	TAD I FILEWC	/GET WORD COUNT TO GO FROM CONTROL BLOCK
FILER5,	0		/SELECT USER FIELD
	DCA I FILUSA	/SAVE IN USER AREA
	ISZ FILUSA	/POINTS TO WORD 4 OF USER ARGUMENTS
	TAD FILER1	/GET LATEST CORE XFER ADDRESS
	DCA I FILUSA	/SAVE FOR USER
	ISZ FILUSA
	ISZ FILUSA	/POINTS TO WORD 6 (ERROR WORD)
	TAD FILERC
	DCA I FILUSA	/PASS THE ERROR CODE ON TO USER
	JMP FILER3	/AND BACK
	PAGE

/RFILE AND WFILE IOTS

UFILE,	TAD UFILWA	/GET USER PARAMETERS
	JMS I UFPARM	/AND MOVE TO PARAMETER BLOCK
	TAD I UFLNKA	/ADDRESS OF PARAMETER BLOCK
	TAD UFIPIF
	DCA UFPARA	/POINTS TO WORD 3 OF BLOCK
	DATFLD
	TAD I UFPARA	/CLEAR ALL BUT FILE # IN BLOCK
	AND C0003
	DCA I UFPARA	/SAVE IT
	TAD L2SA	/ADDRESS OF USER PARAMETERS
	TAD UFIPWC	/+2
SIFIL1,	DCA UFILE1	/POINTS TO WORD COUNT IN USER AREA
	TAD I UFPARA	/FILE #
	AND C0003
	TAD UFJF0
	DCA UFJOBF	/RELATIVE ADDR OF FILE POINTER FOR THIS FILE
	GETJTW
UFJOBF,	 0		/POINTER TO FILE CONTROL INFO
	SNA
	JMP UFILER+1	/FILE NOT OPEN
	DCA UFJOBF	/SAVE POINTER TO FILE CONTROL
	DATFLD
	TAD I UFPARA	/FILE #
	JMS I UFIGJF	/GENERATE CORRESPONDING FILE BIT IN STR1
	DCA UFIJSF	/FILE STATUS FLAG
	TAD L2SF	/USER'S FIELD #
	AND C0007
	CLL RTL		/*4
	DCA JOBSWA	/SAVE
	TAD I UFPARA	/GET FILE # + ORIGINATING STATUS INFO.
	AND C7743	/CLEAR FIELD #
	TAD JOBSWA	/SET FIELD #
	DCA I UFPARA	/SAVE IN PARAMETERS
	TAD UFJOBF	/SAVE GLOBAL PARAMETERS
	IAC		/POINTS TO WORD 2 OF CONTROL BLOCK
	DCA AXS1	/CONTROL INDEX
	CLL CLA CMA RTL	/AC:=-3
	TAD UFPARA
	DCA AXS2	/PARAMETER INDEX POINTS TO START OF PARAMETERS-1
	TAD I AXS2	/GET THE IOT
	AND I AXS1	/ 'AND' IT WITH THE 'PROTECTED' BIT
	CLL RAR		/SAVE THE 'PRIVILEGED FILE' BIT
	SZA CLA		/WRITE AND PROTECTED-BIT SET?
	JMP UFILER	/YES - ERROR
	SNL		/NO - PRIVILEGE REQUIRED?
	JMP .+6		/NO
	GETJTW		/YES - GET HIS STATUS WORD
	 JOBSTS
	AND UFJSPV
	SNA CLA		/DOES HE HAVE PRIVILEGE NOW?
	JMP UFILER	/NO - "PROTECTION VIOLATION"
	DATFLD
	TAD AXS2	/SET FILPAR = START OF PARAMETER BLOCK
	DCA I AXS1
	TAD I AXS2	/DISC EXTENSION FROM PARAMETERS
	DCA I AXS1	/TO CONTROL BLOCK
	ISZ AXS2	/SKIP FIELD
	TAD I AXS2	/SAVE WC
	DCA JOBSWA
	ISZ AXS2	/SKIP CORE ADDRESS FOR NOW
	TAD I AXS2	/DISC ADDRESS
	DCA I AXS1	/TO CONTROL BLOCK
	TAD UFIRET	/RETURN ADDRESS
	DCA I AXS2	/TO PARAMETER BLOCK
	TAD UFJOBF	/POINTER TO FILE CONTROL
	DCA I AXS2	/TO PARAMETER BLOCK
	TAD JOBSWA	/WORD COUNT
	DCA I AXS1	/TO CONTROL BLOCK
	TAD UFILE1	/POINTS TO WC IN USER AREA
	SNA		/IS THIS AN SI REQUEST?
	JMP .+3		/YES
	DCA I AXS1	/NO, SAVE POINTER TO WC IN CONTROL BLOCK
	DCA L2SA	/CLEAR USER AC
	TAD UFJOBF	/POINTER TO CONTROL BLOCK
	TAD UFPAR2	/+3
	DCA UFILPA	/POINTS TO POINTER IN CONTROL BLOCK POINTING TO PARAM. BLOCK.
	TAD UFJOBF	/POINTS TO FILE CONTROL
	JMS I UFILIX	/GET SEGMENT INDEX
	JMP UFILE4	/NOT IN CORE - DO A WINDOW TURN
	JMP UFILE2	/NON-EXISTENT DISC ADDRESS
	JMS I UFICTB	/OK. SETUP TRANSFER BLOCK - POINTER TO SEGMENT # IN AC
UFILPA,	0		/POINTER TO FILPAR
	TAD I UFILPA	/ADDRESS OF PARAMETERS
	JMS I UFIQUE	/QUEUE THE REQUEST IN DSUTBL
	ISZ DSBUSY	/DISC BUSY?
	SKP		/YES
	JMS I FIUSER	/NO. START TRANSFER
	TAD UFIJSF	/CLEAR FILE STATUS BIT
	UUOEXT		/EXIT

SIFILE,	TAD UFIPIF
	DCA UFPARA	/POINTS TO FILE # IN PARAMETERS
	JMP SIFIL1	/REST IS SAME AS USER PROGRAMS

UFILE2,	GETJTW		/NON EXISTANT DISC ADDRESS
	 JOBLNK		/GET ADDRESS OF PARAMETERS
	DCA UFILE1	/SAVE IT
	JMP .+3
UFILER,	IAC		/PROTECTED
	IAC		/NOT OPEN
	TAD C0002	/EOF
	JMS I UFERR	/FILE ERROR ROUTINE
UFILE1,	0		/POINTS TO PARAMETER BLOCK
	TAD UFILE1
	RETBLK		/RETURN PARA. BLK.
	CLA
	UUOEXT		/BACK TO USER

UUOFIP,
UFILE4,	TAD JOBDAT
	GETJTA		/GET THE STATUS WORD
	 JOBSTS
	DATFLD
	IOR		/SET THE 'NON RESIDENT IOT' BIT
	 JSIOT
	TAD FIPJOB
	SNA		/HAS 'FIP' ALREADY BEEN REQUESTED?
	TAD JOB		/NO - REQUEST IT NOW
	DCA FIPJOB	/ ELSE FIP WILL PICK US UP LATER
	WAIT

UFPARA=	WS0		/ADDR OF USER PARAMETERS
UFIJSF=	WS1		/FILE STATUS FLAG
C7743,	7743
UFILWA,	UFILWC
UFJF0,	JOBF0
	IFNZRO FILPAR-3	<GLITCH; *.-1>
UFPAR2=	C0003	/FILPAR
	IFNZRO FILPIF-2	<GLITCH; *.-1>
UFIPIF=	C0002	/FILPIF
	IFNZRO FILPWC-3	<GLITCH; *.-1>
UFIPWC=	C0002	/FILPWC-1

UFPARM,	GETUSP
UFLNKA,	UUOLNK
UFERR,	FILERR
UFILIX,	FILIX
UFIRET,	DSURET
UFICTB,	FILCTB
UFIGJF,	GETJFX
UFIQUE,	DSQUE
UFJSPV,	JSPRIV
	PAGE

/RETURN NUMBER OF NEXT RUNABLE JOB IN AC.
/CALL:	JMS NXTJOB	/ ('NXTJCT' SHOULD BE INITIALIZED AT 'WSCHED')
/	RETURN WITH JOB # IN AC

FILCDA,
NXTJCT,	0
NXTJBN,	0	/LAST JOB NUMBER CHECKED
NXTMAX,	-JOBMAX
	IFNZRO NOTRUN-1000	<GLITCH; *.-1>
NXTNTR=	C1000

FILCT2,
NXTJOB,	0
	TAD BONUS	/IS THERE ANY JOB BROKEN OUT OF I/O WAIT 
	SNA
	JMP NXTJ0
	RUNABL		/IS IT RUNNABLE?
	JMP NXTJ0	/NO,GET THE NEXT JOB
	TAD BONUS	/THIS JOB
	JMP I NXTJOB
NXTJ0,	TAD I FANCOR
	AND NXTNTR
	SNA CLA		/IS 'NOTRUN' SET IN THE PHANTOM FIELD?
	JMP NXTJ1	/NO
	TAD I FANCOR
	AND C0600
	SZA CLA		/YES - IS A PHANTOM IN IT?
	SCHED		/YES - LET IT RUN
NXTJ1,	TAD NXTJCT
	SMA CLA		/HERE AGAIN AFTER OVERFLOW?
	REBOOT		/YES - ERROR *****
	ISZ NXTJCT
	SKP
	SCHED		/TRIED EVERYTHING - HEAD FOR NULJOB
	TAD NXTJBN
	TAD NXTMAX
	SNA CLA		/IS IT TIME TO WRAP AROUND TO JOB 1?
	DCA NXTJBN	/YES
	ISZ NXTJBN	/INCREMENT NUMBER OF JOB UNDER CONSIDERATION
NXTJ2,	TAD NXTJBN	/IS THE JOB RUNNABLE
	RUNABLE
	JMP NXTJ1	/NO, CONTINUE JOB TABLE ROUND ROBIN
	TAD NXTJBN	/YES, RETURN WITH JOB NO. IN AC
	JMP I NXTJOB
/CONSTRUCT TRANSFER BLOCK
/CALL	TAD SEGMENT WINDOW POINTER
/	JMS FILCTB
/	POINTER TO FILPAR

	IFNZRO FILPDA-FILPDX-4	<GLITCH; *.-1>
FILCPD=	C0004	/FILPDA-FILPDX
	IFNZRO FILPWC-FILPDA+2	<GLITCH; *.-1>
FILCWC=	C7776	/FILPWC-FILPDA

FILCSW=	JOBSWA	/POINTER TO SEGMENT WINDOW
FILCPA=	WS2	/POINTER TO FILPAR & FILDA
FILCWA,	0
FILCPX,	0	/POINTER TO FILPDX, FILPDA & FILPWC

FILCTB,	0
	DCA FILCSW	/SAVE POINTER TO SEGMENT IN WINDOW
	TAD I FILCTB
	DCA FILCPA	/ADDRESS OF POINTER TO PARAMETER BLOCK
	ISZ FILCTB	/SKIP ARGUMENT IN CALL
	DATFLD
	TAD I FILCPA	/GET ADDRESS OF PARAMETERS
	IAC		/POINTS TO WORD 2 OF PARAMETERS
	DCA FILCPX
	ISZ FILCPA	/POINTS TO DISC EXTENSION IN CONTROL BLOCK
	CLA CMA
	TAD I FILCSW	/GET SEGMENT #
	CLL RAR
	RTR
	RTR		/MULTIPLY BY 400 SEG SIZE
	DCA FILCT2	/SAVE "PRODUCT"
	TAD FILCT2
	RAL
	AND SEGSM1	/THROW OUT CONTRIBUTION FROM HI ORDER BITS OF EXTENSION
	TAD FIBAS1	/START OF LOGICAL FILE AREA
	CLL RTL
	DCA I FILCPX	/SAVE IN DISC EXTENSION IN PARAMETER BLOCK
	TAD FILCT2	/NOW GET LOW ORDER ADDRESS
	AND SEGLMK
	DCA FILCT2	/AND SAVE IT
	TAD FILCPX	/SET DISC ADDRESS
	TAD FILCPD
	DCA FILCPX	/POINTS TO LOW ORDER ADDRESS IN PAR. BLOCK
	TAD FILCPA
	IAC
	DCA FILCDA	/POINTS TO LOW ORDER ADDRESS IN CONTROL BLOCK
	TAD I FILCDA	/GET WORD ADDRESS SUPPLIED BY USER
	AND SEGSM1	/(WORD IN SEGMENT)
	TAD FILCT2	/+ WORD ADDRESS FROM SEGMENT ARITHMETIC
	DCA I FILCPX	/SAVE IT IN PARAMETER BLOCK
	TAD FILCPX	/SET WORD COUNT
	TAD FILCWC
	DCA FILCPX	/POINTS TO WORD COUNT IN PARAMETER BLOCK
	DCA I FILCPX	/NOTHING TRANSFERRED YET
	TAD FILCDA
	IAC
	DCA FILCWA	/POINTS TO WORD COUNT IN CONTROL BLOCK
FILCT1,	TAD SEGSM1	/SEGSIZ-1
	AND I FILCDA	/LOW ORDER ADDRESS IN CONTROL BLOCK
	DCA FILCT2	/DISC ADDRESS MOD SEGSIZ
	TAD I FILCWA	/GET - WC FROM CONTROL BLOCK
	CLL CIA		/+WC
	TAD FILCT2	/IF WE DO ENTIRE WC WILL WE GO INTO NEXT
	AND SEGLMK	/  SEGMENT?
	SNA CLA
	SZL
	JMP FILCT3
	TAD I FILCWA	/NO
	JMP .+3
FILCT3,	TAD SEGLMK	/SUBTRACT SEGSIZ FROM WC, SO WE STAY IN SAME SEGMENT
	TAD FILCT2
	DCA FILCT2	/WORD COUNT FOR TRANSFER
	TAD FILCT2	/UPDATE WORD COUNT IN PARAMETER BLOCK
	TAD I FILCPX	/OLD VALUE
	DCA I FILCPX	/NEW VALUE
	TAD FILCT2	/UPDATE WORD COUNT IN FILE CONTROL BLOCK
	CIA		/+WC
	TAD I FILCWA	/OLD - WC
	DCA I FILCWA	/NEW - WC
	TAD I FILCWA	/ARE WE DONE?
	SNA CLA
	JMP I FILCTB	/YES
	TAD FILCT2	/INCREMENT DISC ADDRESS
	CLL CIA		/+WC
	TAD I FILCDA	/OLD DISC ADDRESS
	DCA I FILCDA	/NEW DISC ADDRESS
	SZL		/OVERFLOW?
	ISZ I FILCPA	/YES; INDEX DISC EXTENSION
	TAD I FILCSW	/GET CURRENT SEGMENT #
	CLL CML CMA	/-(SEG # +1)
	DCA FILCT2	/SAVE IT
	ISZ FILCSW	/POINTS TO NEXT SEGMENT IN WINDOW
	TAD FILCSW	/ARE WE STILL IN THE WINDOW?
	AND C0007
	SZA CLA		/NEXT POINTER IN CORE?
	JMP FILCT4	/YES, SEE IF NEXT SEGMENT IS CONTIGUOUS
	TAD BASWIN
	TAD FILCSW	/NO - DO A 13-BIT COMPARE WITH BASIC WINDOW
	SNA SZL CLA	/IS IT THE SECOND OR BETTER BASIC SEGMENT?
	JMP I FILCTB	/NO - JUST RETURN
FILCT4,	TAD I FILCSW	/YES - GET THE NEXT SEGMENT
	TAD FILCT2	/CONTIGUOUS SEGMENTS?
	SNA CLA
	JMP FILCT1	/YES; CONTINUE THE TRANSFER
	JMP I FILCTB	/RETURN

FIBAS1,	SWDEX+JOBMAX
	PAGE
/BLOCK TRANSFER
/CALL	BLT
/	 62S1	SELECT SOURCE DATA FIELD
/	 SOURCE
/	 62D1	SELECT DESTINATION DATA FIELD
/	 DESTINATION
/	 -NUMBER WORDS
/	RETURN

/*BLT0		/BLOCK TRANSFER
BLT0,	0
	TAD I BLT0	/GET SOURCE FIELD SELECT
	DCA BLT1
	ISZ BLT0	/POINTS TO SOURCE ADDRESS
	STA
	TAD I BLT0	/CORE ADDRESS -1 OF SOURCE
	DCA AXS1
	ISZ BLT0	/POINTS TO DESTINATION FIELD SELECT
	TAD I BLT0	/GET DESTINATION SELECT
	DCA BLT2
	ISZ BLT0	/POINTS TO DEST. ADD
	STA
	TAD I BLT0	/DEST. ADD-1
	DCA AXS2
	ISZ BLT0	/POINTS TO - WORD COUNT
	TAD I BLT0
	DCA BLTC
	ISZ BLT0	/RETURN ADDRESS
	RDF
	TAD C6203
	DCA BLTF	/SAVE RETURN FIELD SELECT

BLT1,	0		/SELECT SOURCE DATA FIELD
	TAD I AXS1
BLT2,	0		/SELECT DESTINATION DATA FIELD
	DCA I AXS2
	ISZ BLTC	/DONE
	JMP BLT1	/NO
BLTF,	0		/RETURN
	JMP I BLT0
/TEST JOB FOR RUNABILITY
/CALL	TAD JOB #
/	RUNABL
/	 NOT RUNNABLE
/	 RUNNABLE

RCBITS,	JSIOT+JSIOTC+7	/FIP AND ERROR BITS

BLTC,
RUNTST,	0		/COME HERE WITH JOB # IN AC
	AND C0037
	TAD JOBTBA		/TO GET JOBTABLE ADDRESS
	GETJTI		/GET STR0
	 JOBSTS
	SMA		/RUN BIT ON?
	JMP RUNTS1	/NO - CHECK SPECIAL STUFF
	DATFLD
	AND C1000
	SNA		/IS BIT 1000 ON SHOWING HE WAS COMPUTE BOUND?
	JMP RUNTS2	/NO, IT MAY BE READY TO RUN TEST FURTHER
	CMA		/YES - CLEAR THE COMPUTE-BOUND FLAG
	AND I JOBSWA	/ SO IT WILL RUN NEXT TIME AROUND
	DCA I JOBSWA
	JMP RUNTS4	/TAKE 'NOT RUNNABLE' RETURN
RUNTS1,	AND RCBITS
	SNA		/FIP REQUEST PENDING OR SYSTEM ERRORS?
	JMP I RUNTST	/NONE
	AND C0007
	SNA CLA		/WAS IT A SYSTEM ERROR?
	JMP RUNTS3	/NO - LET FIP FINISH UP
	DATFLD
	CLA CLL CMA RTR
	AND I JOBSWA	/YES - CLEAR THE 'ERROR ENABLE'
	DCA I JOBSWA	/ SO 'SI' CAN PRINT A MESSAGE
	JMP RUNTS3

RUNTS2,	ISZ JOBSWA
	TAD I JOBSWA	/GET 'STR1'
	ISZ JOBSWA
	ISZ JOBSWA	/SKIP OVER THE DEVICE STATUSES
	AND I JOBSWA
	SZA CLA		/ANY STR1-TO-MASK1 MATCHES?
RUNTS3,	ISZ RUNTST	/YES - HE'S RUNNABLE
RUNTS4,	CDF
	JMP I RUNTST
/SET SYSTEM ERROR CODE
/CALL	TAD JOB #
/	ERROR
/	 ERROR CODE
/	NORMAL RETURN

SYSERR,	0
	AND C0037	/JOB # ONLY
	SNA		/IS IT JOB 0?
	JMP SYSER1	/YES - RETURN
	TAD JOBTBA	/POINTER TO JOBTBL
	GETJTI		/GET CURRENT VALUE OF STR0
	 JOBSTS
	AND C0007	/EXTRACT ANY ERROR CODE IN THERE
	SZA CLA		/ANY OLD BITS LYING AROUND?
	JMP SYSER1	/YES; DON'T CONFUSE THE ISSUE
	TAD I SYSERR	/GET THE ERROR CODE SUPPLIED
	DATFLD
	TAD I JOBSWA	/ADD IT TO OLD VALUE OF STR0
	DCA I JOBSWA	/SAVE THE WHOLE MESS
	ISZ JOBSWA
	TAD JOBSWA	/POINTS TO STR1
	IOR		/SET THE "ERROR HAS OCCURRED" BIT IN STR1
	 JSERR
SYSER1,	CDF
	ISZ SYSERR	/SKIP ARGUMENT IN CALL
	JMP I SYSERR	/RETURN


/PROCESSOR FOR CARD READER INTERRUPTS

INTCDR,	RCSD		/CARD DONE?
	JMP I ICDPTR	/NO - CONTINUE IN SKIP-CHAIN
	RCRD		/YES - CLEAR THE FLAG
	TAD I ICDTIM
GIRMAX,	SNA CLA		/WERE WE EXPECTING AN INTERRUPT?  (ALSO '-130')
	DISMIS		/NO - IGNORE IT
	DCA I ICDTIM	/YES - BUT NOT ANY MORE (CARD'S DONE)
	TAD ICDL2
	DISMIS		/SCHEDULE LEVEL-2
/
ICDPTR,	RINT
ICDL2,	CDL20
ICDTIM,	TIMCDR
/
/BLOCK-FULL SIZE-CHECKING ROUTINE FOR GIR INPUT.

GIRLIM,	0
	DCA GIRLMP	/SAVE POINTER TO CHARACTER COUNT
	TAD I GIRLMP
	TAD GIRMAX
	SMA CLA		/BUFFER FULL (TESTS 88 BUT HITS AT 90 CHARACTERS)?
	JMP GIRLM1	/YES
	ISZ GIRLIM	/NO - SKIP ON RETURN
	TAD I GIRLMP
	TAD GIROFF
	SPA CLA		/TIME TO SEND 'XOFF'
	JMP I GIRLIM	/NO
	TAD I CONDDB
	RTL
	SZL SPA		/SI MODE, OR 'XOFF' ALREADY SENT?
	JMP I GIRLIM	/YES
	CLL CML RTR
	DCA I CONDDB	/NO - REMEMBER TO SEND 'XON' LATER
	TAD I CONDBA
	IOR
	 DXOFF
	JMS I GIRTYP	/MAKE SURE WE'RE TYPING
	JMS I GIRBKA	/ AND SET THE DELIMITER FLAG
	JMP I GIRLIM
/
GIRLM1,	TAD CONDDB
	IOR		/SET THE 'FULL' FLAG
	 DFULL
	JMP I GIRLIM
/
GIRBKA,	GIRBRK
GIRLMP=	BLT1
GIROFF,	-70
GIRTYP,	TYPE
	PAGE

/RETURN FILE WINDOW INDEX
/CALL	TAD POINTER TO FILE CONTROL
/	JMS FILIX
/	SEGMENT ADDRESS NOT IN WINDOW
/	NON-EXISTENT FILE ADDRESS
/	OK RETURN WITH ADDRESS OF SEGMENT POINTER

	IFNZRO FILDA-4	<GLITCH; *.-1>
FILIDA=	C0004	/FILDA

FILIX,	0
	DCA FILICN	/SAVE POINTER TO FILE CONTROL
	TAD FILICN
	TAD FILIDA	/4
	DATFLD
	DCA FILSP2	/POINTS TO FILE EXTENSION IN CONTROL BLOCK
	TAD I FILSP2	/FILE EXTENSION
	AND SEGSM1	/# WORDS/SEGMENT -1
	DCA FILSP1	/HIGH ORDER COMPONENT OF SEG #
	ISZ FILSP2	/POINTS TO LOW ORDER ADD
	TAD I FILSP2	/LOW ORDER ADDRESS
	AND SEGLMK	/GET RID OF ADDRESS IN SEGMENT
	CLL RAL
	TAD FILSP1	/HIGH ORDER PART
	RTL		/"DIVIDE" BY 400 SEG SIZE
	RTL
	CMA CML IAC	/ (THIS IS A 13-BIT NEGATE)
	DCA FILISN	/ = - (SEG # - 1)
	TAD I FILICN	/POINT TO WINDOW
	DCA FILICA
	ISZ FILICN	/GET TO SEGMENT # INDEX IN WINDOW
	TAD I FILICA	/GET WORD 1 OF WINDOW
	AND C0007
	SZA		/IS THIS A VALID WINDOW?
	JMP FILIX4	/MAYBE NOT, BUT IT COULD BE THE BASIC WINDOW
	TAD I FILICN	/YES - SEE IF OUR SEGMENT IS IN IT
	TAD FILISN
	SZA SNL		/FILSCT-SN>0?
	JMP FILIX2	/YES. SEGMENT POINTER NOT IN CORE
	TAD C0006
	SNL		/FILSCT+6 - SN < 0?
	JMP FILIX5
	CLA		/YES. SEGMENT POINTER NOT IN CORE
	TAD I FILICA	/ANY MORE SEGMENTS?
	SNA CLA
FILIX1,	ISZ FILIX	/NO. NON-EXISTENT FILE ADDRESS
FILIX2,	CLA
FILIX3,	CDF
	JMP I FILIX	/RETURN
FILIX4,	AND C0006	/IS IT BASIC OR INVALID WINDOW
	SNA CLA		/IS THIS THE BASIC WINDOW? (1ST WORD=7777)
	JMP FILIX3	/NO - INVALID WINDOW
	TAD FILISN	/GET 13-BIT NEGATIVE SEGMENT NUMBER
	TAD BASWIN
	SNA SZL		/ARE WE IN THE BASIC WINDOW?
	JMP FILIX1	/NO - TAKE 'NONEXISTENT ADDRESS' EXIT
	CIA		/AC = SEGMENT POINTER
	JMP FILIX6

FILIX5,	CIA
	TAD C0007	/WINDOW INDEX
	TAD FILICA	/START OF WINDOW
FILIX6,	DCA FILICN	/POINTS TO SEGMENT #
	ISZ FILIX	/SEGMENT ADDRESS IN CORE - EXIT
	TAD I FILICN	/GET SEGMENT # FOR THIS FILE ADDRESS
	SNA CLA
	JMP FILIX3	/ZERO SEGMENT NUMBER IS NOT A SEGMENT!
	TAD FILICN	/EXIT WITH POINTER TO THIS SEGMENT IN AC.
	ISZ FILIX
	JMP FILIX3

FILISN,	0
FILICN,	0
/RETURN USER RUN TIME
/USER CALLS WITH ADDRESS OF THREE WORD BLOCK
/WORD 1 CONTAINS THE JOB #
/THE HI AND LO ORDER RUN TIMES ARE RETURNED IN WORDS 2 AND 3

UURT,	UDF		/USER FIELD
	TAD I L2SA	/JOB #
	SNA		/THIS JOB?
	TAD JOB		/YES
	AND C0037
	TAD JOBTBA
	DCA UCOP0	/SAVE POINTER TO JOB STATUS
	TAD UCOP0
	GETJTI		/HI ORDER RUNTIME
	 JOBRTH
	DCA UCOP1
	TAD UCOP0
	GETJTI		/LOW ORDER 
	 JOBRTM
	DCA UCOP2
	JMP UCOPYS	/COPY IN USER AREA


/RETURN THE TIME OF DAY IN TICS SINCE MIDNITE
/USER CALLS WITH ADDRESS OF TWO WORD BLOCK IN AC
/HI AND LOW ORDER PARTS RETURNED IN WORDS 1 AND 2

UTOD,	TAD CLK1	/-TIME TILL MIDNITE
	CLL
	TAD INKLK1	/TIME AT MIDNITE
	DCA UCOP2	/LOW ORDER TIME NOW
	SZL
	IAC
	TAD CLK2	/-TIME TILL MIDNITE
	TAD INKLK2	/TIME AT MIDNITE
	DCA UCOP1	/TIME NOW (HI ORDER)
	JMP UCOPY2	/COPY IN USER AREA

INKLK1,	INCLK1
INKLK2,	INCLK2

/RETURN THE NUMBER OF FREE DISC SEGMENTS. 'NFSEGS' IS
/SET BY 'FIP' EACH TIME IT EXITS.

USEGS,	TAD NFSEGS	/PASS IT BACK IN HIS AC
	JMP UCOPYA

/*NFSEGS	/NUMBER OF FREE DISC SEGMENTS
NFSEGS,	7777	/ (UPDATED BY 'FIP')
/RETURN THE USER'S STATUS REGISTERS
/CALLED WITH ADDRESS OF THREE WORD BLOCK IN AC

UCKS,	GETJTW
	 JOBSTS
	DCA UCOP0	/STATUS 0
	DATFLD
	ISZ JOBSWA
	TAD I JOBSWA	/STATUS 1
	DCA UCOP1
	ISZ JOBSWA
	TAD I JOBSWA
	DCA UCOP2	/STATUS 2
	UDF		/SELECT USER FIELD
	TAD UCOP0
	DCA I L2SA
UCOPYS,	ISZ L2SA	/BUMP POINTER
	NOP
UCOPY2,	UDF		/FOR LATER ENTRIES
	TAD UCOP1	/SECOND WORD
	DCA I L2SA
	ISZ L2SA
	NOP
	TAD UCOP2	/THIRD WORD
	DCA I L2SA

UCOPYA,	DCA L2SA	/CLEAR USER AC
	UUOEXT

DEVJO0,
UCOP0,
FILSP1,	0
UCOP1,
FILSP2,	0
UCOP2,	0


/ROUTINE TO EXTRACT JOB NUMBER FROM DDB
/CALL
/	TAD (DDB ADDRESS)
/	JMS DEVJOB
/	RETURN WITH JOB # IN AC (AND 'DATFLD' SET)

FILICA,
DEVJOB,	0
	IAC
	DCA DEVJO0	/POINTS TO WORD 1 OF DDB
	DATFLD
	TAD I DEVJO0	/GET WORD 1
	AND C0037	/IGNORE JUNK
	JMP I DEVJOB	/RETURN
	PAGE

/WE ENTER THIS ROUTINE AT LEVEL 2
/AFTER COMPLETING A DISC TRANSFER
/IF A FILE TRANSFER IS INVOLVED, WE CONTINUE
/WITH IT
/IF OVERLAY, WE GO TO OVERLAY CONTROL

DSURT1=	WS0
DSURT2=	WS1

	IFNZRO FILDA-4	<GLITCH; *.-1>
DSURDA=	C0004	/FILDA
	IFNZRO FILPDA-5	<GLITCH; *.-1>
DSUPDA=	C0004	/FILPDA-1
DSUMTB,	-DSUTBL
DGETJX,	GETJFX

DSKCT,	DSKCON
DSKCOD,	0
DSUET1=	WS0

DSURPA,	DSPARM
DSUFEA,	FILERR

DSURET,	IAC		/ERROR IN DISC TRANSFER
	DCA DSKCOD	/SAVE ERROR CODE
	TAD DSKPTR	/POINTS TO REQUEST CURRENTLY RUNNING
	TAD DSUMTB	/FIND RELATIVE INDEX IN TABLE
	CLL RTR		/DIVIDE BY FOUR
	AND C0007	/SAVE FIELD
	TAD CORTBA	/INDEX INTO CORTBL
	DCA DSUCOR
	TAD I DSUCOR	/GET CORTBL ENTRY
	AND C0037	/EXTRACT JOB #
	TAD JOBTBA	/POINTS TO JOBTBL
	DCA DSUJTE	/SAVE JOBTBL ADDRESS
	TAD DSUJTE
	GETJTA		/GET ADDRESS OF STR1
	 JOBSTS+1
	DCA DSUJST	/SAVE IT
	TAD DSKCOD	/IS THERE AN ERROR
	SZA
	JMP DSURER	/YES JMP OUT OF THE ROUTINE AS QUICKLY AS POSSIBLE
	JMS DSUPAR	/PARAMETER BLOCK ADDRESS
	TAD DSURDA
	DCA DSURT1	/POINTS TO WORD 5 OF PARAMETERS
	TAD I DSURPA	/ADDRESS OF PARAMETERS
	IAC
	DCA DSURT2	/POINTS TO DISC EXTENSION IN PARAMETERS
	DATFLD
	TAD I DSURT1	/DISC EXTENSION FROM CONTROL...
	DCA I DSURT2	/	...TO PARAMETERS
	TAD DSURT2
	TAD DSUPDA
	DCA DSURT2	/POINTS TO DISC ADDRESS IN PARAMETERS
	ISZ DSURT1	/POINTS TO DISC ADDRESS IN FILE CONTROL
	TAD I DSURT1	/DISC ADDRESS FROM CONTROL...
	DCA I DSURT2	/	...TO PARAMETERS
	ISZ DSURT1	/POINTS TO WORD COUNT IN FILE CONTROL
	CLL CMA RAL
	TAD DSURT2
	DCA DSURT2	/POINTS TO WORD COUNT IN PARAMETERS
	TAD I DSURT2	/SAVE TEMPORARILY -WC FROM PARAMETERS
	CIA
	DCA DSKCOD
	TAD I DSURT1	/MOVE WC FROM FILE CONTROL...
	DCA I DSURT2	/	...TO PARAMETERS
	ISZ DSURT2	/POINTS TO CORE ADD IN PARAM.
	TAD DSKCOD	/UPDATE CORE ADD BY COUNT TRANSFERRED
	TAD I DSURT2
	DCA I DSURT2	/SAVE NEW ADD
	TAD I DSURT1	/GET WORD COUNT FROM CONTROL
	CDF
C7640,	SZA CLA		/ARE WE DONE?
	JMP DSURE2	/NO
DSURER,	DCA DSKCOD	/SAVE ERROR STATUS
	TAD I DSURPA	/GET ADDRESS OF PARAMETER BLOCK
	DCA .+3		/FOR CALL TO FILERR
	TAD DSKCOD	/ERROR CODE
	JMS I DSUFEA	/HANDLE ERROR
	 0
	CLA CLL
	TAD I DSUCOR
	TAD C7640	/ADD TO 'DSHOLD' COUNT; OVERFLOWS TO 'NOTRUN' BIT
	AND DSHOLD
	SNL		/DID IT BLOW UP?
	DCA I DSUCOR	/NO - SET 'NOTRUN' BIT
	JMP DSURE1

/MOVE SEGMENT WINDOW
DSURE2,	TAD DSUJTE	/SET JOBLNK
	GETJTA
	 JOBLNK
	DCA DSKCOD	/SAVE POINTER TO JOBLNK
	TAD I DSURPA	/GET ADDRESS OF PARAMETER BLOCK
	DATFLD
	DCA I DSKCOD	/AND SAVE IN JOBLNK
	CDF
	DCA I DSURPA	/CLEAR DSPARM
	CLA CMA		/SET THE 'MORE I/O' SWITCH

DSURE1,	DCA DSFLAG	/CLEAR (OR SET) THE 'MORE I/O' SWITCH
	TAD DSKPTR	/FIGURE OUT WHICH INTERNAL FILE #
	TAD DSUMTB
	JMS I DGETJX
	DATFLD
	TAD I DSUJST
	DCA I DSUJST	/SET THE FILE-READY BIT IN STR1
	JMS DSURE4	/CLEAR THE 'DSUTBL' ENTRY AND RESTART I/O
	ISZ DSFLAG	/ANY MORE TO THIS TRANSFER?
	RSCHED		/NO - RESCHEDULE TO BUMP OFF NULL-JOB
	TAD I DSUCOR	/YES - GET THE JOB NUMBER
	JMP I .+1	/ AND RUN THROUGH IT ALL AGAIN
	DSUEXT

/ROUTINE TO CLEAR THE 'DSUTBL' ENTRY AND RESTART THE DISC.
DSURE4,	0
	TAD DSKPTR
	DCA DSUET1	/SET QUEUE POINTER
	DATFLD
	DCA I DSUET1	/CLEAR THE 'DSUTBL' ENTRY
	CDF
	TAD I DSURPA	/GET THE PARAMETER BLOCK ADDRESS
	SZA
	RETBLK		/ AND RETURN IT
	JMS I DSKCT	/THEN DECREMENT 'DSBUSY'
	JMP I DSURE4	/ AND RETURN

DSHOLD,	NOTRUN+NOHOLD+CJOB
DSUCOR,	0	/POINTER TO CORE TABLE ENTRY
DSUJST,	0	/POINTER TO JOB STATUS
DSUJTE,	0	/JOB TABLE ENTRY

DSFLAG,
DSUPAR,	0	/GET PARAMETER BLOCK ADDRESS
	TAD I DSURPA	/GET ADDRESS
	TAD C0007	/GET POINTER TO LAST WORD IN BLOCK
	DCA DSUET1
	DATFLD
	TAD I DSUET1	/GET ADDRESS OF FILE CONTROL
	CDF
	JMP I DSUPAR	/EXIT

/*OVERL1
OVERL1,	JMS DSUPAR	/GET ADDRESS OF FILE CONTROL
	SZA
	JMP OVE2
	TAD I FANCOR
	TAD C1000	/SET 'NOTRUN' SO THE PHANTOM STARTS
	DCA I FANCOR
	TAD OVESCH
OVE2,	DCA DSFLAG	/SAVE THE DISPATCH ADDRESS
	JMS DSURE4	/NOW CLEAR THE 'DSUTBL' ENTRY
	JMP I DSFLAG	/ AND DISPATCH

OVESCH,	SCHFAN

/ROUTINE TO HANDLE THE 'CON' IOT - WE RETURN THE
/KEYBOARD NUMBER OF THE SPECIFIED JOB.
UCON,	TAD L2SA	/GET THE JOB NUMBER
	SNA		/ANYTHING PASSED?
	TAD JOB		/NO - GET HIS OWN JOB #
	AND C0037
	TAD TTYTBB
	DCA WS0		/SET THE 'TTYTBL' ENTRY POINTER
	DATFLD
	TAD I WS0	/GET THE UNIT #
	DCA L2SA	/ AND RETURN IT IN HIS AC
	UUOEXT

TTYTBB,	TTYTBL
SWGOOD,	TAD CORTBA	/GET A POINTER TO THIS FIELD'S
	TAD FINISH	/ ENTRY IN CORTBL
	DCA SQREQ
	TAD FIT		/JOB SWAPPED IN
	TAD C1000	/NOT RUN BIT
SWGOD1,	DCA I SQREQ	/STORE IT IN THE CORTBL
	DCA FINISH
	DCA FIT		/SET ALL CONCERNED WORDS TO ZERO
	DCA FORCE
	DCA SQREQ
	JMS I SWSCON	/SEE IF ANY MORE DISC IO WAITING TO BE ATTENDED TO
	RSCHED		/RESCHEDULE
SWSCON,	DSKCON

SWERR,	TAD FINISH
	SPA		/WAS IT A SWAP-OUT OR SWAP-IN ERROR?
	CIA		/DURING SWAP OUT
	TAD CORTBA
	DCA SQREQ	/POINTER TO CORTBA FOR THIS FIELD
	TAD SWERER
	DCA SWPER1	/SET SWAP-IN ERROR CODE INITIALLY
	TAD FINISH
	SPA CLA		/WAS THIS A SWAP-IN OR -OUT ERROR?
	JMP .+3		/SWAP-OUT
	TAD FIT		/SWAP-IN - JUST GET JOB NUMBER
	JMP .+3
	ISZ SWPER1	/SWAP-OUT ERROR CODE = 3
	TAD I SQREQ	/GET THE JOB BEING SWAPPED OUT
	ERROR		/SET APPROPRIATE ERROR CODE
SWPER1,	 0
	JMP SWGOD1	/CLEAR ALL THE CONCERNED WORDS BEFORE LEAVING

	IFNZRO SWPRER-2	<GLITCH; *.-1>
SWERER=	C0002	/SWPRER
	IFNZRO SWPWER-3	<GLITCH; *.-1>
/SAVE JOB REGISTER
/THIS ROUTINE IS USED TO SAVE THE LEVEL 2 REGISTERS
/IN THE JOB DATA AREA.  AFTER SAVING THIS
/INFORMATION, JOB IS SET TO 0 TO INDICATE
/THAT NULJOB IS RUNNING
/CALL	SAVJOB
/	RETURN
/
/THE SAVE AREA FOR A JOB NOW LOOKS LIKE THIS:
/
/JOBREG
/	.................................................
/ +0	:			PC			:
/	:................................................
/ +1	:			AC			:
/	:...............................................:
/ +2	: M : L : G :   IOT COPY #  :<------ SC ------->:
/	:...:...:...:...:...:...:...:...:...:...:...:...:
/
/WHERE:	M = 1 (4000 BIT) IF EAE IS IN MODE 'B'
/	L = 1 (2000 BIT) IF LINK IS SET
/	G = 1 (1000 BIT) IF 'GT' FLAG IS SET

SAVJO0,	0
	TAD JOB
	SNA		/IS NULJOB RUNNING ALREADY?
	JMP SAVJO1	/YES - NOTHING TO SAVE
	AND C0600
	SZA CLA		/IS A PHANTOM RUNNING?
	JMP SAVJO3	/YES

	IFZERO MQREG-1 <
	GETJTW		/GET THE MQ-REGISTER POINTER
	 JOBEAE
	CLA MQA		/GET THE CONTENTS OF THE MQ
	DATFLD
	DCA I JOBSWA	/ & SAVE IT
	>
	CDF
	IFZERO EAE-20 <
		IFZERO CPU-2 <
	SKB		/SKIP IF MODE 'B' SET (ALSO CLOBBERS AC & MQ)
	SKP CLA		/MODE 'B' NOT SET
	CLA CLL CML RAR	/INDICATE MODE 'B' BY 4000
	SGT		/'GT' FLAG SET?
	SKP		/NO
	TAD C1000	/YES - SET THE BIT
		>
	SCA		/NOW GET THE SEQUENCE COUNT
	TAD L2SVLK	/ ADD IN THE LINK (2000 BIT)
	DCA L2SVLK	/ & SAVE ALL THE BITS
	>
	TAD JOBDAT
	GETJTA		/GET THE SAVE-AREA ADDRESS
	 JOBREG
	DCA .+5
	BLT		/NOW SAVE THE REGISTERS
	 CDF
	 L2SV0	/ (LEVEL 2 SAVE)
	 DATFLD
	 0	/ (JOB STATUS BLOCK SAVE)
	 -3	/3 WORDS - PC, AC, & LINK
SAVJO3,	TAD JOB
	AND C0037
	SNA CLA		/DO WE HAVE A JOB NUMBER?
	JMP SAVJO2	/NOT YET
	GETJTW		/YES - GET POINTER TO LOW-ORDER CPU TIME
	 JOBRTM
	CLA IAC		/INCLUDE WHATEVER TICKS HAVEN'T BEEN RECORDED
	TAD CLOCK
	TAD QUATIM	/ TO UPDATE HIS RUN TIME
	TAD JOBTIM	/-# TICKS HE DIDN'T USE
	SNA		/IF YOU WANT TO CHARGE HIM SOMETHING, CHANGE
	NOP		/ THIS TO 'IAC', YOU'LL CHARGE HIM 1 TICK FOR EACH FRACTION
	CLL
	DATFLD
	TAD I JOBSWA	/ACCUMULATE INTO RUNTIME
	DCA I JOBSWA	/SAVE THE NEW CUMULATIVE TIME
	SNL		/OVERFLOW INTO HIGH ORDER?
	JMP .+4		/NO
	ISZ JOBSWA	/YES - GET TO THE HIGH-ORDER TIME
	ISZ I JOBSWA	/ AND BUMP IT ONE UNIT
	NOP
	JMS I SAVJO4	/SET THE BIT IF IT WAS COMPUTE-BOUND
SAVJO2,	DCA JOB		/SIMULATE NULJOB
	DATFLD
	DCA I JOBDAT	/CLEAR POINTER TO CURRENT JOB DATA AREA
SAVJO1,	CDF
	JMP I SAVJO0	/AND EXIT.

SAVJO4,	COMBND
QUATIM,	-QUANT
/ROUTINE TO SET UP SWAP
/CORTBL POINTER TO FIELD TO BE SWAPPED OUT IN WS0
/FINISH= +FIELD # FOR SWAP IN ;FINISH= -FIELD# FOR SWAP OUT
/FIT=JOB TO BE SWAPPED IN OR PHANTOM TO BE BROUGHT IN
/FORCE=FIELD TO BE SWAPPED OUT
/ENTER AT SWAPIN FOR SWAP IN
/ENTER AT SWPOUT FOR SWAP OUT

SWPOUT,	TAD FORCE
	CIA
	DCA FINISH	/SET FINISH = -FORCE (TO INDICATE SWAP OUT)
	TAD WS0		/OR SWAP BIT INTO CORTBL
	IOR
	 FSWP
	TAD I WS0	/JOBS ARE THE ONLY ONCE TO BE SWAPPED OUT
	JMS TRAC	/GET THE TRAC # FOR THIS JOB
	DCA OUTTRC	/SAVE IT
SWAPIN,	TAD FINISH	/FINISH HAS FIELD # FOR SWAP ACTIVITY + OR -
	SPA
	CIA		/GET THE ABSOLUTE VALUE
	CLL RTL
	RAL		/IN POSITION 00X0
	DCA SQREQ	/SAVE IT FOR SETTING UP DISC  IO
	TAD FIT
	AND C0600
	SNA		/IS IT A PHANTOM WE NEED?
	JMP SWAP1	/NO - JOB IS TO BROUGHT IN
	AND C0400	/IS FIP NEEDED?
	SZA CLA
	IFZERO RF08-40 <TAD C0100>	/YES, DF32 NEEDS TRAC IN POSITION 0X00
	IFZERO RF08 <IAC >	/YES, RF08 NEEDS TRAC IN POSITION 000X
SWAP3,	DCA INTRC
	ISZ DSBUSY	/IS ANY DISC ACTIVITY GOING ON?
	SCHED		/YES, SO FIND A RESIDENT JOB
	JMS I SWPIOA	/NO, START THE SWAP IO
	SCHED		/FIND A RESIDENT JOB IN THE MEANWHILE
SWAP1,	TAD FIT		/GET THE JOB # TO BE SWAPPED IN
	JMS TRAC	/GET ITS TRAC #
	JMP SWAP3

/SUBROUTINE TO BUILD THE DISC CONTROL-WORD TO TRANSFER
/THE SWAP AREA FOR THE JOB WHOSE NUMBER IS IN THE AC.
TRAC,	0
	AND C0037	/JUST GET THE JOB #
	TAD SWBASE	/YES - GET TRAC # WHERE SWAP AREA BEGINS - 1

	IFZERO RF08-40 <
	CLL RTL; RTL; RTL	/TRAC # IN POSITION 0X00 FOR DF32
	>
	JMP I TRAC	/RETURN

SWBASE,	SWDEX-1		/SWAP TRACK OF JOB 1
	PAGE
/*GIR00		/GENERAL INPUT ROUTINE
/GENERAL INPUT ROUTINE
/CALL:	CHAR IN TTCHAR
/	GIR
/	 DEVTBL ADDRESS
/	BUFFER OVERFLOW RETURN. CHAR NOT DISTRIBUTED
/	NORMAL RETURN

	IFNZRO CTRLS-4000	<GLITCH; *.-1>

GIR00,	0
	TAD I GIR00
	DCA CONDBA	/DEVTBL POINTER TO INPUT DDB
	ISZ GIR00
	RDF		/SET UP RETURN TO CALLER
	TAD C6203
	DCA GIRFUL
	DATFLD
	TAD I CONDBA
	DCA CONDDB	/ = ADDRESS OF INPUT DDB
GIRSQ,	JMS I GIRSQA	/CHECK FOR ^S/^Q ('ISZ CONDBA' IF DISABLED)
	TAD TTCHAR
	TAD MCC
	SNA		/YES - IS IT A CTRL/C?
	JMP GIR1	/YES - SET FLAG & CLEAR BUFFERS
	IAC
	SZA CLA		/NO - IS IT A CTRL/B?
	JMP GIR7	/NO - JUST HANDLE NORMALLY
	TAD CONDDB
	IOR		/YES - SET THE 'CTRL/B' FLAG (USED FOR LOGIN)
	 CTRLB
	JMS I GIRFA	/IN SI ALREADY?
	JMP GIR2	/YES - CLEAR OUTPUT BUFFER
	TAD CONDDB
	IOR		/NO - SET KEYBOARD IN 'SI' MODE
	 DSI
	JMP GIR3	/THEN GO CLEAR THE INPUT BUFFER
GIR1,	JMS I GIRFA	/IN SI MODE?
	JMP GIR1A	/YES
	TAD CONDDB
	JMS I GIRJOB	/GET THE JOB #
	TAD JOBTBA
	GETJTI		/GET THE STATUS-WORD
	 JOBSTS
	AND GIRCTE
	SNA CLA		/IS THE CTRL/C ENABLED?
	JMP GIREXT	/NO - JUST IGNORE THE CTRL/C
GIR1A,	DATFLD
	TAD CONDDB
	IOR		/INDICATE 'CTRL/C' IN DDB
	 CTRLC
GIR2,	TAD I CONDBA
	SZA		/IS THERE AN OUTPUT DDB?
	CLRBUF		/YES - CLEAR IT
GIR3,	TAD I CONDDB
	AND GIRSIC
	SZA CLA		/IS 'SICOM' SET?
	JMP GIR4	/YES - WE CAN'T MESS UP SI BY CLEARING INPUT
	TAD CONDDB
	CLRBUF		/NO - CLEAR INPUT BUFFER
	TAD I CONDDB
	AND GIRFFC	/CLEAR ANY 'FULL' FLAG
	DCA I CONDDB
	TAD GIRDEL
	JMS I GIRCLR	/ AND CLEAR 'JSDEL' (SINCE THE INPUT IS GONE)
GIR4,	TAD I CONDBA
	SNA		/IS THERE AN OUTPUT DDB?
	JMP GIR5	/NO
	DCA WS2
	TAD I WS2
	AND C3777
	DCA I WS2	/YES - CLEAR ANY ^S BIT
	JMS I TYPEB	/ AND MAKE SURE HE'S TYPING
GIR5,	TAD TTCHAR
	DCA WS2		/SAVE THE CHARACTER
	TAD GIRUPA
	CDF
	PRINT		/TYPE AN UP-ARROW
GIRUPA,	"^		/ALSO NOP
	TAD WS2
	TAD C0100	/NOW FORM THE NON-CTRL CHARACTER
	DCA TTCHAR
	TAD TTCHAR
	CLL RAR
	SNL CLA		/IS IT A ^B?
	JMP GIR6	/YES - JUST ECHO THE 'B'
	JMS I GIRCTL	/NO - MUST BE ^C, GO HANDLE IT
	ISZ COMCNT	/ (RETURN IF IN SI-MODE)
GIR6,	TAD CONDDB
	JMS I GIRJOB	/GET HIS JOB # AGAIN
	SNA CLA		/IS HE LOGGED IN?
	JMP GIREXT	/NO - THEN WE DON'T ECHO
	CDF
	PRINT		/YES - ECHO-TYPE THE CHARACTER
	JMP GIRFUL
GIREXT,	ISZ GIR00	/INCREMENT RETURN
GIRFUL,	0		/BACK TO CALLING FIELD
	JMP I GIR00

/THE CHARACTER IS EITHER FROM A PROGRAM OR 'SI' OR
/IS NEITHER A CTRL/B OR A CTRL/C; I.E. WE JUST PUSH
/IT THROUGH NORMALLY.
GIR7,	JMS I GIRFA	/IS THIS GOING TO SI?
	JMP GIR8	/YES
	TAD I CONDDB
	AND C0400
	SZA CLA		/IS THE BUFFER ALREADY FULL?
	JMP GIRFUL	/YES - DON'T BOTHER WITH BREAK
	JMP .+3
GIR8,	JMS I GIRLRA	/GO CHECK FOR RUBOUT AND LINE-FEED
	JMP GIR9	/RETURN TO ECHO PRINT WITHOUT STORING
	TAD CONDDB
	STORE		/NOW STORE THE CHARACTER
	 GIRLIM
	JMP GIRFUL	/NO ROOM
	JMS I GIRFA	/IS THIS GOING TO 'SI'?
	JMP GIR9	/YES - JUST GO ECHO IT
	TAD CONDDB
	TAD GIRBKM
	DCA WS0
	TAD I WS0	/GET THE BREAK-MASK
	BREAK		/IS THIS A BREAK?
	JMS I GIRBKB	/SET THE 'DELIMITER SEEN' FLAG & 'BONUS'
GIR9,	DATFLD
	JMS I GIRFA	/IS HE IN 'SI' MODE?
	TAD GIRMDP	/YES - JUST CHECK 'DHALF', NOT 'DUPL'
	TAD GIRHD
	AND I CONDDB
	SZA CLA		/ARE EITHER 'DUPL' OR 'DHALF' SET?
	JMP GIREXT	/YES - THEN ECHOING IS SUPPRESSED
	JMP GIR6	/NO - GO PRINT THE CHARACTER

/
GIRBKB,	GIRBRK
	IFNZRO DDBBRK-2		<GLITCH; *.-1>
GIRBKM=	C0002
GIRCLR,	CLSTR1
	IFNZRO JSRSEN-20	<GLITCH; *.-1>
GIRCTE=	C0020	/JSRSEN
GIRCTL,	GIRCT0
	IFNZRO JSDEL-100	<GLITCH; *.-1>
GIRDEL=	C0100	/JSDEL
GIRFA,	CHKSI
	IFNZRO DFULL-400	<GLITCH; *.-1>
GIRFFC=	C7377	/-DFULL-1
GIRHD,	DUPL+DHALF
GIRJOB,	DEVJOB
GIRLRA,	GIRLRB
	IFNZRO DUPL-200		<GLITCH; *.-1>
GIRMDP=	C7600	/-DUPL
	IFNZRO SICOM-100	<GLITCH; *.-1>
GIRSIC=	C0100	/SICOM
GIRSQA,	CONSQ
MCC,	-203		/- ^C
TYPEB,	TYPE
	PAGE

/SERVICE ALL AC TRANSFER OUTPUT DEVICES (TTY'S, HSP, LPT, ETC.)
/IF FILLER CHARACTERS ARE NEEDED THE NEXT 3 WORDS MUST BE PATCHED ACCORDING TO YOUR NEEDS
		/THE VALUE OF DEVTBL IS ASSEMBLED HERE FOR YOUR CALCULATING CONVENIENCE
FILHI,	DEVTBL	/-(DEVTBL+2*(KXX+1)) WHERE KXX IS THE HIGHEST LINE REQUIRING FILLER CHARACTERS
FILLO,	0	/2 TIMES NUMBER OF LINES REQUIRING FILLER CHARACTERS
FILLC,	0	/-(ASCII CHAR.) TO LOOK FOR - 7 BITS ONLY (CR=7763; LF=7766)

JMSTIM=	JMS I .
	TTIME
CONCNT,	-NULINE-CONTTY-CDVOUT-2
	IFNZRO DC08A	<IFNZRO .&177-5 <GLITCH; *.-1>
	T8OUT>		/PASS OUTPUT CHARACTER TO DC08A
	IFZERO DC08A	<NOP>	/FOR SPACING
DEVOUT,	OUTDIF
CONREG=	C0200
CONDEV,	SKPTP+1
TTOFLA,	TTOFLG
CONLPF,	JSLPT
CONLPR,	CDVOUT+1
IFNZRO OUTREG-200	<YOU GOOFED>

CONOUT,	DCA I SETFLG	/CLEAR SCHEDULER FLAG
	ION
	ISZ I TTOFLA	/SHOW THAT OUTPUT IS BEING SERVICED
	DATFLD
	TAD CONREG
	DCA WS0		/OUTPUT REGISTER TABLE POINTER FOR OUTPUT SCAN
	TAD CONCNT
	DCA WS1		/NUMBER OF LINES TO CHECK + PUNCH & LINE PRINTER
CONOU0,	TAD I WS0
TTIMER,	SPA CLA		/DOES THIS DEVICE HAVE A REQUEST?
	JMP CONOU2	/YES
CONOU1,	ISZ WS0		/BUMP POINTER
	ISZ WS1		/AND THE COUNT
	JMP CONOU0
	TAD CONSKP	/RESTORE THE NORMAL INSTRUCTION
	DCA TTIMER
		IFNZRO LPT-3 <
	STA
	LSRP		/LP08 OR LE8 ERROR?
	LIE	>	/OK - TURN ON INTERRUPT ENABLE
		IFZERO LPT-3 <
	NOP		/ENABLE LPT INTERRUPT HERE IF AVAILABLE
	NOP
	NOP	>
	JMP I .+1
	CONEXT

CONOU2,	JMS CONGET	/FIND HIS JOB
	DCA CONDDB
	TAD I CONDDB	/GET THE OUTPUT STATUS
	SPA
	JMP CONOU9	/HE HAS TYPED ^S
	RTL
CONSKP,	SPA CLA
	JMP CONJAM	/SPECIAL CHARACTERS
CONOU3,	TAD CONDDB
	FETCH		/GET A CHARACTER
	JMP CONOU9	/BUFFER EMPTY
CONOU4,	DCA TTCHAR
	TAD TTCHAR	/CHECK FOR CARRIAGE RETURN (FOR SERIAL LA30'S @ 300 BAUD)
	AND C0177	/LET'S KEEP DAWNWOOD JUNIOR HIGH HAPPY
	TAD FILLC
	SZA CLA
	JMP CONOU5	/NORMAL CHARACTER
	TAD CONDBA
	TAD FILHI	/HI LINE LIMIT FOR FILLERS
	CLL
	TAD FILLO	/LO LINE LIMIT FOR FILLERS
	SNL CLA	
	JMP CONOU5	/NO FILLERS FOR THIS LINE
	TAD CONDDB
	TAD C0005
	DCA WS2		/POINTER TO DDB CHARACTER COUNT
	STL RAR
	TAD I WS2	/INDICATE THE NEED FOR FILLERS
	DCA I WS2
CONOU5,	IOF
	TAD I WS0	/WHAT'S THE HARDWARE DOING?
	RTL
	SNL CLA		/HARDWARE BUSY FLAG IN THE LINK
	JMP CONOU6	/NOTHING - SEND TO IT
	TAD TTCHAR
	RAL		/SET THE CHARACTER READY FLAG
CONOU8,	ION
	DCA I WS0	/NEW LINE STATUS
	JMP CONOU1	/CHECK NEXT LINE
CONOU6,	TAD WS1
	TAD CONLPR
	SZA		/LINE PRINTER?
	JMP CONOU7	/NO - EITHER TTY, HSP, OR NONSTANDARD DEVICE
		IFNZRO LPT-3 <
	LIE		/DISABLE LS08/LS8E INTERRUPTS
	LCP	>	/DISABLE LP08/LE8 INTERRUPTS
	ION
	TAD CONLPF
	JMS I SETFLG	/SET THE LINE PRINTER FLAG FOR THE USER
	TAD TTCHAR
	JMP CONLP2
CONLP1,
		IFZERO LPT-3 <
	LCF
	ION	>
	TAD CONDDB
	FETCH		/NO - GET ANOTHER CHARACTER FOR THE LINE PRINTER
	JMP CONOU9	/LINE PRINTER BUFFER IS EMPTY
		IFNZRO LPT-3 <
	LSF		/IS IT READY FOR THE NEXT CHARACTER ALREADY
	JMP CONOU4	/NO - JUST TUCK THIS ONE AWAY FOR AN INTERRUPT TO TAKE
CONLP2,	LPC
	STL CLA RTR
	DCA I WS0	/REMEMBER THE HARDWARE IS BUSY
	JMP CONLP1	>
		IFZERO LPT-3 <
CONLP2,	IOF
	LPC		/SEND OFF THE CHARACTER
	CLA
	LSF		/PRINTER READY FOR ANOTHER ALREADY?
	JMP CONLP3	/NO - ONE MORE FETCH FOR BUFFERING
	JMP CONLP1	/YES - KEEP GOING
		>

CONJAM,	TAD I CONDDB
	AND C0037	/REMOVE THE JAM REQUEST
	DCA I CONDDB
	TAD C0007	/BELL?
	SZL
	TAD C0014	/NO -  "XOFF"
	JMP CONOU4

CONOU7,	TAD CONDEV
	DCA CONTLS
	TAD I CONTLS
	TAD C0005	/CONSTRUCT TLS, PLS, OR "JMP TBOUT"
	DCA CONTLS
	TAD TTCHAR
CONTLS,	.-.		/TLS, PLS OR JMP TBOUT
CONLP3,	STL CLA RTR	/AC=2000
	ION
	DCA I WS0
	JMP CONOU3	/GET ANOTHER CHARACTER

CONGET,	0
	TAD WS0
	STL RAL		/TIMES 2 PLUS 1
	TAD DEVOUT
	DCA CONDBA	/DEVTBL POINTER
	TAD I CONDBA	/IS THERE A DDB FOR THIS DEVICE?
	SZA
	JMP I CONGET
CONOU9,	CLL STA RAR
	CIF		/NO INTERRUPTS
	AND I WS0
	DCA I WS0	/CLEAR THE REQUEST FLAG
	TAD I CONDBA	/DOES HE EXIST
	SNA
	JMP CONOU1	/NO - SO WE'RE FINISHED
	DCA AXS1
	TAD I AXS1	/JOB
	SZA CLA
	JMP CONOU1	/STILL DEFINED
	DCA I CONDBA	/CLEAR HIM FROM THE DEVTBL
	TAD CONDDB	/TIME TO RELEASE THE DDB
	CDF
	RETBLK
	DATFLD
TTIME2,	STA
TTIME3,	TAD AXS1	/ADDRESS OF DDB
	CLRBUF		/FLUSH OUT BUFFER
	TAD I WS0
	AND C1000
	SNA CLA		/ARE WE HERE DUE TO A HUNG DEVICE?
	CLA CLL CML RTR	/NO - LEAVE THE 'INTERRUPT PENDING' BIT SET
	AND I WS0	/CLEAR THE WAITING CHARACTER
	DCA I WS0
	JMP I .+1
	CONOU2
TOFA1,
TTIME,	0
	AND C1000
C7740,	SZA SMA CLA	/SMA HERE TO MAKE CONSTANT
	JMP TTIME1	/NO INTERRUPTS
	CIF
	TAD I WS0
	SZA SMA		/REQUEST OR INACTIVE
	TAD C1000	/NO SET TIMER BIT
	SMA		/HOW SHALL WE EXIT
	ISZ TTIME	/SKIP - HE'S CURRENTLY ACTIVE
	DCA I WS0	/SAVE UPDATED STATUS
	JMP I TTIME	/AND AWAY
TTIME1,	JMS I CONGEA	/HUNG - FIND HIS JOB
	DCA AXS1
	JMS I CONSEA
	TAD TTIMCD
	TAD WS1
	SPA CLA		/IS THIS AN ASSIGNABLE CHARACTER DEVICE?
	JMP TTIME3	/NO - A TELEPRINTER
	TAD I AXS1	/JOB OWNING DEVICE
	SNA
	JMP TTIME2	/NO JOB, HUNG--LET'S GET RID OF HIS BUFFER!!
	CDF
	ERROR		/PASS THE ERROR TO HIM
	 HUNGDV
	DATFLD
	JMP I CONO1A	/TRY AGAIN NOW

TTIMCD,	CDVOUT+2

TOFT1,
TOFSET,	0		/ONLY CALLED BY "TOF"
	TAD TOF
	SPA CLA		/CALLED FROM INPUT OR OUTPUT HANDLER?
	JMS I CONSEA	/SET OUTPUT FLAGS
	JMP I TOFSET
/RETRIEVE A CHARACTER FROM LINKED BUFFER
/CALL:	DDB ADDRESS IN AC
/	JMS TOF
/	RETURN BUFFER EMPTY
/	RETURN CHARACTER IN AC

TOF,	0
	TAD C0005	/INDEX TO COUNT
	DCA TOFA1
	TAD I TOFA1
	SNA
	JMP I TOF	/ALREADY EMPTY
	ISZ TOF		/SHOW SUCCESS
	SPA
	JMP TOF3	/GENERATE A FILLER
	TAD C7740
	SNA
	JMS TOFSET	/TIME TO SET STR1 BIT
	TAD C0037	/AC NOW = COUNT -1
	SNA
	JMP TOF4	/THIS WILL BE THE LAST CHARACTER
TOF0,	DCA I TOFA1
	ISZ TOFA1	/POINT TO EMPTY COUNT
	ISZ I TOFA1	/ANY LEFT IN THIS BLOCK?
	JMP TOF1	/MUST BE
	TAD TC7766
	DCA I TOFA1	/RESET THE EMPTY COUNT
	ISZ TOFA1	/EMPTY BLOCK
	TAD I TOFA1
	CDF
	RETBLK		/RETURN THE EMPTY BLOCK
	DATFLD
	DCA I TOFA1	/LINK TO NEXT BLOCK
	TAD I TOFA1
	AND C0007
	SZA CLA		/LEGAL LINK POINTER?
	REBOOT		/NO - ERROR *****
	TAD TC7766
	JMP TOF1+2
TOF1,	TAD I TOFA1	/GET THE COUNT TO DETERMINE POSITION WITHIN THE BLOCK
	ISZ TOFA1	/POINT TO EMPTY BLOCK
	TAD C0003
	SMA		/UNPACK?
	STL RAL		/YES (MULT BY 2 THEN ADD ONE) FUDGE POSITION
	SPA		/UNPACK?
	STL CIA		/NO -  MAKE OFF SET POSITIVE - SET LINK TO INDICATE NO UNPACKING NEEDED
	TAD I TOFA1	/ADD OFFSET TO EMPTY BLOCK POINTER
	DCA TOFA1
	TAD I TOFA1	/GET CHARACTER; OR AT LEAST PART OF IT
	SZL		/UNPACK?
	JMP TOF2	/NO
	AND C7400	/SAVE PERTINENT BITS
	DCA TOFT1
	ISZ TOFA1
	TAD I TOFA1	/GET THE OTHER HALF OF THE CHARACTER
	AND C7400	/THROW AWAY THE JUNK
	CLL RTR		/START MOVING IT INTO PLACE
	RTR
	TAD TOFT1	/GET THE M.S. BITS
	RTR
	RTR		/THAT SHOULD DO IT
TOF2,	AND C0377	/CLEAR ANY JUNK LEFT OVER
	JMP I TOF	/AND AWAY
TOF3,	TAD C0400	/INCR. FILLER COUNT
	DCA I TOFA1
	JMP I TOF	/EXIT WITH FILLER (NULL) CHARACTER
TOF4,	JMS TOFSET	/SET THE STR1 BIT FOR THIS DEVICE
	STA
	TAD TOFA1
	DCA TOFT1	/POINTS TO FILL BLOCK POINTER
	TAD I TOFT1
	CDF
	RETBLK		/RETURN LAST BLOCK OF THE BUFFER
	DATFLD
	AND TOF
	SMA CLA		/CALLED FROM INPUT OR OUTPUT HANDLER?
	TAD WS0		/INPUT - CHECK FOR NON-ZERO BREAK MASK
	SNA CLA
	JMP TOF5	/NO "JSDEL"TO CLEAR
	TAD C0100
	JMS I TOFCLR	/CLEAR JSDEL - THIS IS THE LAST CHARACTER
TOF5,	DCA I TOFT1	/CLEAR FILL POINTER SO WE KNOW WE'RE EMPTY
	JMP TOF0

TC7766,	7766
TOFCLR,	CLSTR1
	IFNZRO CORTBL-.&4000	<GLITCH; *.-1>
	*CORTBL
/*CORTBL	/CORE ALLOCATION TABLE (FIXED)
/
/THIS IS THE FIELD ALLOCATION TABLE
/THE LOCK-BITS ARE REMOVED BY INIT AS A FUNCTION
/OF THE NUMBER OF USER FIELDS.
CORTBL,	LOCK	/DATFLD
	LOCK	/FIELD 2
	LOCK	/FIELD 3
	LOCK	/FIELD 4
	LOCK	/FIELD 5
	LOCK	/FIELD 6
	LOCK	/FIELD 7

/
/THE FOLLOWING IS THE LEVEL-2 ACTIVITY QUEUE.
L2QTB,	ZBLOCK 20


/ROUTINE TO PERMIT 'STORE' AN EXTRA BUFFER AND CHECK
/TO CLEAR THE 'FULL' FLAG.

ALLOK,	0
	ISZ ALLOK	/ALWAYS ALLOW ANOTHER BLOCK
	DCA ALLOKP	/SAVE THE POINTER TO THE COUNT
	TAD I ALLOKP
	TAD ALLOKM
	SMA SZA CLA	/CAN WE CLEAR THE 'FULL' FLAG?
	JMP I ALLOK	/NOT YET
	TAD I CONDDB
	AND ALLOKC	/YES
	DCA I CONDDB
	JMP I ALLOK
/
ALLOKC,	-DFULL-1
ALLOKM,	-131		/BUFFER FULL TRIPS AT 90 CHARACTERS
/*DEVCHK	/CHECK DEVICE OWNERSHIP
/CHECK DEVICE ASSIGNMENT.
/CALL:	JMS DEVCHK
/	 DEVTBL POINTER
/	RETURN IF OK; THROUGH 'UUOERR' IF NOT
/
ALLOKP,
DEVCHK,	0
	TAD I DEVCHK
	ISZ DEVCHK
	DCA WS2		/SAVE THE DEVTBL POINTER
	RDF
	TAD C6203
	DCA DEVEXT	/SET THE RETURN FIELD
	DATFLD
	TAD I WS2
	SNA		/DDB EXIST?
	JMP I UUOERA	/NO - THEN HE DOESN'T OWN IT!
	DCA AXS1
	TAD JOB
	CIA
	TAD I AXS1
	SZA CLA		/OWNED BY THIS USER?
	JMP I UUOERA	/NO - BAD!
DEVEXT,	 HLT
	JMP I DEVCHK	/YES - TAKE NORMAL RETURN


/HANDLER FOR THE USER'S IOT REQUESTS OF THE CARD READER

UUCDR0,	IAC		/RCRC - READ CARD COMPRESSED (8/E ONLY)
	IAC		/RCRB - READ CARD BINARY
	DCA UUOCAL	/RCRA - READ CARD ALPHA
	JMS DEVCHK	/CHECK HIS OWNERSHIP
UUCDR1,	 DEVTBE+4
	TAD UUOCAL	/HE OWNS IT ALL RIGHT
	CIF DATFLD-1
	JMP I .+1	/PASS THE IOT TYPE-CODE
	UUCDR

/HANDLER FOR CARD READER TIMEOUTS

L2CDR,	DATFLD
	TAD I UUCDR1
	DCA AXS1
	TAD AXS1	/GET HIS JOB NUMBER
	ERROR		/ AND PASS HIM THE ERROR CODE
	 HUNGDV
CDL20,	CIF DATFLD-1
	JMP I .+1	/THEN OFF TO FIELD 1
	CDL21
/ROUTINE TO CHECK IF A CHARACTER IS A BREAK-CHARACTER.
/CALL:	TAD (BREAK-MASK)	/CHARACTER IN 'TTCHAR'
/	JMS BRKTST
/	 NOT A BREAK
/	 A BREAK
/
BRKTST,	0
	CDF
	SPA SNA		/IS IT 4000 OR 0?
	JMP BRKTS2	/YES
	DCA WS0		/NO - SAVE IT
	TAD BRKTBA
	DCA AXS1	/SET POINTER TO THE TABLE
	TAD TTCHAR
BRKTS1,	ISZ AXS1
	TAD I AXS1	/ -(HIGH END OF RANGE)
	CLL
	TAD I AXS1	/ +(NUMBER OF CHARACTERS)
	SNL		/DID IT FALL OUT HERE?
	JMP BRKTS1	/NOPE
	CLA
	TAD I AXS1	/YES - GET THE CORRESPONDING MASK
	AND WS0
BRKTS2,	SNA CLA		/IS IT A BREAK?
	ISZ BRKTST	/NO
	JMP I BRKTST

BRKTBA,	.-1
	-"Z-1;		"Z-"A+1;	2000	/LETTERS
	"A-"9-1;	"9-"0+1;	1000	/NUMBERS

	"0-211-1;	211-211+1;	400	/TAB
	211-215-1;	215-212+1;	200	/LF, VT, FF, CR
	212-";-1;	";-"!+1;	100	/ !"#$%&'()*+,-./:;

	"!-240-1;	240-240+1;	40	/SPACE
	240-"@-1;	"@-"<+1;	20	/<=>?@
	"<-"_-1;	"_-"[+1;	10	/[\]^_

	"[-377-1;	377-377+1;	4	/RUBOUT
	377-376-1;	376-375+1;	2	/ALTMODES
	375-377-1;	377-0+1;	1	/ANYTHING ELSE
	PAGE
/RETURN ADDRESS OF LINKED TABLE ENTRY
/CALL	TAD TABLE ENTRY ADDRESS
/	GETJTA
/	 ENTRY NAME
/	RETURN

/*GETJTB	/GET ADDRESS OF LINKED ENTRY
GETJTB,	0
	DCA GETJT1	/SAVE JOBTABLE ADDRESS
	TAD I GETJTB	/ENTRY #
	DCA GETJT2
	RDF		/FIELD CALLED FROM
	TAD C6203
	DCA GETJT3	/SO WE CAN GET BACK
	DATFLD		/CHANGE TO DATA FIELD
GETJ1,	TAD I GETJT1	/GET JOBTBL ENTRY
	SNA		/LINK 0?
	JMP GETJ3	/YES - RETURN 0
	DCA GETJT1	/NO. JOB DATA ADDRESS
	TAD GETJM7
	TAD GETJT2	/ARE WE IN PROPER BLOCK?
	SPA		/ENTRY<7?
	JMP .+3		/YES
	DCA GETJT2	/NO. LINK TO NEXT
	JMP GETJ1	/AND TRY AGAIN
	CLA
	TAD GETJT2	/INDEX INTO BLOCK
	TAD GETJT1	/START OF BLOCK
	IAC
GETJ3,	ISZ GETJTB	/SKIP CALLING ARGUMENT
GETJT3,	0		/BACK TO CALLING FIELD
	JMP I GETJTB

GETJT1,	0
GETJT2,	0
GETJM7,	-7
/GET JSFX
/CALL	TAD FILE #
/	JMS GETJFX
/	RETURN WITH JSFX IN AC

GETJFX,	0
	AND C0003	/FILE # ONLY
	CMA
	DCA GETJF0	/-SHIFT COUNT
	STL RAR
	RAR
	ISZ GETJF0	/DONE?
	JMP .-2
	JMP I GETJFX	/YES, EXIT WITH BIT SET IN AC
/RESTORE JOB REGISTERS
/CALL	TAD JOB #
/	RESJOB
/	RETURN

QUANTA,	QUANT
RESMSK,	FIP+SI+37

GETJF0,
RESJO0,	0
	AND RESMSK	/CLEAR CORE STATUS BITS
	DCA JOB		/AND SAVE IN JOB
	TAD JOB
	AND C0037
	TAD JOBTBA
	DCA RESJO1	/JOBTBL POINTER FOR THIS JOB
	DATFLD
	TAD I RESJO1	/GET ADDRESS OF JOB DATA AREA
	DCA I JOBDAT	/AND SAVE IN FIELD 1
	CDF
	TAD CLOCK	/REMOVE ANY QUEUED CLOCK TICKS
	CMA
	TAD QUANTA	/INITIALIZE HIS QUANTUM RUN TIME
	DCA JOBTIM
	DCA L2SV0	/SET PC=0 IN ANTICIPATION OF PHANTOMS
	TAD JOB		/IS IT A PHANTOM?
	AND C0600
	SZA CLA
	JMP I RESJO0	/YES; WE'RE RESTORED!
/
/ NOW RESTORE THE EAE REGISTERS IF THEY EXIST
/
	IFZERO EAE-20 <
		IFZERO CPU-2 <
	SWAB		/PUT EAE IN MODE B
	GETJTW		/PICK UP MODE, GT, & SC
	 JOBREG+1
	MQL		/ & SAVE THEM IN MQ
	TAD C1000
	MQA		/IF THE 'GT' FLAG WAS SET BEFORE,
	SAM		/ THIS WILL SET IT NOW
	CLA MQA ACS	/LOAD SC ALL THE WAY FROM MQ
	MQA		/GET MODE BACK INTO AC
	SMA CLA		/WAS IT SET?
	SWBA		/NO - SET MODE 'A'
		>
		IFNZRO CPU-2 <
	GETJTW		/PICK UP SC
	 JOBREG+1
	AND C0037	/ZAP ALL BUT THE SEQUENCE-COUNT
	CMA		/COMPLEMENT AND STORE FOR
	DCA .+2		/  OLD-STYLE EAE
	SCL		/LOAD SC
	0
		>
	>
	IFZERO MQREG-1 <
	GETJTW		/RESTORE MQ
	 JOBEAE
	MQL
	>
	TAD RESJO1
	GETJTA		/GET ADDDRESS OF PC IN JOB DATA AREA
	 JOBREG
	DCA RESJO1
	BLT		/MOVE PC, AC, & LINK TO LEVEL-2 REGISTERS
	 DATFLD
RESJO1,	 0
	 CDF
	 L2SV0
	 -3
	JMP I RESJO0	/ALL RESTORED
/ROUTINE TO FIND THE BEST FIELD TO SWAP. THIS ALGORITHM
/GIVES A SYSTEM PHANTOM PRIORITY OVER NON-RUNNABLE JOBS
/BUT NOT OVER RUNNABLE JOBS. SINCE INACTIVE JOBS THUS TEND
/TO BE SWAPPED OUT, MORE CORE IS AVAILABLE FOR ACTIVE JOBS
/AND LESS SWAPPING NEEDS TO BE DONE.

SCNSWP,	TAD SCNSAV
	DCA I SCNPTR	/SET OUR OWN POINTER IN 'CORE'
	TAD I SCNCNT
	DCA WS0		/SET FIELD COUNTER
SCN1,	CORE		/FIND AN UN-PROTECTED FIELD
	 FSWP+LOCK+NOTRUN+FIP+SI
	JMP SCN2	/NONE THERE
	AND C0007
	DCA FORCE	/SAVE THE FIELD NUMBER
	TAD FORCE
	TAD CORTBA
	DCA JOBSWA
	TAD I JOBSWA	/GET THE 'CORTBL' ENTRY
	RUNABL		/IS THE JOB RUNNABLE?
	JMP SCN3	/NO - FORCE IT OUT
	ISZ WS0
	JMP SCN1	/YES - TRY AGAIN
SCN2,	DCA FORCE	/CLEAR 'FORCE'
	CORE		/CHECK FOR NON-BUSY PHANTOM
	 FSWP+LOCK+NOTRUN+37
	SKP
	JMP I SCN12A	/OK - JUST LOAD OVER PHANTOM
	CORE		/NO - LOOK FOR ANY VALID FIELD
	 FSWP+LOCK+NOTRUN+FIP+SI
	SCHED		/NOTHING TO SWAP - TRY FOR A RESIDENT JOB
	AND C0007
	DCA FORCE	/FOUND ONE - SAVE THE FIELD NUMBER
SCN3,	TAD I SCNPTR	/PICK UP AND SAVE THE SEARCH POINTER
	DCA SCNSAV	/ SO WE CAN SWAP FAIRLY
	JMP I .+1	/THEN GO SET UP TO SWAP OUT
	SCHFR1

SCNCNT,	CORCNT
SCNPTR,	CORTBP	/SEARCH POINTER IN 'CORE'
SCNSAV,	CORTBL+1
SCN12A,	SCHE12
/SEARCH FOR TTY; RETURN POINTER TO INPUT DDB
/CALL	TAD JOB #
/	TTYUSE
/	RETURN WITH DDB ADDR IN AC, 0 IF NOT FOUND

TTYSRC,	0
	AND C0037	/GET JOB #
	TAD TTYTBA	/START OF TTY TABLE
	DCA CONDBA
	DATFLD
	TAD I CONDBA	/GET UNIT # FROM TABLE
	CLL RAL		/POSITION IN DEVTBL
	TAD DEVTBA	/POINTER TO DEVTBL
	DCA CONDBA
	TAD I CONDBA	/DDB ADDRESS
	CDF
	JMP I TTYSRC

TTYTBA,	TTYTBL

/FIELD 0 DISPATCH FOR  PEEK IOT

UPEEK,	CIF+10		/OFF TO FIELD 1
	JMP I .+1
	UPEEK1
	*7400
	IFNZRO DC08A <
/*JMPDC8	/SKIP OVER DC08A VECTORS
/*DC8REG	/SKIP OVER ACTIVE REGISTERS
JMPDC8=	JMP I .		/SKIP OVER DC08A VECTORS
	.+3
DC8REG=	JMP .		/SKIP OVER DC08A ACTIVE REGISTERS
	IAC
	ISZ ACFLG	/SWITCH TO OUTPUT SIDE
	TAD DCCNT
	TAD ACX10
	DCA ACX10	/SKIP OVER THE DC08A ENTRIES IN THE TABLE
	JMP ACINT1	/BACK TO WORK
DCCNT,	DC08A-1 >
*7410

RINT,	DCA SRVFLG	/CLEAR LEVEL 2 REQUEST FLAG
	DATFLD
	RSF
	JMP ACINT
	RRB		/GET CHARACTER FROM THE READER
	DCA I ACX11	/PUT IT IN THE RING BUFFER
	CDF
	ISZ HSRCNT	/ENOUGH ??
	JMP RINT1	/N0 - SEE IF THERE'S STILL ROOM IN THE RING BUFFER
RINT0,	DCA I RTIM
	DATFLD
	TAD RDEV
	JMP ACINT8	/STORE THE ENTRY NUMBER FOR THE READER
RINT1,	TAD KEYC	/IS THERE ENOUGH ROOM LEFT IN THE RING BUFFER?
	TAD RLIM
	SMA CLA
	JMP RINT2
	RFC		/KEEP THE READER GOING
	CLL CMA RAL	/SET THE TIMER FOR 2 MORE SECONDS
	JMP RINT0
RINT2,	TAD RL2A
	DCA I L2Q	/SCHEDULE THE READER TO BE RESTARTED AFTER THE BUFFER HAS BEEN EMPTIED
	ISZ SRVFLG	/REMEMBER WE WANT LEVEL 2
	JMP RINT0

RDEV,	NULINE+CONTTY	/RELATIVE ENTRY NUMBER FOR HSR
RLIM,	-NULINE-CONTTY-CDVIN
RL2A,	L2PTR1
RTIM,	TIMPTR

/*OUTIOT	/INCREMENT 'ACFLG' TO SIGNAL OUTPUT
/*ENDIOT	/JMP TO EXIT HANDLER
OUTIOT=	ISZ ACFLG
ENDIOT=	JMP ACINT6
ACINT,	CLL STA RAL	/AC=-2
	DCA ACFLG	/START BY CHECKING FOR INPUT
	TAD ACTBLA	/ADDRESS OF THE SKIP IOT'S
	DCA ACX10
	STL RTL
ACINT0,	TAD HIPRO
	DCA HICNT	/SHORT LOOP COUNT TO PROTECT HI-PRIORITY DEVICES
	DATFLD
ACINT1,	ISZ HICNT
	JMP ACINT2-2
	JMS I HIPRIA	/GO CHECK RK, DT, & CDR
	SNA		/ANYTHING REQUESTED?
	JMP ACINT0	/NO
	DCA I L2Q	/QUEUE THEIR REQUEST FOR THEM
	ISZ SRVFLG	/REMEMBER IT
	JMP ACINT0	/RE-INTIALIZE THE COUNT
	TAD I ACX10
	DCA ACINT2
ACINT2,	.-.		/DEVICE SKIP
	JMP ACINT1	/NOT THIS ONE
	TAD ACINT2
	TAD C0005	/GERNERATE READ OR SEND IOT
	ISZ ACFLG
	JMP ACINT7	/MUST BE A KEYBOARD
	DCA ACINT3	/SAVE THE TLS PLS OR LPC
	TAD ACX10
	TAD ACOUT	/DETERMINE THE LINE NUMBER
	DCA ACFLG	/THIS LINE'S OUTPUT REGISTER
	TAD I ACFLG
	RAR
	SNL
	JMP ACINT5	/NOTHING WAITING TO GO
ACINT3,	.-.
	CLA STL IAC
	RTR
	DCA I ACFLG	/HARDWARE BUSY AND REQUEST FLAGS SET
	DCA TTOFLG	/SCHEDULE LEVEL 2
ACINT4,	TAD L2Q		/POSTION OF FILL POINTER
	TAD L2QBOT	/MINUS L2QTB-1
	CIA
	TAD SRVFLG	/DON'T COUNT THE ONES WE JUST PUT IN
	SNA CLA		/SHOULD WE SCHEDULE LEVEL 2?
	TAD EXITA	/YES
	DISMIS
ACINT5,	CLA IAC
	TAD ACINT2
	DCA .+1
HICNT,	.-.		/TCF, PCF OR LCF
	STL CLA RAR	/AC=4000
	AND I ACFLG
	DCA I ACFLG	/NO MORE INTERRUPTS EXPECTED FROM THIS LINE
ACEXIT,	TAD SRVFLG	/ANY REQUESTS?
	SZA CLA
	JMP ACINT4	/YES - MAKE SURE THEY'RE SCHEDULED
	DISMIS		/NOTHING SPECIAL

ACINT6,
		IFNZRO LPT-3 <
	LSRP		/LP08/LE8 ERROR?
	JMP ACEXIT	/NO, MUST BE AN UNDEFINED INTERRUPT
	LCP	>	/CLEAR INTERRUPT ENABLE
		IFZERO LPT-3 <
	NOP		/ROOM FOR EXTRANEOUS INTERRUPT CLEARING
	NOP
	NOP	>
	JMP ACEXIT

ACINT7,	DCA ACFLG	/SAVE THE KRB IOT
ACFLG,	.-.
	SNA
	JMP ACEXIT	/THROW AWAY NULL CHARACTERS
	AND C0177
	TAD C0200	/FORCE ON THE "PARITY" BIT
	DCA I ACX11	/STASH IT ON THE RING BUFFER
	TAD ACTBLA
	CMA
	TAD ACX10	/LINE NUMBER CAUSING INTERRUPT
ACINT8,	JMS ACINT9	/STASH LINE NUMBER & UPDATE POINTERS ETC.
	JMP ACINT4	/SCHEDULE LEVEL 2 IF WE WERE IN USER MODE
ACINT9,	0
	DCA I ACX11	/STASH AWAY THE LINE NUMBER
	ISZ KEYC	/COUNT THE ENTRY
	ISZ ACCNT	/END OF RING BUFFER
	JMP I ACINT9	/NO
	TAD ACRING
	DCA ACX11	/YES - RESET POINTER
	TAD ACSIZE
	DCA ACCNT	/AND THE COUNT
	JMP I ACINT9

SRVFLG,	0
TTOFLG,	1		/NON-ZERO WHEN SERVICE IS NOT REQUIRED
ACRING,	RINGIN-1
ACCNT,	-INPUTS
ACSIZE,	-INPUTS
KEYC,	0
HIPRO,
IFNZRO CPU-2 < -4 >
IFZERO CPU-2 < -6 >
HIPRIA,	DTCHK
ACTBLA,	SKPTBL-1
ACOUT,	OUTREG-SKPTBL-NULINE-CONTTY-CDVIN-CDVGAP-1
L2QBOT,	-L2QTB+1

	PAGE
	
SWPIO,	0
	CLA CLL CMA RTL	/=3 IN AC
	DCA DSERRI	/#OF TRIES
	TAD FINISH
	SMA CLA		/WHICH WAY DO WE SWAP?
	JMP INSET	/SWAP IN
	JMS SWOUT	/SWAP OUT
	JMP I SWPIO	/RETURN

INSET,	JMS SWPIN	/SWAP IN
	JMP I SWPIO	/RETURN

SWPIN,	0
	DCMA		/TO STOP THE DISC
	TAD SWINA 	/RETURN ADDRESS FOR INTURRUPT CHAIN
	DCA I DSWATA	/SAVE IT
	TAD INTRC	/GET THE TRAC # TO BE READ IN

	IFZERO RF08-40 <
	TAD SQREQ	/FIELD TO BE USED
	DEAL
	CLA
	NOP		/JUST FOR PROPER LENGTH
	>
	IFZERO RF08 <
	DXAL
	TAD SQREQ	/FIELD TO BE SWAPPED IN
	TAD C0500	/ENABLE INTERRUPT ON ERROR AND ON COMPLETION
	DIML
	>
	DCA DSWC	/WORD COUNT
	CMA
	DCA DSMA	/CORE ADDRESS
	DMAR
	JMP I SWPIN
SWINA,	SWINR		/SWAPIN RETURN ADDRESS

SWOUT,	0
	DCMA		/TO STOP THE DISC IN CASE OF PROBLEM
	TAD SWOUA	/RETURN ADDRESS FOR INTERRUPT CHAIN
	DCA I DSWATA	/SAVE IT
	TAD OUTTRC	/GET THE TRAC # TO BE SWAPPED OUT
	IFZERO RF08-40 <
	TAD SQREQ	/FIELD TO BE SWAPPED OUT
	DEAL
	CLA
	NOP
	>
	IFZERO RF08 <
	DXAL
	TAD SQREQ	/FIELD TO SWAPPED OUT
	TAD C0500	/INTERRUPT ON ERROR AND ON COMPLETION
	DIML
	>
	DCA DSWC	/WORD COUNT
	CMA
	DCA DSMA	/CORE ADDRESS
	DMAW
	JMP I SWOUT


SWOUA,	SWOUTR		/RETURN ADDRESS AFTER SWAP OUT

SWOUTR,	JMP SOUTR1	/ERROR
	TAD FINISH	/FINISH = -FIELD # AT THIS STAGE MAKE IT +
	CIA
	DCA FINISH	/SAVE IT
	CLA CLL CMA RTL	/ -3
	DCA DSERRI	/# OF TRIES FOR SWAP IN
SOUT5,	JMS SWPIN
	DISMIS		/GO BACK TO WHAT WE WERE DOING
SOUTR1,	ISZ DSERRI	/3 TRIES BEFORE GIVING UP
	JMP SOUTR2
SOUTR4,
		IFZERO RF08  <
	DIMA		/GET THE ERROR FLAGS
	AND C0004	/IS IT DUE TO EAE?
	SNA CLA
			>
	TAD NORMAL	/NO, DISC IN REAL TROUBLE
	TAD SLEP2A	/EAE, PUT TO SLEEP
	JMP NOTOK	/JMP TO COMMON PART  SAVE CORE!!!

NORMAL,	-SLEEP2+SWERR
SLEP2A,	SLEEP2

SOUTR2,	JMS SWOUT	/TRY AGAIN TO SWAP OUT
	DISMIS

SWINR,	JMP SWIN1	/ERROR
	TAD SWPGD2	/OK WHAT TO DO NEXT? L2Q
	JMP NOTOK	/COMMON CODE
SWIN1,	ISZ DSERRI	/TRY 3 TIMES ON ERROR
	JMP SOUT5
	JMP SOUTR4	/GIVE UP
/START DISC TRANSFER
/CALL:	TAD ADDRESS OF PARAMETERS
/	DSGO
/	RETURN

DSPAR=	12

DSGO0,	0
	DCA DSPARM
	CLA CLL CMA RTL
	DCA DSERRI
	JMS DSTRYA
	JMP I DSGO0

DSTRYA,	0
	DCMA		/CLEAR THE FLAG & STOP THE DISC
	TAD DSRETA
	DCA I DSWATA
	CLA CMA		/ADDRESS OF PARA-1 FOR INDEX REGISTER
	TAD DSPARM
	DCA DSPAR
	DATFLD
	TAD I DSPAR	/FUNCTION
	DCA DSRORW
	TAD I DSPAR	/DISC EXTENSION

	IFZERO RF08-40 <
	CLL RTL
	CLL RAL
	TAD I DSPAR	/MEMORY EXTENSION
	CLL RAL
	DEAL
	CLA
	>
	IFZERO RF08 <
	CLL RTR
	DXAL
	TAD I DSPAR
	CLL RAL
	AND C0070
	TAD C0500
	DIML		/LOAD INTERRUPT ENABLE AND MEMORY EXTENSION
	>
	TAD I DSPAR
	DCA DSWC
	TAD I DSPAR
	DCA DSMA
	TAD I DSPAR
	CDF
DSRORW,	0
	JMP I DSTRYA

DSERR1,	JMS DSTRYA
	DISMIS

DSPARM,	0
DSERRI,	0
DSRETA,	DSRET
DSWATA,	DSWAIT

	IFNZRO 7750-.&4000	<GLITCH; *.-1>
	*7750
DSWC,	7751	/FOR LOADING INTO FIELD 0 ON INITIALIZATION
DSMA,	7751	/(SINCE THE 4K TRANSFER OVERWRITES THE DATA BREAK LOCATIONS)

SLEEPA,	SLEEP1
C0500,	500
	0		/FOR DECTAPE SERVICE
	0		/FOR DECTAPE SERVICE

DSRET,	JMP .+3		/ERROR
	IAC
	JMP OK		/OK
	ISZ DSERRI
	JMP DSERR1

	IFZERO RF08 <
	DIMA
	AND C0004	/IS DRL FLAG ON?
	SNA CLA
	JMP OK		/NO, NORMAL ERROR RETURN
	TAD SLEEPA	/YES, EAE MAY BE THE REASON PUT IT TO SLEEP
	JMP NOTOK
	>
OK,	DATFLD
	TAD I DSPAR
NOTOK,	CDF
	DCMA
	DISMIS		/RETURN TO MONITOR

/////	$$$$$
	$$$$$
